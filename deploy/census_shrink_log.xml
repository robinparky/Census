<?xml version="1.0" encoding="UTF-8"?>
<yshrink version="0.1">
<!-- parsing /home/rpark/pms/Census/deploy/census.jar -->
<entrypoints>
	<class name="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void setRedundantPeptideNum(int)" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void setUnfilteredPeptideNum(int)" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void setFileName(java.lang.String)" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void setDbFileName(java.lang.String)" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void close()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="int getRedundantProteinNum()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="java.util.Iterator getProteins()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="int getUnfilteredPeptideNum()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="int getRedundantPeptideNum()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="java.lang.String getDbFileName()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="java.lang.String getCriteria()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="double getConfidence()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="java.util.ArrayList getChroProteinList()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="boolean isVersion2()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="void setRedundantProteinNum(int)" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<method signature="int getTotalPeptideNumber()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
	<class name="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="javax.swing.JComponent getComponent()" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="void &lt;init&gt;(javax.swing.JLabel,javax.swing.JComponent,java.lang.String)" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="void setValue(java.lang.String)" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="void setComponent(javax.swing.JComponent)" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="void setDescription(javax.swing.JComponent)" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="javax.swing.JComponent getDescription()" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<method signature="java.lang.String getValue()" class="edu.scripps.dtaselect.gui.utilities.DescriptionComponentField" />
	<class name="edu.scripps.pms.census.util.StringUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.StringUtil" />
	<method signature="boolean startsWithDigitOrUpper(java.lang.String)" class="edu.scripps.pms.census.util.StringUtil" />
	<method signature="boolean startsWithDigit(java.lang.String)" class="edu.scripps.pms.census.util.StringUtil" />
	<class name="edu.scripps.pms.census.util.PostCalculation" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.model.ChroPeptide,double[],double[])" class="edu.scripps.pms.census.util.PostCalculation" />
	<class name="edu.scripps.pms.util.MZXmlHandler$NativePeakList" />
	<method signature="double[] getIntArr()" class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" />
	<method signature="void setIntArr(double[])" class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" />
	<method signature="void setMassArr(double[])" class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" />
	<method signature="double[] getMassArr()" class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" />
	<class name="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.SpecializedFiltersPanel getSpecializedFiltersPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="void showWarningMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="void showErrorMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.OptionsPanel getOptionsPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.PeptideFiltersPanel getPeptideFiltersPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="javax.swing.JLabel getLbDirectory()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="javax.swing.JTabbedPane getTabbedPane()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.UtilitiesPanel getUtilitiesPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="void setTxtDatabasePath(java.lang.String)" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="void showGUI()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.MainFrame getInstance()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.MainFrame$ToolBarButton getBtNext()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.StatisticsPanel getStatisticsPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.LocusFiltersPanel getLocusFiltersPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="void setLbDirectory(java.lang.String)" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.MainFrame" />
	<method signature="edu.scripps.dtaselect.gui.ProgramProgressBarPanel getProgramProgressBarPanel()" class="edu.scripps.dtaselect.gui.MainFrame" />
	<class name="ptolemy.gui.SwingWorker" />
	<method signature="java.lang.Object get()" class="ptolemy.gui.SwingWorker" />
	<method signature="void start()" class="ptolemy.gui.SwingWorker" />
	<method signature="void interrupt()" class="ptolemy.gui.SwingWorker" />
	<method signature="java.lang.Object construct()" class="ptolemy.gui.SwingWorker" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.SwingWorker" />
	<method signature="java.lang.Object getValue()" class="ptolemy.gui.SwingWorker" />
	<method signature="void finished()" class="ptolemy.gui.SwingWorker" />
	<class name="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="edu.scripps.pms.util.MZXmlHandler$NativePeakList decode32ToArr(java.lang.String)" class="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="edu.scripps.pms.util.spectrum.PeakList decode32(java.lang.String)" class="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="void decode32(java.lang.String,edu.scripps.pms.util.spectrum.PeakList)" class="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="edu.scripps.pms.util.spectrum.PeakList decode(java.lang.String,int)" class="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="byte[] floatTobyte(float)" class="edu.scripps.pms.util.MZXmlHandler" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.MZXmlHandler" />
	<class name="graph.ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox,java.lang.String[])" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="int _parseArgs(java.lang.String[])" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void _help()" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="java.lang.String _usage()" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void _about()" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void _close()" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void main(java.lang.String[])" class="graph.ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="graph.ptolemy.plot.PlotApplication" />
	<field name="_test" class="graph.ptolemy.plot.PlotApplication" />
	<class name="edu.scripps.pms.census.util.CalcUtil$ResultList" />
	<method signature="void &lt;init&gt;(int,int,int)" class="edu.scripps.pms.census.util.CalcUtil$ResultList" />
	<method signature="void addElement(int,int,double,double)" class="edu.scripps.pms.census.util.CalcUtil$ResultList" />
	<class name="edu.scripps.dtaselect.logic.MoreFASTA" />
	<method signature="void usage()" class="edu.scripps.dtaselect.logic.MoreFASTA" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.logic.MoreFASTA" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.logic.MoreFASTA" />
	<class name="IndexTest" />
	<method signature="void writeIndex(java.lang.String)" class="IndexTest" />
	<method signature="void &lt;init&gt;()" class="IndexTest" />
	<method signature="void readRandom(java.lang.String,int,int)" class="IndexTest" />
	<method signature="void main(java.lang.String[])" class="IndexTest" />
	<class name="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="int CountProteins(long)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void CreateOutputFiles(edu.scripps.dtaselect.logic.DataSet,edu.scripps.dtaselect.logic.DataSet,edu.scripps.dtaselect.logic.DataSet,edu.scripps.dtaselect.logic.DataSet,boolean,boolean,edu.scripps.dtaselect.logic.IniFile)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void SortListByLocus()" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="boolean IsHidden(edu.scripps.dtaselect.logic.DataSet)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="java.lang.String HTMLColor(java.awt.Color)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void StructureByClassification(edu.scripps.dtaselect.logic.Classification)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void PrepToPrint(edu.scripps.dtaselect.logic.DataSet,boolean)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<method signature="void AddNonredundantly(java.lang.String)" class="edu.scripps.dtaselect.logic.LocusSummary" />
	<class name="com.microstar.xml.XmlException" />
	<method signature="java.lang.String stackTraceToString(java.lang.Throwable)" class="com.microstar.xml.XmlException" />
	<method signature="int getLine()" class="com.microstar.xml.XmlException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="com.microstar.xml.XmlException" />
	<method signature="int getColumn()" class="com.microstar.xml.XmlException" />
	<method signature="java.lang.String getSystemId()" class="com.microstar.xml.XmlException" />
	<method signature="java.lang.Throwable getCause()" class="com.microstar.xml.XmlException" />
	<method signature="java.lang.String getMessage()" class="com.microstar.xml.XmlException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,int)" class="com.microstar.xml.XmlException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="com.microstar.xml.XmlException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,int,java.lang.Throwable)" class="com.microstar.xml.XmlException" />
	<method signature="void printStackTrace()" class="com.microstar.xml.XmlException" />
	<class name="edu.scripps.pms.census.plot.DataIndependentPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.DataIndependentPlot" />
	<method signature="void _drawPeak(java.awt.Graphics)" class="edu.scripps.pms.census.plot.DataIndependentPlot" />
	<class name="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<method signature="void &lt;init&gt;(double,long)" class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<method signature="void add(double,double)" class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<method signature="void add(double,long)" class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<method signature="double getWeightedAverage()" class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<method signature="double getStandardWeightedAverage()" class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" />
	<class name="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setToGradientShading(boolean)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="int getLegendMax()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="int getShowedMin()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setLegendMax(int)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setShowedMax(int)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="int getColorScheme()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void &lt;init&gt;(int,int,int,int,boolean)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setShowedMin(int)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setLegendMin(int)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="int getLegendMin()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setPercent(boolean)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="boolean isPercent()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void &lt;init&gt;(int,int,boolean)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setToMaxMinValues()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setColorScheme(int)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="int getShowedMax()" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<method signature="void setEnabled(boolean)" class="edu.scripps.dtaselect.object.OColorLegend" />
	<class name="ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Plot)" class="ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void endElement(java.lang.String)" class="ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void _addPoint(boolean,java.lang.String)" class="ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void startElement(java.lang.String)" class="ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void startDocument()" class="ptolemy.plot.plotml.PlotMLParser" />
	<field name="_currentPointCount" class="ptolemy.plot.plotml.PlotMLParser" />
	<field name="_currentDataset" class="ptolemy.plot.plotml.PlotMLParser" />
	<field name="_connected" class="ptolemy.plot.plotml.PlotMLParser" />
	<class name="edu.scripps.dtaselect.gui.utilities.SpecialFileFilter" />
	<method signature="java.lang.String getDescription()" class="edu.scripps.dtaselect.gui.utilities.SpecialFileFilter" />
	<method signature="boolean accept(java.io.File,java.lang.String)" class="edu.scripps.dtaselect.gui.utilities.SpecialFileFilter" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.gui.utilities.SpecialFileFilter" />
	<method signature="java.lang.String getExtension(java.io.File)" class="edu.scripps.dtaselect.gui.utilities.SpecialFileFilter" />
	<method signature="boolean accept(java.io.File)" class="edu.scripps.dtaselect.gui.utilities.SpecialFileFilter" />
	<class name="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="float getM2z()" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="void &lt;init&gt;(float,float)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="void setChargeState(int)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="void setIntensity(float)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="void setIndex(int)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="int getIndex()" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="boolean equals(java.lang.Object)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="void &lt;init&gt;(float,float,int)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="int getChargeState()" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="void setM2z(float)" class="edu.scripps.pms.util.spectrum.Peak" />
	<method signature="float getIntensity()" class="edu.scripps.pms.util.spectrum.Peak" />
	<class name="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="void DisplayCoverage(edu.scripps.dtaselect.logic.Protein,edu.scripps.dtaselect.logic.CoverageZone)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="edu.scripps.dtaselect.logic.PointList FindPrecursorLosses()" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="edu.scripps.dtaselect.logic.PointList FindMatchingPeaks()" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="java.lang.String ReportFoundIons(int)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="void DisplaySpectrum(edu.scripps.dtaselect.logic.DTAFile,edu.scripps.dtaselect.logic.ParamsFile,edu.scripps.dtaselect.logic.Spectrum)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="edu.scripps.dtaselect.logic.PointList GetCIonsFor(float,int,java.lang.String,java.lang.String,boolean,edu.scripps.dtaselect.logic.Spectrum)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="void SetVisibility(boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="void DisplayRaw(edu.scripps.dtaselect.logic.DTAFile,edu.scripps.dtaselect.logic.ParamsFile)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="edu.scripps.dtaselect.logic.PointList bFindMatchingPeaks()" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="java.awt.Color GiveColorFor(int)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="float calculateFrags()" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.logic.SpecView" />
	<method signature="edu.scripps.dtaselect.logic.PointList GetNIonsFor(float,int,java.lang.String,java.lang.String,boolean,edu.scripps.dtaselect.logic.Spectrum)" class="edu.scripps.dtaselect.logic.SpecView" />
	<field name="LoMZ" class="edu.scripps.dtaselect.logic.SpecView" />
	<field name="HiMZ" class="edu.scripps.dtaselect.logic.SpecView" />
	<class name="edu.scripps.pms.census.ExportDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.ExportDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.ExportDialog" />
	<class name="edu.scripps.pms.util.spectrum.PointComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="edu.scripps.pms.util.spectrum.PointComparator" />
	<method signature="void &lt;init&gt;(boolean)" class="edu.scripps.pms.util.spectrum.PointComparator" />
	<method signature="boolean equals(java.lang.Object)" class="edu.scripps.pms.util.spectrum.PointComparator" />
	<method signature="void setCompareMode(boolean)" class="edu.scripps.pms.util.spectrum.PointComparator" />
	<class name="edu.scripps.pms.util.isotope.IsotopeTable" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.isotope.IsotopeTable" />
	<class name="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void setColor(java.awt.Color)" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void setRectangle(java.awt.geom.Rectangle2D)" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void setLocus(edu.scripps.dtaselect.object.OLocus)" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="edu.scripps.dtaselect.object.OLocus getLocus()" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OLocus,java.util.Vector)" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void addPeptide(edu.scripps.dtaselect.object.OPeptide)" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void setPeptides(java.util.Vector)" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="java.util.Vector getPeptides()" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="java.awt.geom.Rectangle2D getRectangle()" class="edu.scripps.dtaselect.object.OProtein" />
	<method signature="java.awt.Color getColor()" class="edu.scripps.dtaselect.object.OProtein" />
	<class name="graph.ptolemy.gui.ComponentDialog" />
	<method signature="void _handleClosing()" class="graph.ptolemy.gui.ComponentDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.awt.Component,java.lang.String[],java.lang.String)" class="graph.ptolemy.gui.ComponentDialog" />
	<method signature="java.lang.String buttonPressed()" class="graph.ptolemy.gui.ComponentDialog" />
	<method signature="void setMessage(java.lang.String)" class="graph.ptolemy.gui.ComponentDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.awt.Component,java.lang.String[])" class="graph.ptolemy.gui.ComponentDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.awt.Component)" class="graph.ptolemy.gui.ComponentDialog" />
	<field name="contents" class="graph.ptolemy.gui.ComponentDialog" />
	<field name="_buttonPressed" class="graph.ptolemy.gui.ComponentDialog" />
	<class name="edu.scripps.pms.census.util.GenericPeakFinder" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.GenericPeakFinder" />
	<method signature="void &lt;init&gt;(long[],long[])" class="edu.scripps.pms.census.util.GenericPeakFinder" />
	<method signature="void calc()" class="edu.scripps.pms.census.util.GenericPeakFinder" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.util.GenericPeakFinder" />
	<class name="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="double getAvgIntensityOfLeastIntensePeaks(int)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void addPeak(edu.scripps.pms.util.spectrum.Peak)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="float getTotalIntensity()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="edu.scripps.pms.util.spectrum.Peak getPeakByM2z(double)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.lang.String getSpectrumWithoutHlines()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="int getMaxChargeState()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void setZlines(java.util.ArrayList)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void setLoscan(int)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.ListIterator getPeaks()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="double getMaxIntensity(double,double)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void setHlines(java.util.List)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void setHiscan(int)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="float getMaxIntensity()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.ArrayList getSortedPeaks(int,boolean)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="edu.scripps.pms.util.spectrum.PointList[] calcQCorrs(int,int,double)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.List getIlines()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void setPrecursorMass(double)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="int getPrecursorScan()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="int numPeaks()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void setListType(java.lang.String)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.List getHlines()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="int getLoscan()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="int getHiscan()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="double getPrecursorMass()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void addZline(edu.scripps.pms.util.spectrum.Zline)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void addIline(java.lang.String)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="float getMinM2z()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.lang.String getSpectrumWithHlines()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.lang.String getListType()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="float getMaxPrecursorMass()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="float getMinIntensity()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.ArrayList getLeastIntensePeaks(int)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="edu.scripps.pms.util.spectrum.Peak getPeak(float,float)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="double getRetentionTime()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="float getMaxM2z()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.ArrayList getSortedPeaks(boolean)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="java.util.Iterator getZlines()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="int getNumZlines()" class="edu.scripps.pms.util.spectrum.PeakList" />
	<method signature="void sortPeaks(boolean)" class="edu.scripps.pms.util.spectrum.PeakList" />
	<field name="DEFAULTNUMPEAKS" class="edu.scripps.pms.util.spectrum.PeakList" />
	<field name="DEFAULTSPECTRUMSIZE" class="edu.scripps.pms.util.spectrum.PeakList" />
	<field name="SORTBYINTENSITY" class="edu.scripps.pms.util.spectrum.PeakList" />
	<field name="SORTBYM2Z" class="edu.scripps.pms.util.spectrum.PeakList" />
	<field name="RETENTIONTIME" class="edu.scripps.pms.util.spectrum.PeakList" />
	<class name="edu.scripps.pms.census.TestJFrame" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.TestJFrame" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.TestJFrame" />
	<class name="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="java.util.Vector sortProteins(java.util.Vector)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void &lt;init&gt;(java.util.Vector,int,boolean)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void setAllMarkingBack()" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void showProteins(int,int)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void markProtein(edu.scripps.dtaselect.object.OProtein)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="java.util.Vector getShowedSamples()" class="edu.scripps.dtaselect.object.OHeatMap" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.object.OHeatMap" />
	<class name="NRUtils" />
	<method signature="void DiscriminantAnalysis(double[][],double[],int,int,byte[])" class="NRUtils" />
	<method signature="double GaussJordan(double[][],int)" class="NRUtils" />
	<method signature="void PrintSymmetricMatrix(double[][],int)" class="NRUtils" />
	<method signature="void &lt;init&gt;()" class="NRUtils" />
	<method signature="void QuickSortIndex(double[],int[],int,int)" class="NRUtils" />
	<method signature="void QuickSortIndex(double[],int[])" class="NRUtils" />
	<class name="edu.scripps.pms.util.SpectrumIndexBuilder" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.SpectrumIndexBuilder" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.SpectrumIndexBuilder" />
	<class name="edu.scripps.pms.census.util.MergeUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.MergeUtil" />
	<class name="edu.scripps.pms.census.util.ReportGenerator" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.ReportGenerator" />
	<method signature="void exportITRAQMultipleReport(java.lang.String,java.io.File,javax.swing.JFrame)" class="edu.scripps.pms.census.util.ReportGenerator" />
	<method signature="void exportITRAQMultipleReport(java.lang.String,java.io.File)" class="edu.scripps.pms.census.util.ReportGenerator" />
	<class name="edu.scripps.pms.census.model.SelectFileModel" />
	<method signature="java.lang.String getSpectraFileName()" class="edu.scripps.pms.census.model.SelectFileModel" />
	<method signature="java.lang.String toString()" class="edu.scripps.pms.census.model.SelectFileModel" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="edu.scripps.pms.census.model.SelectFileModel" />
	<method signature="void setSampleName(java.lang.String)" class="edu.scripps.pms.census.model.SelectFileModel" />
	<method signature="void setSpectraFileName(java.lang.String)" class="edu.scripps.pms.census.model.SelectFileModel" />
	<method signature="java.lang.String getSampleName()" class="edu.scripps.pms.census.model.SelectFileModel" />
	<class name="ptolemy.gui.GUIStringUtilities" />
	<method signature="java.lang.String abbreviate(java.lang.String)" class="ptolemy.gui.GUIStringUtilities" />
	<method signature="java.lang.String[] tokenizeForExec(java.lang.String)" class="ptolemy.gui.GUIStringUtilities" />
	<method signature="java.lang.String split(java.lang.String)" class="ptolemy.gui.GUIStringUtilities" />
	<class name="edu.scripps.pms.util.io.FastaReader" />
	<method signature="java.util.List getFastaList(java.io.InputStream)" class="edu.scripps.pms.util.io.FastaReader" />
	<method signature="java.util.Iterator getFastas(java.lang.String)" class="edu.scripps.pms.util.io.FastaReader" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.io.FastaReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.io.FastaReader" />
	<method signature="java.util.Iterator getFastas(java.io.InputStream)" class="edu.scripps.pms.util.io.FastaReader" />
	<field name="FIRSTCHAROFDEFLINE" class="edu.scripps.pms.util.io.FastaReader" />
	<field name="DEFAULTSEQENCELENGTH" class="edu.scripps.pms.util.io.FastaReader" />
	<class name="edu.scripps.dtaselect.gui.InfoFrame" />
	<class name="ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void keyTyped(java.awt.event.KeyEvent)" class="ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void keyReleased(java.awt.event.KeyEvent)" class="ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void keyPressed(java.awt.event.KeyEvent)" class="ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.EditablePlot)" class="ptolemy.plot.EditablePlot$UndoListener" />
	<class name="edu.scripps.dtaselect.gui.ProteinOverviewPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ProteinOverviewPanel,javax.swing.Icon)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ProteinOverviewPanel,java.lang.String)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ProteinOverviewPanel,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel$ToolBarButton" />
	<class name="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="boolean isDetFactorCheck()" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="double getBestFragIonTolerance()" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="boolean isFilterFragmentIons()" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="void setBestFragIonTolerance(double)" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="edu.scripps.pms.census.conf.PostOptions getInstance()" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="boolean isDisplayFragmentIons()" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="void setFilterFragmentIons(boolean)" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="void setDetFactorValue(float)" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="void setDisplayFragmentIons(boolean)" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="void setDetFactorCheck(boolean)" class="edu.scripps.pms.census.conf.PostOptions" />
	<method signature="float getDetFactorValue()" class="edu.scripps.pms.census.conf.PostOptions" />
	<class name="Test" />
	<method signature="void test()" class="Test" />
	<method signature="void &lt;init&gt;()" class="Test" />
	<method signature="void rotateNew(int,int,int)" class="Test" />
	<method signature="boolean checkWithinBound(int,int,int)" class="Test" />
	<method signature="void main(java.lang.String[])" class="Test" />
	<method signature="void rotateOrigin(int,int,int)" class="Test" />
	<class name="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<method signature="void setScanNum(int)" class="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<method signature="void setIntensityArr(long[])" class="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<method signature="void setFullScanData(java.lang.String[])" class="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<method signature="long[] getIntensityArr()" class="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<method signature="int getScanNum()" class="edu.scripps.pms.census.model.ChroiTRAQLabelData" />
	<class name="graph.ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="graph.ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void _about()" class="graph.ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="graph.ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.plotml.PlotMLFrame" />
	<class name="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="int getNumSpectra()" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="edu.scripps.pms.util.spectrum.MzxmlPeakList scanNum2PeakList(java.lang.Integer,boolean)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="edu.scripps.pms.util.spectrum.MzxmlPeakList scanNum2PeakList(int,boolean)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="java.util.Iterator getSpectraWithChildren()" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="java.util.ArrayList getScanNums()" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="void &lt;init&gt;(java.lang.String,int)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="java.util.Iterator getSpectra(int)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="java.util.Iterator getSpectra()" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="java.util.Iterator getScanNums(int)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="edu.scripps.pms.util.spectrum.MzxmlPeakList readPeakList(org.jdom.Element,boolean)" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<method signature="void closeDataFile()" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<field name="BEGINSCANTAG" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<field name="ENDSCANTAG" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<field name="ENDMSRUNTAG" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<field name="MZINTENSITYDELIMITER" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
	<class name="edu.scripps.pms.mspid.MassSpecConstants" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSDIFFC12C13" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSH2O" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSH3O" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSH3ODB" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSHDB" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="log10" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="AVGISOTOPE" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSH" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSH2" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MASSDIFFN14N15" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="DBINWIDTH" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<field name="MONOISOTOPE" class="edu.scripps.pms.mspid.MassSpecConstants" />
	<class name="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void setProteins(java.util.Vector)" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="int getToPercent()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void setPercentage(float)" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="float getPercentage()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void setArc(java.awt.geom.Arc2D)" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void setToPercent(int)" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="java.awt.Color getColor()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void setColor(java.awt.Color)" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="int getFromPercent()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="java.util.Vector getProteins()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="void setFromPercent(int)" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="int getNrOfProteinsBelongingToSlice()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<method signature="java.awt.geom.Arc2D getArc()" class="edu.scripps.dtaselect.object.OPieSlice" />
	<class name="LinearRegression" />
	<method signature="void setBestShift(int)" class="LinearRegression" />
	<method signature="double getCorr()" class="LinearRegression" />
	<method signature="double getAreaRatio()" class="LinearRegression" />
	<method signature="void setCorr(double)" class="LinearRegression" />
	<method signature="double getSlope()" class="LinearRegression" />
	<method signature="void setAreaRatio(double)" class="LinearRegression" />
	<method signature="void setSlope(double)" class="LinearRegression" />
	<method signature="void setIntercept(double)" class="LinearRegression" />
	<method signature="void &lt;init&gt;(double[],double[],int,int,int)" class="LinearRegression" />
	<method signature="int getBestShift()" class="LinearRegression" />
	<method signature="double getIntercept()" class="LinearRegression" />
	<class name="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DumpUnqualifiedDTAs(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void MergeAllFrom(edu.scripps.dtaselect.logic.Protein)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void CalculateRedundancy()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="int CountProteins()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void GroupIdenticals()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.Protein$TextBlock MergeSort(edu.scripps.dtaselect.logic.Protein$TextBlock)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DisplaySortDTALists()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void SortDTALists()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void PrintDBPeptides(java.io.File,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void PrintChromaFile(java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DitchDuplicateDTAsByXCorr()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void SortByClass()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void MakeMS2Subsets(java.io.File)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void PrintCPList(edu.scripps.dtaselect.logic.IniFile)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="float ChargeAtPH(float,int,int,int,int,int,int,int)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="int DTACount()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="float PercentNegative(float,float)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DitchDuplicateDTAsByTIC()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String GetLocusTabbed()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="float PercentPositive(float,float)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void RemoveSubsets()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.DTAFile FindDTA(java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.Protein FindProtein(java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void FindDTAPositions(java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="boolean HasAtLeastOneUnique()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.Protein CreateMegaProtein()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void LookUpLoci(edu.scripps.dtaselect.logic.ParamsFile,edu.scripps.dtaselect.logic.IniFile)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DTASetDecoy()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="int SpectrumCount()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="int Similarity(edu.scripps.dtaselect.logic.Protein)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void GroupIdenticalsOld()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void MakeSQTSubsets(java.io.File)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void CalculateRedundancyForList()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="float RoundTo(float,int)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void AccumulateDTAsFrom(edu.scripps.dtaselect.logic.Protein)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="double GetRawProbs()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="boolean PrintTest()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.Protein$TextBlock Merge(edu.scripps.dtaselect.logic.Protein$TextBlock,edu.scripps.dtaselect.logic.Protein$TextBlock)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void CalculateMWAndpI(java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String PrintLinksForPeptide(java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void UngroupIdenticals()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.Protein$TextBlock Split(edu.scripps.dtaselect.logic.Protein$TextBlock)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String ReportPeptideList()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void SetTo(java.util.StringTokenizer)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="int ModCount()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void CalculateCoverageForList(boolean)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String Version()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.CoverageZone GenerateZones()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void PrintXML(edu.scripps.dtaselect.logic.SelectCriteria,java.lang.String,edu.scripps.dtaselect.logic.ParamsFile,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void PrintDatabase(edu.scripps.dtaselect.logic.SelectCriteria,edu.scripps.dtaselect.logic.ParamsFile,java.lang.String)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="edu.scripps.dtaselect.logic.Protein Clone()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String GetLLine()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String LongestFileName()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="void DitchProteinsWithoutSufficientDTAs(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="int ReportMaxRedundancy()" class="edu.scripps.dtaselect.logic.Protein" />
	<method signature="java.lang.String LongestName()" class="edu.scripps.dtaselect.logic.Protein" />
	<class name="edu.scripps.dtaselect.logic.Point" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.Point" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.Point" />
	<class name="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<method signature="void setChangeEditable(boolean)" class="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<method signature="void &lt;init&gt;(java.lang.String[],boolean)" class="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<method signature="boolean isCellEditable(int,int)" class="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<method signature="void clear()" class="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<method signature="void addNewRow(java.util.Vector)" class="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<method signature="boolean isPeptideTable()" class="edu.scripps.dtaselect.gui.utilities.TableModel" />
	<class name="edu.scripps.pms.census.Census" />
	<method signature="void &lt;init&gt;(org.apache.commons.cli.CommandLine)" class="edu.scripps.pms.census.Census" />
	<method signature="void printHelp()" class="edu.scripps.pms.census.Census" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.Census" />
	<method signature="void init(org.apache.commons.cli.CommandLine)" class="edu.scripps.pms.census.Census" />
	<class name="edu.scripps.pms.census.IrisPanel" />
	<method signature="void setHt(java.util.Hashtable)" class="edu.scripps.pms.census.IrisPanel" />
	<method signature="java.util.Hashtable getHt()" class="edu.scripps.pms.census.IrisPanel" />
	<method signature="void &lt;init&gt;(java.util.Hashtable,edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.IrisPanel" />
	<method signature="void setPeptide(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.IrisPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.IrisPanel" />
	<method signature="edu.scripps.pms.census.model.ChroPeptide getPeptide()" class="edu.scripps.pms.census.IrisPanel" />
	<method signature="void drawPlot(java.util.Hashtable,edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.IrisPanel" />
	<class name="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.util.ArrayList getSampleExpList()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.lang.String getSampleName(java.lang.String)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="int getExpType()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setSampleExpList(java.util.ArrayList)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void addSampleObj(edu.scripps.pms.census.io.ChroXmlReader$Sample)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.util.ArrayList getSampleList()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setFileList(java.util.ArrayList)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setQuantLevel(int)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.util.ArrayList getFileList()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.util.Hashtable getSampleObjList()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setSampleObjList(java.util.Hashtable)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void &lt;init&gt;(java.io.File)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="boolean isLabeled()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="int getQuantLevel()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setLabeled(boolean)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.util.ArrayList getMrmCrvProteinList()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.lang.String getSampleName(int)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.util.ArrayList getProteinList()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setExpType(int)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="java.lang.String getFileName(int)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="edu.scripps.pms.census.io.ChroXmlReader$Sample getSampleObj(java.lang.String)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="void setSampleList(java.util.ArrayList)" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<method signature="boolean isDataDependent()" class="edu.scripps.pms.census.io.ChroXmlReader" />
	<class name="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void showCompareDiaglog()" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void showDirectoryChooser()" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="java.lang.String showOpenFileDialog(java.lang.String)" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void runProgram()" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void setInputError(boolean)" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void parseAndSaveXMLForConfiguration()" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<method signature="void openFile()" class="edu.scripps.dtaselect.logic.gui.LMainProgram" />
	<class name="edu.scripps.dtaselect.logic.gui.LOptionsPanel" />
	<method signature="void parseInput()" class="edu.scripps.dtaselect.logic.gui.LOptionsPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LOptionsPanel" />
	<class name="graph.ptolemy.plot.compat.PxgraphParser" />
	<method signature="int parsePxgraphargs(java.lang.String,java.net.URL)" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<method signature="void read(java.io.InputStream)" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Plot)" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<method signature="int parseArgs(java.lang.String[])" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<method signature="int parseArgs(java.lang.String[],java.net.URL)" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<field name="_currentdataset" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<field name="_plot" class="graph.ptolemy.plot.compat.PxgraphParser" />
	<class name="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="double getAvgMass()" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="void &lt;init&gt;(int[],boolean)" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="void setEnrichment(double)" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="double[] getMasslist()" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="double getEndMass()" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="double getStartMass()" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="double getEachAbund(int,int)" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="double[] getHighMassList()" class="edu.scripps.pms.census.util.IsotopeDist" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.util.IsotopeDist" />
	<class name="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="int _parseArgs(java.lang.String[])" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Plot,java.lang.String[])" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="java.lang.String _usage()" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void _about()" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void main(java.lang.String[])" class="ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="ptolemy.plot.compat.PxgraphApplication" />
	<class name="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="int[] getKeys()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="void close()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="int getStartScanNum()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="edu.scripps.pms.util.io.MzxmlSpectrumReader getMzreader()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="void &lt;init&gt;(java.io.File,java.lang.String)" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="gnu.trove.TIntDoubleHashMap getPrecursorMap()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="void setMzreader(edu.scripps.pms.util.io.MzxmlSpectrumReader)" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="int getLastScanNum()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="java.io.RandomAccessFile getFile()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="gnu.trove.TIntLongHashMap getMsIndex()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<method signature="void createMzXMLScans()" class="edu.scripps.pms.census.hash.IndexedFile" />
	<class name="edu.scripps.pms.util.io.FileUtil" />
	<method signature="void copy(java.lang.String,java.lang.String,boolean)" class="edu.scripps.pms.util.io.FileUtil" />
	<method signature="void copy(java.io.File,java.io.File,boolean)" class="edu.scripps.pms.util.io.FileUtil" />
	<class name="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void BubbleSort(java.lang.String[])" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="edu.scripps.dtaselect.object.DTASelectResultSampleProteins getResultProteins()" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void setWorkingDirectory(java.lang.String)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void showWarning(java.lang.String)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="java.io.File getWorkingDirectory()" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void startWorkFlow()" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void usage()" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="java.util.Vector parseProteinAndPeptideInformation(java.lang.String)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void setResultProteins(edu.scripps.dtaselect.object.DTASelectResultSampleProteins)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void writeOutput(java.lang.String,int)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="int countNrOfSequencesOfDatabase()" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void writeOutputWithoutNewLine(java.lang.String,int)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<method signature="void showError(java.lang.String)" class="edu.scripps.dtaselect.logic.DTASelect" />
	<field name="WARNING_OUTPUT" class="edu.scripps.dtaselect.logic.DTASelect" />
	<field name="CORRECT_OUTPUT" class="edu.scripps.dtaselect.logic.DTASelect" />
	<field name="ERROR_OUTPUT" class="edu.scripps.dtaselect.logic.DTASelect" />
	<field name="isGUIUsed" class="edu.scripps.dtaselect.logic.DTASelect" />
	<class name="edu.scripps.dtaselect.object.OColorLegend$ColorScheme" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OColorLegend)" class="edu.scripps.dtaselect.object.OColorLegend$ColorScheme" />
	<field name="rangeShading" class="edu.scripps.dtaselect.object.OColorLegend$ColorScheme" />
	<field name="grayShading" class="edu.scripps.dtaselect.object.OColorLegend$ColorScheme" />
	<field name="gradientShading" class="edu.scripps.dtaselect.object.OColorLegend$ColorScheme" />
	<class name="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="javax.swing.JRadioButton getRbDefineDeltaMassWithRespectToMonoisotopicAverageMass()" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="javax.swing.JRadioButton getRbDefineDeltaCNWithRespectToTheSecondBestPeptide()" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="javax.swing.JRadioButton getRbDefineDeltaCNWithRespectToTheNextBestDifferentPeptide()" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="javax.swing.JRadioButton getRbDefineDeltaMassWithRespectToNearestIsotope()" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.OptionsPanel" />
	<class name="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.lang.Integer getMs2Index(java.lang.String,int,double,double,edu.scripps.pms.census.hash.IndexedFile)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Hashtable getParentHt(java.lang.String)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Hashtable getChildHashtable(java.lang.String,java.lang.Integer)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Hashtable getMs2ms1Ht()" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="void setMsmsMap(java.util.Hashtable,java.util.Hashtable)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Hashtable getChildHashtable(java.lang.String,int)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="void &lt;init&gt;(int[][][],java.util.Vector,int)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="void setPathFileNameList(java.util.Vector)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="void setRefIndex(int)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Hashtable getFileNameHt()" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="void reinitializeMaxIndexByRet()" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="int[][][] getPathArray()" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="int getMaxScanIndex(java.lang.String)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Vector getPathFileNameList()" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="void setPathArray(int[][][])" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="java.util.Hashtable getChildHashtableByMS2(java.lang.String,java.lang.Integer)" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<method signature="int getRefIndex()" class="edu.scripps.pms.census.model.NonLabelMappingModel" />
	<class name="edu.scripps.dtaselect.object.OHeat" />
	<method signature="void setColor(java.awt.Color)" class="edu.scripps.dtaselect.object.OHeat" />
	<method signature="void setProtein(edu.scripps.dtaselect.object.OProtein)" class="edu.scripps.dtaselect.object.OHeat" />
	<method signature="edu.scripps.dtaselect.object.OProtein getProtein()" class="edu.scripps.dtaselect.object.OHeat" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OHeat" />
	<method signature="java.awt.Color getColor()" class="edu.scripps.dtaselect.object.OHeat" />
	<class name="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.String getSequencesMustContainThisPattern()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestPlus4XCorr()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setSequencesMustContainAllOfTheseCharacters(java.lang.String)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Integer getLowestChargeState()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestChargeState(java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setSequencesMustContainThisPattern(java.lang.String)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Integer getSequenceMustHaveThisManyCompleteEnds()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setSequencesMustNotContainAnyOfTheseResidues(java.lang.String)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestPlus3XCorr(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestPPMDeltaMass(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestPlus1XCorr(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setMinimumSpRanking(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestDeltaCN()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestPlus4XCorr(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setSequenceMustBeAtLeastThisLong(java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setPrecedingResidueMustBeOneOfThese(java.lang.String)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.String getPrecedingResidueMustBeOneOfThese()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getMinimumSpScore()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getMaximumSpRanking()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestPlus3XCorr()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setHighestPPMDeltaMass(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.String getSequencesMustNotContainAnyOfTheseResidues()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestProportionOfFragmentIonsObserved(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestPlus2XCorr(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestPlus1XCorr()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestPlus2XCorr()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void &lt;init&gt;(java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Integer,java.lang.Integer,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Integer getSequenceMustBeAtLeastThisLong()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getHighestPPMDeltaMass()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestProportionOfFragmentIonsObserved()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setHighestPeptideMZ(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setSequenceMustHaveThisManyCompleteEnds(java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestPeptideMZ()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestPeptideMZ(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getLowestPPMDeltaMass()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Float getHighestPeptideMZ()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setSequenceMustBeNoLongerThanThis(java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setMaximumSpRanking(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.String getCTerminalResidueMustBeOneOfThese()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Integer getHighestChargeState()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.String getSequencesMustContainAllOfTheseCharacters()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setCTerminalResidueMustBeOneOfThese(java.lang.String)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="java.lang.Integer getSequenceMustBeNoLongerThanThis()" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setLowestDeltaCN(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<method signature="void setHighestChargeState(java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpecializedFilters" />
	<class name="edu.scripps.dtaselect.logic.Spectrum" />
	<method signature="float IntensitySum()" class="edu.scripps.dtaselect.logic.Spectrum" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.Spectrum" />
	<method signature="int PeakCount()" class="edu.scripps.dtaselect.logic.Spectrum" />
	<method signature="edu.scripps.dtaselect.logic.Point Find(float)" class="edu.scripps.dtaselect.logic.Spectrum" />
	<class name="edu.scripps.dtaselect.logic.spectrum.MSFileParser" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.dtaselect.logic.spectrum.MSFileParser" />
	<method signature="java.lang.String getCurrentDir()" class="edu.scripps.dtaselect.logic.spectrum.MSFileParser" />
	<method signature="edu.scripps.dtaselect.object.OSpectrumData getSpectrumData()" class="edu.scripps.dtaselect.logic.spectrum.MSFileParser" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.logic.spectrum.MSFileParser" />
	<method signature="java.lang.String getCurrentDa()" class="edu.scripps.dtaselect.logic.spectrum.MSFileParser" />
	<class name="graph.ptolemy.gui.Query" />
	<method signature="java.awt.Dimension getMaximumSize()" class="graph.ptolemy.gui.Query" />
	<method signature="boolean booleanValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setLine(java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setBoolean(java.lang.String,boolean)" class="graph.ptolemy.gui.Query" />
	<method signature="void addFileChooser(java.lang.String,java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void removeQueryListener(graph.ptolemy.gui.QueryListener)" class="graph.ptolemy.gui.Query" />
	<method signature="void addDisplay(java.lang.String,java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setEnabled(java.lang.String,boolean)" class="graph.ptolemy.gui.Query" />
	<method signature="void addRadioButtons(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="int getTextHeight()" class="graph.ptolemy.gui.Query" />
	<method signature="void addChoice(java.lang.String,java.lang.String,java.lang.String[],java.lang.String,boolean)" class="graph.ptolemy.gui.Query" />
	<method signature="void setBackground(java.awt.Color)" class="graph.ptolemy.gui.Query" />
	<method signature="void notifyListeners()" class="graph.ptolemy.gui.Query" />
	<method signature="java.lang.String getStringValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setSlider(java.lang.String,int)" class="graph.ptolemy.gui.Query" />
	<method signature="void addLine(java.lang.String,java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void set(java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="int getTextWidth()" class="graph.ptolemy.gui.Query" />
	<method signature="boolean getBooleanValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setTextWidth(int)" class="graph.ptolemy.gui.Query" />
	<method signature="void setToolTip(java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void addChoice(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="double doubleValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void addSelectButtons(java.lang.String,java.lang.String,java.lang.String[],java.util.Set)" class="graph.ptolemy.gui.Query" />
	<method signature="void addQueryListener(graph.ptolemy.gui.QueryListener)" class="graph.ptolemy.gui.Query" />
	<method signature="int intValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setAndNotify(java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void addSlider(java.lang.String,java.lang.String,int,int,int)" class="graph.ptolemy.gui.Query" />
	<method signature="void setColumns(int)" class="graph.ptolemy.gui.Query" />
	<method signature="java.lang.String stringValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setTextHeight(int)" class="graph.ptolemy.gui.Query" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.Query" />
	<method signature="int getIntValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void addCheckBox(java.lang.String,java.lang.String,boolean)" class="graph.ptolemy.gui.Query" />
	<method signature="void _addPair(java.lang.String,javax.swing.JLabel,java.awt.Component,java.lang.Object)" class="graph.ptolemy.gui.Query" />
	<method signature="void setMessage(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void addTextArea(java.lang.String,java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="void setDisplay(java.lang.String,java.lang.String)" class="graph.ptolemy.gui.Query" />
	<method signature="double getDoubleValue(java.lang.String)" class="graph.ptolemy.gui.Query" />
	<field name="DEFAULT_ENTRY_WIDTH" class="graph.ptolemy.gui.Query" />
	<field name="_constraints" class="graph.ptolemy.gui.Query" />
	<field name="DEFAULT_ENTRY_HEIGHT" class="graph.ptolemy.gui.Query" />
	<field name="_listeners" class="graph.ptolemy.gui.Query" />
	<field name="_background" class="graph.ptolemy.gui.Query" />
	<field name="_grid" class="graph.ptolemy.gui.Query" />
	<class name="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<method signature="void showGUI()" class="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<method signature="boolean isColorChanged()" class="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<method signature="void showWarningMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<method signature="void showErrorMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<method signature="edu.scripps.dtaselect.gui.DiagramColorChooser getInstance()" class="edu.scripps.dtaselect.gui.DiagramColorChooser" />
	<class name="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<method signature="int getSeqIntPosition(int)" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<method signature="java.awt.Color getIonTypesPlotColor(int)" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<method signature="java.lang.String getIonTypeName(int)" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="a2" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="b1Minus98" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="y1Minus98" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="none" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="a1" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="y2" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="y1" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="c1" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="z2" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="y2Minus98" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="b1" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="c2" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="z1" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="precursorLoss" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="b2Minus98" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<field name="b2" class="edu.scripps.dtaselect.object.OPeak$SequenceIonType" />
	<class name="ptolemy.gui.ComponentDialog" />
	<method signature="void _handleClosing()" class="ptolemy.gui.ComponentDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.awt.Component,java.lang.String[],java.lang.String)" class="ptolemy.gui.ComponentDialog" />
	<method signature="java.lang.String buttonPressed()" class="ptolemy.gui.ComponentDialog" />
	<method signature="void setMessage(java.lang.String)" class="ptolemy.gui.ComponentDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.awt.Component,java.lang.String[])" class="ptolemy.gui.ComponentDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,java.lang.String,java.awt.Component)" class="ptolemy.gui.ComponentDialog" />
	<field name="contents" class="ptolemy.gui.ComponentDialog" />
	<field name="_buttonPressed" class="ptolemy.gui.ComponentDialog" />
	<class name="edu.scripps.dtaselect.logic.BirdsEye$ProtGrid" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.BirdsEye)" class="edu.scripps.dtaselect.logic.BirdsEye$ProtGrid" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.logic.BirdsEye$ProtGrid" />
	<class name="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtTrueProteinsHaveIDsMatchingThisString()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbNoStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbUseModelsForTrypticHalfTrypticNonTryptic()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbXCorrNotUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JComboBox getCmbPlotting()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbDeltaMassUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbUseModelsForEachChargeState()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbLogSpRankUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbUseRawPrimaryScoreValuesNoNormalization()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbDeltaCNNotUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbUseSeparateModelsForModifiedPeptides()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbLogDeltaMassUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbIonProportionUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbSpUsedForStatistics()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JCheckBox getCbHideDecoyDatabaseHits()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtDatabaseProteinDecoyLabel()" class="edu.scripps.dtaselect.gui.StatisticsPanel" />
	<class name="edu.scripps.pms.census.model.FragIonList" />
	<method signature="int getBestIndex()" class="edu.scripps.pms.census.model.FragIonList" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.FragIonList" />
	<method signature="void setBestIndex(int)" class="edu.scripps.pms.census.model.FragIonList" />
	<class name="edu.scripps.pms.util.io.SQTParser" />
	<method signature="java.util.Iterator getSQTPeptide()" class="edu.scripps.pms.util.io.SQTParser" />
	<method signature="void close()" class="edu.scripps.pms.util.io.SQTParser" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.io.SQTParser" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.io.SQTParser" />
	<class name="edu.scripps.pms.census.LabelingConfDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.LabelingConfDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.LabelingConfDialog" />
	<class name="edu.scripps.pms.census.model.SpecRange" />
	<method signature="int getMin()" class="edu.scripps.pms.census.model.SpecRange" />
	<method signature="void setMin(int)" class="edu.scripps.pms.census.model.SpecRange" />
	<method signature="void setMax(int)" class="edu.scripps.pms.census.model.SpecRange" />
	<method signature="int getMax()" class="edu.scripps.pms.census.model.SpecRange" />
	<method signature="void &lt;init&gt;(int,int)" class="edu.scripps.pms.census.model.SpecRange" />
	<class name="edu.scripps.pms.util.EnvVarsExtractor" />
	<method signature="java.util.Properties envVars()" class="edu.scripps.pms.util.EnvVarsExtractor" />
	<method signature="java.lang.String var(java.lang.String)" class="edu.scripps.pms.util.EnvVarsExtractor" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.EnvVarsExtractor" />
	<class name="edu.scripps.pms.util.FileFilterUtil" />
	<method signature="java.io.FileFilter getDirectoryFilter()" class="edu.scripps.pms.util.FileFilterUtil" />
	<method signature="java.io.FileFilter getExactFileFilter(java.lang.String)" class="edu.scripps.pms.util.FileFilterUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.FileFilterUtil" />
	<method signature="java.io.FileFilter getFileFilter()" class="edu.scripps.pms.util.FileFilterUtil" />
	<method signature="java.io.FileFilter getSQTFilter()" class="edu.scripps.pms.util.FileFilterUtil" />
	<class name="edu.scripps.pms.census.OptionsDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.OptionsDialog" />
	<method signature="int getReturnStatus()" class="edu.scripps.pms.census.OptionsDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.OptionsDialog" />
	<field name="RET_CANCEL" class="edu.scripps.pms.census.OptionsDialog" />
	<field name="RET_OK" class="edu.scripps.pms.census.OptionsDialog" />
	<class name="edu.scripps.pms.census.util.SimpleFileNameFilter" />
	<method signature="java.lang.String getDescription()" class="edu.scripps.pms.census.util.SimpleFileNameFilter" />
	<method signature="void &lt;init&gt;(java.lang.String[],java.lang.String)" class="edu.scripps.pms.census.util.SimpleFileNameFilter" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="edu.scripps.pms.census.util.SimpleFileNameFilter" />
	<method signature="boolean accept(java.io.File)" class="edu.scripps.pms.census.util.SimpleFileNameFilter" />
	<class name="graph.ptolemy.plot.Plot$DragListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Plot)" class="graph.ptolemy.plot.Plot$DragListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$DragListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$DragListener" />
	<class name="edu.scripps.pms.census.plot.AlignHeatmap" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.plot.AlignHeatmap" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.plot.AlignHeatmap" />
	<class name="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void setMFrame(javax.swing.JFrame)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="edu.scripps.pms.census.model.ChroProtein getChroProtein()" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void setCurrentDirectory(java.lang.String)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="javax.swing.JFrame getMFrame()" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void &lt;init&gt;(javax.swing.JFrame,java.lang.String,java.util.Hashtable)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void setCurrentProtein(edu.scripps.pms.census.model.ChroProtein)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void setHt(java.util.Hashtable)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="java.util.Hashtable getHt()" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void setCurrentPeptide(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="void setChroProtein(edu.scripps.pms.census.model.ChroProtein)" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="java.lang.String getCurrentDirectory()" class="edu.scripps.pms.census.QualificationPanel" />
	<method signature="edu.scripps.pms.census.model.ChroPeptide getCurrentPeptide()" class="edu.scripps.pms.census.QualificationPanel" />
	<class name="edu.scripps.pms.census.plot.SimplePlot" />
	<method signature="void Go(java.lang.String)" class="edu.scripps.pms.census.plot.SimplePlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.SimplePlot" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.plot.SimplePlot" />
	<class name="edu.scripps.dtaselect.gui.ComparedResultsTab" />
	<method signature="void &lt;init&gt;(com.sun.org.apache.xalan.internal.xsltc.compiler.util.MultiHashtable,edu.scripps.dtaselect.object.DTASelectResultSampleProteins,java.awt.Rectangle)" class="edu.scripps.dtaselect.gui.ComparedResultsTab" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.ComparedResultsTab" />
	<class name="graph.ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Plot)" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void endElement(java.lang.String)" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void _addPoint(boolean,java.lang.String)" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void startElement(java.lang.String)" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<method signature="void startDocument()" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<field name="_currentPointCount" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<field name="_currentDataset" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<field name="_currentSeqInterpretation" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<field name="_connected" class="graph.ptolemy.plot.plotml.PlotMLParser" />
	<class name="edu.scripps.pms.census.junit.ChroXmlValidate" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.junit.ChroXmlValidate" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.junit.ChroXmlValidate" />
	<class name="edu.scripps.pms.census.util.RelExFileFilter" />
	<method signature="boolean accept(java.io.File,java.lang.String)" class="edu.scripps.pms.census.util.RelExFileFilter" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.util.RelExFileFilter" />
	<class name="XMLRead" />
	<method signature="void &lt;init&gt;()" class="XMLRead" />
	<method signature="byte[] floatTobyte(float)" class="XMLRead" />
	<method signature="void main(java.lang.String[])" class="XMLRead" />
	<class name="edu.scripps.pms.util.stats.TTest" />
	<method signature="double T_p(double,double)" class="edu.scripps.pms.util.stats.TTest" />
	<method signature="double T_z(double,double)" class="edu.scripps.pms.util.stats.TTest" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.stats.TTest" />
	<method signature="double Norm_p(double)" class="edu.scripps.pms.util.stats.TTest" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.stats.TTest" />
	<class name="edu.scripps.pms.census.Test" />
	<method signature="void setLastName(java.lang.String)" class="edu.scripps.pms.census.Test" />
	<method signature="java.lang.String getOrganization()" class="edu.scripps.pms.census.Test" />
	<method signature="java.lang.String getMiddleName()" class="edu.scripps.pms.census.Test" />
	<method signature="java.lang.String getEmail()" class="edu.scripps.pms.census.Test" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.Test" />
	<method signature="java.lang.String getFirstName()" class="edu.scripps.pms.census.Test" />
	<method signature="void setOrganization(java.lang.String)" class="edu.scripps.pms.census.Test" />
	<method signature="void setMiddleName(java.lang.String)" class="edu.scripps.pms.census.Test" />
	<method signature="void setEmail(java.lang.String)" class="edu.scripps.pms.census.Test" />
	<method signature="java.lang.String getLastName()" class="edu.scripps.pms.census.Test" />
	<method signature="void setFirstName(java.lang.String)" class="edu.scripps.pms.census.Test" />
	<class name="edu.scripps.dtaselect.object.OClass" />
	<method signature="java.lang.String toString()" class="edu.scripps.dtaselect.object.OClass" />
	<method signature="void setName(java.lang.String)" class="edu.scripps.dtaselect.object.OClass" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OClass" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.object.OClass" />
	<method signature="java.lang.String getName()" class="edu.scripps.dtaselect.object.OClass" />
	<class name="edu.scripps.pms.census.ElementComposition" />
	<method signature="void &lt;init&gt;(java.lang.String,edu.scripps.pms.census.model.IsotopeTable)" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="int[] getElementRefArr()" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="void calculateBion()" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="void &lt;init&gt;(char[],int,int,edu.scripps.pms.census.model.IsotopeTable)" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="void calculate()" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="void printComposition()" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="void lightCalculate()" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="boolean isQuantifiable()" class="edu.scripps.pms.census.ElementComposition" />
	<method signature="int[] getElementSampleArr()" class="edu.scripps.pms.census.ElementComposition" />
	<field name="AMINO_ACIDS" class="edu.scripps.pms.census.ElementComposition" />
	<class name="graph.ptolemy.gui.CloseListener" />
	<method signature="void windowClosed(java.awt.Window,java.lang.String)" class="graph.ptolemy.gui.CloseListener" />
	<class name="edu.scripps.pms.util.io.PepXmlReader" />
	<method signature="edu.scripps.pms.util.dtaselect.Peptide buildPeptide(java.lang.String,org.jdom.Element,org.jdom.Element)" class="edu.scripps.pms.util.io.PepXmlReader" />
	<method signature="java.util.Iterator getProteins()" class="edu.scripps.pms.util.io.PepXmlReader" />
	<method signature="void setFileName(java.lang.String)" class="edu.scripps.pms.util.io.PepXmlReader" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.pms.util.io.PepXmlReader" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.io.PepXmlReader" />
	<method signature="int getTotalPeptideNumber()" class="edu.scripps.pms.util.io.PepXmlReader" />
	<class name="edu.scripps.dtaselect.logic.DTASelectGUI" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.DataSet)" class="edu.scripps.dtaselect.logic.DTASelectGUI" />
	<method signature="void itemStateChanged(java.awt.event.ItemEvent)" class="edu.scripps.dtaselect.logic.DTASelectGUI" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.logic.DTASelectGUI" />
	<class name="graph.ptolemy.gui.Top" />
	<method signature="void _read(java.net.URL)" class="graph.ptolemy.gui.Top" />
	<method signature="void _about()" class="graph.ptolemy.gui.Top" />
	<method signature="java.lang.String getLastOverallURL()" class="graph.ptolemy.gui.Top" />
	<method signature="boolean _save()" class="graph.ptolemy.gui.Top" />
	<method signature="void _print()" class="graph.ptolemy.gui.Top" />
	<method signature="java.lang.String _getName()" class="graph.ptolemy.gui.Top" />
	<method signature="void centerOnScreen()" class="graph.ptolemy.gui.Top" />
	<method signature="boolean isModified()" class="graph.ptolemy.gui.Top" />
	<method signature="void report(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.Top" />
	<method signature="void _help()" class="graph.ptolemy.gui.Top" />
	<method signature="void setBackground(java.awt.Color)" class="graph.ptolemy.gui.Top" />
	<method signature="boolean _saveAs()" class="graph.ptolemy.gui.Top" />
	<method signature="void _addMenus()" class="graph.ptolemy.gui.Top" />
	<method signature="boolean _clear()" class="graph.ptolemy.gui.Top" />
	<method signature="void setModified(boolean)" class="graph.ptolemy.gui.Top" />
	<method signature="void report(java.lang.Exception)" class="graph.ptolemy.gui.Top" />
	<method signature="void setLastOverallURL(java.lang.String)" class="graph.ptolemy.gui.Top" />
	<method signature="void report(java.lang.String)" class="graph.ptolemy.gui.Top" />
	<method signature="void _exit()" class="graph.ptolemy.gui.Top" />
	<method signature="void _open()" class="graph.ptolemy.gui.Top" />
	<method signature="void _openURL()" class="graph.ptolemy.gui.Top" />
	<method signature="void pack()" class="graph.ptolemy.gui.Top" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.Top" />
	<method signature="void _writeFile(java.io.File)" class="graph.ptolemy.gui.Top" />
	<method signature="boolean _close()" class="graph.ptolemy.gui.Top" />
	<field name="_fileMenu" class="graph.ptolemy.gui.Top" />
	<field name="_fileFilter" class="graph.ptolemy.gui.Top" />
	<field name="_statusBar" class="graph.ptolemy.gui.Top" />
	<field name="_helpMenuItems" class="graph.ptolemy.gui.Top" />
	<field name="_helpMenu" class="graph.ptolemy.gui.Top" />
	<field name="_directory" class="graph.ptolemy.gui.Top" />
	<field name="_fileMenuItems" class="graph.ptolemy.gui.Top" />
	<field name="_menubar" class="graph.ptolemy.gui.Top" />
	<class name="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getObsMH()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Integer getSpecCount()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setValidationStatus(int)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setSpRank(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setFileName(java.lang.String)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setPepConf(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setUnique(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getTotalIntensity()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setTotalIntensity(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getDeltCN()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setObsMH(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getPepFP()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Double getZScore()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setCalcMH(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setPepFP(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setDeltCN(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Integer getSpRank()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setZScore(java.lang.Double)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setSpecCount(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void &lt;init&gt;(int,java.lang.String,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Float,java.lang.Double,java.lang.Float,java.lang.Integer,java.lang.Float,java.lang.Integer,java.lang.String,java.lang.Boolean)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setSequence(java.lang.String)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getPepConf()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Boolean getUnique()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getXCorr()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getCalcMH()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setXCorr(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="int getValidationStatus()" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="void setFragmentIonPercentage(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptide" />
	<method signature="java.lang.Float getFragmentIonPercentage()" class="edu.scripps.dtaselect.object.OPeptide" />
	<class name="scripts.emily.transmembrane.FindTransMembraneProteins" />
	<method signature="void &lt;init&gt;()" class="scripts.emily.transmembrane.FindTransMembraneProteins" />
	<method signature="void main(java.lang.String[])" class="scripts.emily.transmembrane.FindTransMembraneProteins" />
	<class name="graph.ptolemy.gui.MessageHandler" />
	<method signature="void _error(java.lang.String)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void warning(java.lang.String)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void _warning(java.lang.String)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void _message(java.lang.String)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void _warning(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void setMessageHandler(graph.ptolemy.gui.MessageHandler)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void _error(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="graph.ptolemy.gui.MessageHandler getMessageHandler()" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void warning(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void message(java.lang.String)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void error(java.lang.String)" class="graph.ptolemy.gui.MessageHandler" />
	<method signature="void error(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.MessageHandler" />
	<class name="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void setModificationLegend(java.util.Vector)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void addStaticMod(char,float)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void ApplyStaticMods()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void addDiffMod(float,char,java.lang.String)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="edu.scripps.dtaselect.logic.ParamsFile ReadFile(java.io.File)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void addDiffMod(float,char,java.lang.String,float,float)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="java.lang.String CGIString()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="java.lang.String GetHTMLMods()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void &lt;init&gt;(java.util.StringTokenizer,java.lang.String)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="java.lang.String getDTASelectTxtString()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="void DebugAcids()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="java.util.Vector getModificationLegend()" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<method signature="edu.scripps.dtaselect.logic.ParamsFile ReadMascotConfig(java.lang.String,edu.scripps.dtaselect.logic.IniFile)" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<field name="DBName" class="edu.scripps.dtaselect.logic.ParamsFile" />
	<class name="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="void setIonTypeForPeak(float,int,java.lang.String,boolean)" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="float getHighestMZ()" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="float getLowestMZ()" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="int getHighestIntensity()" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="void setPeaks(java.util.Vector)" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="java.util.Vector getPeaks()" class="edu.scripps.dtaselect.object.OPeaks" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OPeaks)" class="edu.scripps.dtaselect.object.OPeaks" />
	<class name="edu.scripps.dtaselect.logic.spectrum.SQTFileParser" />
	<method signature="void parseSQTFile(edu.scripps.dtaselect.object.OSpectrumData,java.lang.String)" class="edu.scripps.dtaselect.logic.spectrum.SQTFileParser" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.spectrum.SQTFileParser" />
	<class name="scripts.DTASelectPepXMLConvert" />
	<method signature="void &lt;init&gt;()" class="scripts.DTASelectPepXMLConvert" />
	<method signature="void main(java.lang.String[])" class="scripts.DTASelectPepXMLConvert" />
	<class name="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<method signature="javax.swing.JComponent getChoice()" class="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<method signature="void &lt;init&gt;(javax.swing.JComponent,javax.swing.JLabel,java.lang.Boolean)" class="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<method signature="void setChoice(javax.swing.JComponent)" class="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<method signature="void setDescription(javax.swing.JLabel)" class="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<method signature="javax.swing.JLabel getDescription()" class="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.utilities.ChoiceDescriptionField" />
	<class name="edu.scripps.pms.census.junit.ParamTestCase" />
	<method signature="void setUp()" class="edu.scripps.pms.census.junit.ParamTestCase" />
	<method signature="void tearDown()" class="edu.scripps.pms.census.junit.ParamTestCase" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.junit.ParamTestCase" />
	<method signature="void paramTest()" class="edu.scripps.pms.census.junit.ParamTestCase" />
	<class name="edu.scripps.dtaselect.logic.gui.LUtilitiesPanel" />
	<method signature="void parseInput()" class="edu.scripps.dtaselect.logic.gui.LUtilitiesPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LUtilitiesPanel" />
	<class name="SplitMzXML" />
	<method signature="void &lt;init&gt;()" class="SplitMzXML" />
	<method signature="void main(java.lang.String[])" class="SplitMzXML" />
	<class name="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="edu.scripps.dtaselect.logic.Protein CollateByLocus(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="void SortListByLocus()" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="void GetVersion(java.io.File,java.lang.String,edu.scripps.dtaselect.logic.DataSet)" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="edu.scripps.dtaselect.logic.OUTFile ReadOUT(java.io.File,java.lang.String,boolean,edu.scripps.dtaselect.logic.IniFile,edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="int ReadMascotDAT(java.lang.String,edu.scripps.dtaselect.logic.OUTFile,edu.scripps.dtaselect.logic.IniFile)" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="edu.scripps.dtaselect.logic.OUTFile Clone()" class="edu.scripps.dtaselect.logic.OUTFile" />
	<method signature="int ReadSQT(java.io.File,java.lang.String,edu.scripps.dtaselect.logic.OUTFile,edu.scripps.dtaselect.logic.IniFile,edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.OUTFile" />
	<class name="edu.scripps.dtaselect.logic.AuxInfo" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.AuxInfo" />
	<class name="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Integer getMinimumNumberOfMissedTrypticSites()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Boolean getIsPeptidesWithAmbiguousIDsAllowed()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setKeepPeptides(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Float getLowestPeptideProbability()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setMaximumNumberOfMissedTrypticSites(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setMinimumNumberOfMissedTrypticSites(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Integer getPeptidesModification()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Integer getTrypticPeptides()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Integer getMaximumNumberOfMissedTrypticSites()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setPeptidesModification(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setPeptideFPRate(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setTrypticPeptides(java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setLowestPeptideProbability(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void setIsPeptidesWithAmbiguousIDsAllowed(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="void &lt;init&gt;(java.lang.Float,java.lang.Float,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Boolean,java.lang.Integer)" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Integer getKeepPeptides()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<method signature="java.lang.Float getPeptideFPRate()" class="edu.scripps.dtaselect.object.OPeptideFilters" />
	<class name="edu.scripps.dtaselect.object.OSequenceInterpretations" />
	<method signature="float findLettersMZ(int,char,java.lang.String)" class="edu.scripps.dtaselect.object.OSequenceInterpretations" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OSequenceInterpretations" />
	<method signature="java.util.Vector getSequenceInterpretation()" class="edu.scripps.dtaselect.object.OSequenceInterpretations" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OSequenceInterpretations)" class="edu.scripps.dtaselect.object.OSequenceInterpretations" />
	<method signature="void setSequenceInterpretation(java.util.Vector)" class="edu.scripps.dtaselect.object.OSequenceInterpretations" />
	<class name="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getNumSeq()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setHiScan(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getHiScan()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="edu.scripps.pms.util.sqt.MLine getTopHit()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setCalMZ(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="edu.scripps.pms.util.sqt.MLine getMLineStartsWith(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getServerName()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setNumSeq(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setTimeToProcess(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="double getDeltaMass(edu.scripps.pms.util.sqt.MLine)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="boolean contains(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setLoScan(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setSLine(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="double getDeltaCn()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.util.Iterator getMLine()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setServerName(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getTimeToProcess()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="boolean addMLine(edu.scripps.pms.util.sqt.MLine)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="int getNumMlines()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getLowestSp()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="double getTScore()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getChargeState()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setTotalIntensity(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="int getChargeStateInt()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="double getDeltaMass()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setLowestSp(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="edu.scripps.pms.util.sqt.MLine getSpRankOneHit()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="void setChargeState(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getSLine()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getCalMZ()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getTotalIntensity()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="java.lang.String getLoScan()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="boolean topHitStartsWith(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<method signature="boolean isReverseHit()" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<field name="MASSDIFFC12C13" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<field name="HALFMASSDIFFC12C13" class="edu.scripps.pms.util.sqt.SQTPeptide" />
	<class name="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="edu.scripps.dtaselect.object.OSequenceInterpretations getSequenceInterpretations()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getReference()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="boolean isDisplayB()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setIons(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setPreZ(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setAvgForFrag(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setNPepMod(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getMatchSeq()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setSequenceInterpretations(edu.scripps.dtaselect.object.OSequenceInterpretations)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getMplusHplus()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="edu.scripps.dtaselect.object.OPeak findIon(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setQueryString(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDms(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setNProtMod(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setMass(java.lang.Float)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDatfile(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="edu.scripps.dtaselect.object.OPeaks getPeaks()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getXCorr()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="boolean findLabelInNotShownIons(int,java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setCProtMod(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDatabase(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getCProtMod()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getDatabase()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getNotShownIonList()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setOldSequenceInterpretations(edu.scripps.dtaselect.object.OSequenceInterpretations)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getIons()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getDeltCn()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getSmr()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.Integer getCharge()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getCPepMod()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setShowSeqInterpretation(boolean)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.Float getMass()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setPreMPlusH(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setScanNumber(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setPeptide(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getScanNumber()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getRank_Sp()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setNotShownIonList(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setPeaks(edu.scripps.dtaselect.object.OPeaks)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getIntList()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getPreZ()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getNProtMod()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setMasslist(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="edu.scripps.dtaselect.object.OTupleTableDatas getTupleTableData()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setManual(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setMatchSeq(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setReference(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getDmm()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getAvgForFrag()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void shiftIons(int,float,float)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDeltCn(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="boolean isShowSeqInterpretation()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDmm(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getDms()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setCPepMod(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getSp()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setSmm(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDisplayY(boolean)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setMplusHplus(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getPeptide()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setSmr(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getSmm()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="boolean isDisplayA()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="edu.scripps.dtaselect.object.OSequenceInterpretations getOldSequenceInterpretations()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setTupleTableData(edu.scripps.dtaselect.object.OTupleTableDatas)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void applyModificationShiftOperation()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getPreMPlusH()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDisplayA(boolean)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getAvgForParent()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setCharge(java.lang.Integer)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setRank_Sp(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void &lt;init&gt;(java.lang.Float,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,boolean,boolean,boolean,edu.scripps.dtaselect.object.OPeaks,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.util.Vector,java.lang.String,edu.scripps.dtaselect.object.OSequenceInterpretations,edu.scripps.dtaselect.object.OSequenceInterpretations,boolean,java.util.Vector,edu.scripps.dtaselect.object.OTupleTableDatas)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setIntList(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setSp(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getQueryString()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getDatfile()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getMasslist()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="boolean isDisplayY()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setAvgForParent(java.lang.String)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setXCorr(java.util.Vector)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.util.Vector getManual()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="java.lang.String getNPepMod()" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<method signature="void setDisplayB(boolean)" class="edu.scripps.dtaselect.object.OSpectrumData" />
	<class name="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String calculateNonlabelMS(int,java.lang.String,java.util.Hashtable,int[][][],double[],edu.scripps.pms.census.model.SpecRange,java.lang.String)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="void getSpectrumArr(int[],int,gnu.trove.TIntLongHashMap,java.lang.Object)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String peakFindingMSMS(edu.scripps.pms.census.util.CalcUtil$SpectrumModel,edu.scripps.pms.census.model.SpecRange,edu.scripps.pms.census.conf.Configuration,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readFullSpectrum(int[],int,gnu.trove.TIntLongHashMap,java.lang.Object,double[],double[])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="int findMRMNextKey(int[],int,int,edu.scripps.pms.census.hash.IndexedFile,edu.scripps.pms.census.conf.Configuration)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="void getPeaks(edu.scripps.pms.census.model.ChroPeptide,int,int,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double intensitySum(double[],double[],double,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="int findHeavyKey(int[],int,edu.scripps.pms.census.hash.IndexedFile,edu.scripps.pms.census.conf.Configuration,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double getWeightedStdev(double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readSpectrumSpecificPeaks(int,edu.scripps.pms.census.hash.IndexedFile,java.util.List,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="edu.scripps.pms.census.model.IrisDataModel readSpectrumPeaks(edu.scripps.pms.census.hash.IndexedFile,int,int[])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="int findNextKeyIndex(int[],int,int,edu.scripps.pms.census.hash.IndexedFile,edu.scripps.pms.census.conf.Configuration,double,boolean)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readSpectrum(int[],int,gnu.trove.TIntLongHashMap,int,java.lang.Object,double[][],double[][],double[][],double[][])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readFullSpectrumMzXml(int[],int,edu.scripps.pms.util.io.MzxmlSpectrumReader,double,double,double,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String peakFinding(edu.scripps.pms.census.util.CalcUtil$SpectrumModel,edu.scripps.pms.census.model.SpecRange,edu.scripps.pms.census.conf.Configuration,int,double[])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readSpectrum(edu.scripps.pms.census.util.CalcUtil$SpectrumModel,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double intensitySum(double[],double[],double[])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String calculateMS2Mass(edu.scripps.pms.census.hash.IndexedFile,edu.scripps.pms.census.model.SpecRange,int,double[][],double[][],double[][],double[][],edu.scripps.pms.census.conf.Configuration,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="void oldPeakFinding(edu.scripps.pms.census.util.CalcUtil$SpectrumModel,edu.scripps.pms.census.model.SpecRange,edu.scripps.pms.census.conf.Configuration,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="edu.scripps.pms.census.model.FragIonList getBestFragIons(long[][],long[][],long[][],long[][],int,int,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String peakFinding(edu.scripps.pms.census.util.CalcUtil$SpectrumModel,edu.scripps.pms.census.model.SpecRange,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readFullSpectrum(int[],int,gnu.trove.TIntLongHashMap,java.io.RandomAccessFile,double[],edu.scripps.pms.census.model.NonLabelMappingModel)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String calculateFullMS(int,edu.scripps.pms.census.hash.IndexedFile,double[],double[],edu.scripps.pms.census.model.SpecRange)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="int findMRMNextKeyIndex(int[],int,int,edu.scripps.pms.census.hash.IndexedFile,edu.scripps.pms.census.conf.Configuration)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String peakFindingMSMSMultipleSpecific(edu.scripps.pms.census.util.CalcUtil$SpectrumModel,edu.scripps.pms.census.model.SpecRange,edu.scripps.pms.census.conf.Configuration,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readSpectrum(int[],int,edu.scripps.pms.census.hash.IndexedFile,double[][],double[][])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String calculateNonlabelMS(int,java.lang.String,java.util.Hashtable,int[][][],double[],edu.scripps.pms.census.model.SpecRange,java.lang.String,double[][],double[][],edu.scripps.pms.census.hash.IndexedFile)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readFullSpectrumMS(int[],int,gnu.trove.TIntLongHashMap,java.io.RandomAccessFile,double,double,double,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double intensitySumForSinglePeak(double[],double[],double,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String calculateFullMS(int,edu.scripps.pms.census.hash.IndexedFile,double,double,double,double,edu.scripps.pms.census.model.SpecRange)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="java.lang.String calculateFullMS(int,double,double,double,double,edu.scripps.pms.census.conf.Configuration,edu.scripps.pms.census.model.SpecRange)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="int findLightKey(int[],int,int,edu.scripps.pms.census.hash.IndexedFile,edu.scripps.pms.census.conf.Configuration)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double calculateSNRatio(long[],long[],int,int)" class="edu.scripps.pms.census.util.CalcUtil" />
	<method signature="double[] readFullSpectrum(int[],int,gnu.trove.TIntLongHashMap,java.lang.Object,double,double,double,double)" class="edu.scripps.pms.census.util.CalcUtil" />
	<class name="edu.scripps.pms.census.plot.PeptideDistPlot$Data" />
	<method signature="void setY(double)" class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" />
	<method signature="double getY()" class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" />
	<method signature="void setX(double)" class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.plot.PeptideDistPlot,double,double)" class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" />
	<method signature="double getX()" class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" />
	<class name="ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.EditablePlot)" class="ptolemy.plot.EditablePlot$EditMouseListener" />
	<class name="ptolemy.plot.PlotFormatter" />
	<method signature="void restore()" class="ptolemy.plot.PlotFormatter" />
	<method signature="void openModal()" class="ptolemy.plot.PlotFormatter" />
	<method signature="void apply()" class="ptolemy.plot.PlotFormatter" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox)" class="ptolemy.plot.PlotFormatter" />
	<field name="_plot" class="ptolemy.plot.PlotFormatter" />
	<class name="edu.scripps.dtaselect.object.DTASelectResultSampleProteins" />
	<method signature="java.util.Vector getSamples()" class="edu.scripps.dtaselect.object.DTASelectResultSampleProteins" />
	<method signature="void setSamples(java.util.Vector)" class="edu.scripps.dtaselect.object.DTASelectResultSampleProteins" />
	<method signature="void add(edu.scripps.dtaselect.object.OSample)" class="edu.scripps.dtaselect.object.DTASelectResultSampleProteins" />
	<method signature="edu.scripps.dtaselect.object.DTASelectResultSampleProteins getInstance()" class="edu.scripps.dtaselect.object.DTASelectResultSampleProteins" />
	<class name="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="int _parseArgs(java.lang.String[])" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Plot,java.lang.String[])" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="java.lang.String _usage()" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void _about()" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void main(java.lang.String[])" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="graph.ptolemy.plot.compat.PxgraphApplication" />
	<class name="edu.scripps.pms.census.plot.CorrelationPlot" />
	<method signature="void addMouseListener(java.awt.event.MouseListener)" class="edu.scripps.pms.census.plot.CorrelationPlot" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="edu.scripps.pms.census.plot.CorrelationPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.CorrelationPlot" />
	<method signature="void setData(long[],long[],int,int,double,double,int)" class="edu.scripps.pms.census.plot.CorrelationPlot" />
	<class name="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setFileName(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setTotalIntArr(long[])" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setCalcMHplus(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setDtaStartRange(int)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setSamIntensity(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getSlope()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void addData(edu.scripps.pms.census.model.ChroData)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getEndRange()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setSnRatio(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setMassMonitorArr(java.lang.String[])" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getIonProportion()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getProbability()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double[][] getYionSample()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="int getChargeState()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setMhPlus(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setRedundancy(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setFilterOut(boolean)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setRefIntensity(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="boolean isUnique()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String[] getLabelFreePeptideData()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getStartRange()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setDtaEndRange(int)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setXCorr(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="edu.scripps.pms.census.model.ChroData getData(int)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="int getChroCenter()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setRatio(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setIonProportion(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double[][] getBionRef()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="int getDtaEndRange()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setDeltCN(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getRatio()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getSpScore()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double[][] getBionSample()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getPeptideLine()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setUnique(boolean)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setMassMonitorArr(double[])" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getCorr()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setBionSample(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getSamIntensity()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double[][] getYionRef()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="int getScanNum()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setCorr(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String[] getPeptideData()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setChargeState(int)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getRefIntensity()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getXCorr()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setEndRange(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="int getDtaStartRange()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getMhPlus()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="int getDataSize()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getDeltCN()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setSpScore(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setTotalIntensity(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setScanNum(int)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getSpRank()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setPeptideLine(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getRedundancy()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setStartRange(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getCalcMHplus()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double getSnRatio()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.util.List getDataList()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setProbability(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setChargeState(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setSequence(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setChroCenter(int)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setSlope(double)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void setSpRank(java.lang.String)" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getTotalIntensity()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="java.lang.String getLoScan()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="long[] getTotalIntArr()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="double[] getMassMonitorArr()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<method signature="boolean isFilterOut()" class="edu.scripps.pms.census.model.ChroPeptide" />
	<class name="ptolemy.plot.EditListener" />
	<method signature="void editDataModified(ptolemy.plot.EditablePlot,int)" class="ptolemy.plot.EditListener" />
	<class name="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void PlotROC()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void GetBins()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void DebugPrintVerbose()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void GetROC()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void &lt;init&gt;(java.lang.String,int,double[],boolean[])" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void GetProbability()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void ChangeClassification(byte[])" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void GetTPRate()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void PlotHistograms()" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<method signature="void GetCutoffs(double,boolean[])" class="edu.scripps.dtaselect.logic.SingleDimensionScore" />
	<class name="edu.scripps.dtaselect.object.DTASelectResultProteins" />
	<method signature="void setProteins(java.util.Vector)" class="edu.scripps.dtaselect.object.DTASelectResultProteins" />
	<method signature="java.util.Vector getProteins()" class="edu.scripps.dtaselect.object.DTASelectResultProteins" />
	<method signature="void add(edu.scripps.dtaselect.object.OProtein)" class="edu.scripps.dtaselect.object.DTASelectResultProteins" />
	<method signature="edu.scripps.dtaselect.object.DTASelectResultProteins getInstance()" class="edu.scripps.dtaselect.object.DTASelectResultProteins" />
	<class name="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="void addBList(java.lang.String[])" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="void setTotalIntArr(long[])" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="java.util.ArrayList getBList()" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="void setScanArr(int[])" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="void setTandemData(java.lang.String[])" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="java.util.ArrayList getYList()" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="long[] getTotalIntArr()" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="int[] getScanArr()" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<method signature="void addYList(java.lang.String[])" class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" />
	<class name="graph.com.microstar.xml.HandlerBase" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void endDocument()" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void startExternalEntity(java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void &lt;init&gt;()" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void charData(char[],int,int)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void endElement(java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void endExternalEntity(java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void startDocument()" class="graph.com.microstar.xml.HandlerBase" />
	<method signature="void startElement(java.lang.String)" class="graph.com.microstar.xml.HandlerBase" />
	<class name="edu.scripps.pms.census.plot.FragIonPlot" />
	<method signature="void &lt;init&gt;(java.lang.String,long[],long[],int,int,boolean)" class="edu.scripps.pms.census.plot.FragIonPlot" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.pms.census.plot.FragIonPlot" />
	<class name="edu.scripps.pms.util.StringUtil" />
	<method signature="java.lang.String splitWithReturn(java.lang.String,int,java.lang.String)" class="edu.scripps.pms.util.StringUtil" />
	<method signature="java.lang.String trimString(java.lang.String,int)" class="edu.scripps.pms.util.StringUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.StringUtil" />
	<method signature="java.lang.String trimAccession(java.lang.String,int)" class="edu.scripps.pms.util.StringUtil" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.StringUtil" />
	<method signature="java.lang.String getRandomString(int)" class="edu.scripps.pms.util.StringUtil" />
	<class name="edu.scripps.pms.census.plot.AlignPlot" />
	<method signature="void Go(java.lang.String)" class="edu.scripps.pms.census.plot.AlignPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.AlignPlot" />
	<class name="ptolemy.plot.PlotApplication" />
	<method signature="int _parseArgs(java.lang.String[])" class="ptolemy.plot.PlotApplication" />
	<method signature="void _help()" class="ptolemy.plot.PlotApplication" />
	<method signature="java.lang.String _usage()" class="ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.PlotApplication" />
	<method signature="void _about()" class="ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox,java.lang.String[])" class="ptolemy.plot.PlotApplication" />
	<method signature="void _close()" class="ptolemy.plot.PlotApplication" />
	<method signature="void main(java.lang.String[])" class="ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox)" class="ptolemy.plot.PlotApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="ptolemy.plot.PlotApplication" />
	<field name="_test" class="ptolemy.plot.PlotApplication" />
	<class name="edu.scripps.dtaselect.gui.PieChartPaneTab" />
	<method signature="edu.scripps.dtaselect.object.OPieChart getPieChart()" class="edu.scripps.dtaselect.gui.PieChartPaneTab" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.PieChartPaneTab" />
	<method signature="edu.scripps.dtaselect.gui.PieChartPaneTab getInstance()" class="edu.scripps.dtaselect.gui.PieChartPaneTab" />
	<class name="edu.scripps.pms.util.spectrum.PeakComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="edu.scripps.pms.util.spectrum.PeakComparator" />
	<method signature="void &lt;init&gt;(boolean)" class="edu.scripps.pms.util.spectrum.PeakComparator" />
	<method signature="boolean equals(java.lang.Object)" class="edu.scripps.pms.util.spectrum.PeakComparator" />
	<method signature="void setCompareMode(boolean)" class="edu.scripps.pms.util.spectrum.PeakComparator" />
	<class name="ptolemy.plot.PlotBox$DragListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$DragListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$DragListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox)" class="ptolemy.plot.PlotBox$DragListener" />
	<class name="edu.scripps.dtaselect.logic.SPMFile" />
	<method signature="long AddSpectrumToQueue(java.io.File,java.lang.String)" class="edu.scripps.dtaselect.logic.SPMFile" />
	<method signature="edu.scripps.dtaselect.logic.Spectrum GetSpectrumAt(long)" class="edu.scripps.dtaselect.logic.SPMFile" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.SPMFile" />
	<method signature="void AddSpectraToFile(java.io.RandomAccessFile)" class="edu.scripps.dtaselect.logic.SPMFile" />
	<class name="edu.scripps.pms.census.plot.AlignHeatmap$myPan" />
	<method signature="void repaint(long,int,int,int,int)" class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.plot.AlignHeatmap,java.lang.String,long)" class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" />
	<class name="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="javax.swing.Icon getLargeDisplayIcon()" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="void updateChooser()" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="javax.swing.JToggleButton createCrayon(java.lang.String,javax.swing.border.Border)" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="java.lang.String getDisplayName()" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="void buildChooser()" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="javax.swing.Icon getSmallDisplayIcon()" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<method signature="javax.swing.ImageIcon createImageIcon(java.lang.String)" class="edu.scripps.dtaselect.gui.CrayonPanel" />
	<class name="edu.scripps.pms.util.TimeUtils" />
	<method signature="void startTiming()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="java.util.Date getOffsetDate(java.util.Date,int)" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="java.util.Date getAheadDate(int)" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="void stopTiming()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="java.text.DateFormat getDateTimeFormat()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="long getTimeUsedMillis()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="java.lang.String getYearMonthDayPath()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="long getTimeUsedHours()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="long getTimeUsedMinutes()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="java.text.DateFormat getMediumFormat()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="long getTimeUsed()" class="edu.scripps.pms.util.TimeUtils" />
	<method signature="long getTimeUsedSeconds()" class="edu.scripps.pms.util.TimeUtils" />
	<class name="graph.com.microstar.xml.XmlHandler" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void endDocument()" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void startExternalEntity(java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void charData(char[],int,int)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void endElement(java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void endExternalEntity(java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void startDocument()" class="graph.com.microstar.xml.XmlHandler" />
	<method signature="void startElement(java.lang.String)" class="graph.com.microstar.xml.XmlHandler" />
	<class name="graph.ptolemy.plot.PlotPoint" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.PlotPoint" />
	<field name="modified" class="graph.ptolemy.plot.PlotPoint" />
	<field name="color" class="graph.ptolemy.plot.PlotPoint" />
	<field name="errorBar" class="graph.ptolemy.plot.PlotPoint" />
	<field name="originalx" class="graph.ptolemy.plot.PlotPoint" />
	<field name="yLowEB" class="graph.ptolemy.plot.PlotPoint" />
	<field name="label" class="graph.ptolemy.plot.PlotPoint" />
	<field name="ionType" class="graph.ptolemy.plot.PlotPoint" />
	<field name="connected" class="graph.ptolemy.plot.PlotPoint" />
	<field name="isSeqInterpretation" class="graph.ptolemy.plot.PlotPoint" />
	<field name="y" class="graph.ptolemy.plot.PlotPoint" />
	<field name="x" class="graph.ptolemy.plot.PlotPoint" />
	<field name="yHighEB" class="graph.ptolemy.plot.PlotPoint" />
	<class name="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox,java.lang.String[])" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void _help()" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void _about()" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="graph.ptolemy.plot.plotml.PlotBoxMLParser _newParser()" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void main(java.lang.String[])" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="graph.ptolemy.plot.plotml.PlotMLApplication" />
	<class name="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String PrintXML(edu.scripps.dtaselect.logic.ParamsFile,java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="edu.scripps.dtaselect.logic.DTAFile Clone()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="float CalculateKyteDoolittle()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String DisplayIonsString(edu.scripps.dtaselect.logic.ParamsFile)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void KeepOnlyDTAWithHighXCorr()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void OldSetTo(java.util.StringTokenizer)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void DebugPrintThis()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void CurrentSetTo(java.util.StringTokenizer,edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String DTACanonicalName(java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="float CalculateHPLCpH34()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="float CalculateBullBreese()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void DetermineModified()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void GetMassOffsets(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void DetermineTryptic()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String BetweenDots()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void SortList()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String ShowString()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String SymbolModString()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="float CalculatepI()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void FileSortList()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void DebugPrintHeader()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String TrimmedSequence()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void setSequence(java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String CanonicalName(java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void setSubDirectory(java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String JustLettersFrom(java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String GetTabDelimitedFields()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void KeepOnlyDTAWithHighTIC()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String JustLettersFromTrimmed(java.lang.String)" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="java.lang.String GetDLine()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="void DisplaySortList()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<method signature="int DetermineMissedTryptic()" class="edu.scripps.dtaselect.logic.DTAFile" />
	<field name="PrecursorMass" class="edu.scripps.dtaselect.logic.DTAFile" />
	<field name="Validated" class="edu.scripps.dtaselect.logic.DTAFile" />
	<class name="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="java.util.Vector getTupleTableDataB2()" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="void setTupleTableDataB2(java.util.Vector)" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="java.util.Vector getTupleTableDataY2()" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="java.util.Vector getTupleTableDataY1()" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="void setTupleTableDataB1(java.util.Vector)" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="java.util.Vector getTupleTableDataB1()" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="void setTupleTableDataY1(java.util.Vector)" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OTupleTableDatas)" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<method signature="void setTupleTableDataY2(java.util.Vector)" class="edu.scripps.dtaselect.object.OTupleTableDatas" />
	<class name="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void setClip(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void fillRect(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void translate(int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void setFont(java.awt.Font)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Font getFont()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void fillPolygon(int[],int[],int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Color getColor()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawRect(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void setColor(java.awt.Color)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawPolyline(int[],int[],int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawRoundRect(int,int,int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawString(java.lang.String,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void fillRoundRect(int,int,int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void setXORMode(java.awt.Color)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawPolygon(int[],int[],int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.FontMetrics getFontMetrics(java.awt.Font)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Shape getClip()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Graphics create()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void clipRect(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawArc(int,int,int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void showpage()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawString(java.text.AttributedCharacterIterator,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void fillArc(int,int,int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void copyArea(int,int,int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void &lt;init&gt;(java.io.OutputStream,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void setClip(java.awt.Shape)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawOval(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void setPaintMode()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void dispose()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void clearRect(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void fillOval(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Rectangle getClipBounds()" class="graph.ptolemy.plot.EPSGraphics" />
	<method signature="void drawLine(int,int,int,int)" class="graph.ptolemy.plot.EPSGraphics" />
	<class name="edu.scripps.pms.census.io.parse.ChroXMLParser" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Plot)" class="edu.scripps.pms.census.io.parse.ChroXMLParser" />
	<method signature="void endElement(java.lang.String)" class="edu.scripps.pms.census.io.parse.ChroXMLParser" />
	<method signature="void startElement(java.lang.String)" class="edu.scripps.pms.census.io.parse.ChroXMLParser" />
	<class name="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="java.lang.String getComments()" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void setExtractor(java.lang.String)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="java.lang.String getExtractorVersion()" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void init(java.util.Iterator)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void &lt;init&gt;(java.util.List)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void setComments(java.lang.String)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void setExtractorOptions(java.lang.String)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void &lt;init&gt;(java.util.Iterator)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="java.lang.String getExtractorOptions()" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void setExtractorVersion(java.lang.String)" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="java.lang.String getCreationDate()" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="java.lang.String getExtractor()" class="edu.scripps.pms.util.spectrum.Hline" />
	<method signature="void setCreationDate(java.lang.String)" class="edu.scripps.pms.util.spectrum.Hline" />
	<class name="edu.scripps.dtaselect.gui.ResultPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ResultPanel,javax.swing.Icon)" class="edu.scripps.dtaselect.gui.ResultPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ResultPanel,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.gui.ResultPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ResultPanel,java.lang.String)" class="edu.scripps.dtaselect.gui.ResultPanel$ToolBarButton" />
	<class name="graph.ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$MousePressListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Plot)" class="graph.ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot$MousePressListener" />
	<class name="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<method signature="void jumpToProtein(int,edu.scripps.dtaselect.object.OProtein)" class="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<method signature="void showErrorMessage(java.lang.String)" class="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<method signature="void createView()" class="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<method signature="edu.scripps.dtaselect.gui.ResultPaneTab getInstance()" class="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<method signature="edu.scripps.dtaselect.object.OSearchResultInformation search(java.lang.String,boolean)" class="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.ResultPaneTab" />
	<class name="edu.scripps.pms.census.io.ChroReader" />
	<method signature="java.util.Iterator getProteins()" class="edu.scripps.pms.census.io.ChroReader" />
	<method signature="void init()" class="edu.scripps.pms.census.io.ChroReader" />
	<method signature="void &lt;init&gt;(java.io.File)" class="edu.scripps.pms.census.io.ChroReader" />
	<method signature="java.util.ArrayList getProteinList()" class="edu.scripps.pms.census.io.ChroReader" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.io.ChroReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.io.ChroReader" />
	<method signature="int getDataDependency()" class="edu.scripps.pms.census.io.ChroReader" />
	<field name="list" class="edu.scripps.pms.census.io.ChroReader" />
	<field name="lastLine" class="edu.scripps.pms.census.io.ChroReader" />
	<field name="data" class="edu.scripps.pms.census.io.ChroReader" />
	<field name="file" class="edu.scripps.pms.census.io.ChroReader" />
	<field name="br" class="edu.scripps.pms.census.io.ChroReader" />
	<field name="dataDependency" class="edu.scripps.pms.census.io.ChroReader" />
	<class name="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<method signature="float getMassShiftFor(char)" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.ParamsFile)" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<method signature="java.lang.String getDTASelectTxtString()" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<field name="Next" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<field name="FragmentNeutralLoss" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<field name="PrecursorNeutralLoss" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<field name="Mass" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<field name="Symbol" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<field name="Residues" class="edu.scripps.dtaselect.logic.ParamsFile$DiffMod" />
	<class name="edu.scripps.pms.util.seq.Fasta" />
	<method signature="java.lang.String getAccession(java.lang.String)" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="int getLength()" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="int compareTo(java.lang.Object)" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="byte[] getSequenceAsBytes()" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="byte byteAt(int)" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="java.lang.String getDefline()" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="int compareTo(edu.scripps.pms.util.seq.Fasta)" class="edu.scripps.pms.util.seq.Fasta" />
	<method signature="java.lang.String getAccession()" class="edu.scripps.pms.util.seq.Fasta" />
	<field name="defline" class="edu.scripps.pms.util.seq.Fasta" />
	<field name="sequence" class="edu.scripps.pms.util.seq.Fasta" />
	<class name="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.OUTFile,edu.scripps.dtaselect.logic.SelectCriteria,int,boolean,byte)" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.Protein,edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void PrintClassification()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void DebugPrintMD()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void DebugPrintConf()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void PrintTotalProteins()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void PlotOutput()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void ReportScores(edu.scripps.dtaselect.logic.OUTFile)" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void PrintTotals()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void ComputeConfidence()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void PlotDirectReverse(java.lang.String,int,int,boolean)" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void ReportScores(edu.scripps.dtaselect.logic.Protein)" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<method signature="void DebugPrintCompositeScore()" class="edu.scripps.dtaselect.logic.LDAConfidence" />
	<class name="edu.scripps.pms.util.CalendarUtil" />
	<method signature="java.lang.String getCurrentDateTime(java.lang.String)" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="java.util.List getMonthList()" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="void &lt;init&gt;(int,int,int)" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="long getDateAsLong()" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="void init(int,int,int)" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="java.lang.String getDateTimeFormat(java.sql.Date)" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="java.sql.Date getDate()" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="java.lang.String getCurrentDateTime()" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="java.lang.String getMediumFormat(java.sql.Date)" class="edu.scripps.pms.util.CalendarUtil" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.CalendarUtil" />
	<class name="edu.scripps.pms.census.hash.MSIndexFileCreator" />
	<method signature="void createIndexFile(java.lang.String)" class="edu.scripps.pms.census.hash.MSIndexFileCreator" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.hash.MSIndexFileCreator" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.hash.MSIndexFileCreator" />
	<class name="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="java.util.Hashtable getTable()" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="void createIndex()" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="edu.scripps.pms.census.model.SpecRange getSpecRange(java.lang.String)" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean,double)" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="edu.scripps.pms.census.io.SpecRangeGenerator getSpecRangeGenerator(edu.scripps.pms.util.io.IdentificationReader)" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="void setIsVersion2(boolean)" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.io.SpecRangeGenerator" />
	<class name="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="void showGUI()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="java.lang.String[] getFormats()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="void setTabbedPaneSelectedComponentToHeatmap()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="edu.scripps.dtaselect.gui.ProteinOverviewPanel getInstance(int)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="edu.scripps.dtaselect.gui.HeatmapPaneTab getHeatmapPaneTab()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="void showWarningMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="void showErrorMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="javax.swing.JTabbedPane getTabbedPane()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="edu.scripps.dtaselect.gui.ProteinOverviewPanel getInstance()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="void setNumberOfSamples(int)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="int getNumberOfSamples()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="edu.scripps.dtaselect.gui.PieChartPaneTab getPieChartPaneTab()" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<method signature="java.awt.Color getColorFor(float)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<field name="numberOfSamples" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel" />
	<class name="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void setModified(boolean)" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void setIonType(int)" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void setLetter(char)" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="java.lang.String getColor()" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="char getLetter()" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="float getMZ()" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="boolean isModified()" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="int getIonType()" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OSequenceInterpretation)" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void setColor(java.lang.String)" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<method signature="void setMZ(float)" class="edu.scripps.dtaselect.object.OSequenceInterpretation" />
	<class name="ReadFile" />
	<method signature="void &lt;init&gt;()" class="ReadFile" />
	<method signature="void main(java.lang.String[])" class="ReadFile" />
	<class name="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String[])" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="void printUsage()" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="void checkSinglefileFix(boolean,java.lang.String)" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="java.lang.String getHeader()" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="void close()" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="java.util.Iterator getAllFiles(java.lang.String)" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.sqt.SQTValidator" />
	<class name="edu.scripps.pms.util.spectrum.Point" />
	<method signature="double getIntensity()" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="void setXValue(double)" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="void setIndex(int)" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="int getIndex()" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="boolean equals(java.lang.Object)" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="void &lt;init&gt;(double,double)" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="void setIntensity(double)" class="edu.scripps.pms.util.spectrum.Point" />
	<method signature="double getXValue()" class="edu.scripps.pms.util.spectrum.Point" />
	<class name="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getPublicId()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getType(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getSystemId()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="int getColumnNumber()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void endDocument()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getValue(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void startDocument()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void setLocale(java.util.Locale)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void startElement(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getType(int)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void setDocumentHandler(org.xml.sax.DocumentHandler)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void parse(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getValue(int)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="int getLineNumber()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void parse(org.xml.sax.InputSource)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void startExternalEntity(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="int getLength()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void &lt;init&gt;()" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getName(int)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void charData(char[],int,int)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void endElement(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void endExternalEntity(java.lang.String)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="graph.com.microstar.xml.driver.SAXDriver" />
	<class name="edu.scripps.pms.census.NewBean" />
	<method signature="void setSampleProperty(java.lang.String)" class="edu.scripps.pms.census.NewBean" />
	<method signature="void addPropertyChangeListener(java.beans.PropertyChangeListener)" class="edu.scripps.pms.census.NewBean" />
	<method signature="void removePropertyChangeListener(java.beans.PropertyChangeListener)" class="edu.scripps.pms.census.NewBean" />
	<method signature="java.lang.String getSampleProperty()" class="edu.scripps.pms.census.NewBean" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.NewBean" />
	<field name="PROP_SAMPLE_PROPERTY" class="edu.scripps.pms.census.NewBean" />
	<class name="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="void setUp()" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="void tearDown()" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="void indexTest(java.lang.String)" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="java.util.Iterator getAllFiles(java.lang.String)" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="void indexValidate()" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<method signature="java.util.Hashtable getIndexData(java.lang.String)" class="edu.scripps.pms.census.junit.IndexTestCase" />
	<class name="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void setMZ(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="java.lang.String getLabel()" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="boolean isShown()" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void setShown(boolean)" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="java.lang.Float getMZ()" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="java.lang.Float getInt()" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void setInt(java.lang.Float)" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void setLabel(java.lang.String)" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="int getSeqIonType()" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void setSeqIonType(int)" class="edu.scripps.dtaselect.object.OPeak" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.OPeak)" class="edu.scripps.dtaselect.object.OPeak" />
	<class name="edu.scripps.pms.census.SelectRefMSDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,org.jdom.Element,java.util.Vector)" class="edu.scripps.pms.census.SelectRefMSDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.SelectRefMSDialog" />
	<class name="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="void setIntensityArr(java.util.ArrayList)" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="long getAverage()" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="void setSampleName(java.lang.String)" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="java.util.ArrayList getIntensityArr()" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="double getNormalizedSpecC()" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="long getSumIntensity()" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="void addNormalizedSpecC(double)" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="java.util.ArrayList getExpList()" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="java.lang.String getSampleName()" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="void addIntensity(long)" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<method signature="void addExperiment(java.lang.String)" class="edu.scripps.pms.census.io.ChroXmlReader$Sample" />
	<class name="ptolemy.plot.PlotBox" />
	<method signature="double[] getXRange()" class="ptolemy.plot.PlotBox" />
	<method signature="void _setButtonsVisibility(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void write(java.io.OutputStream)" class="ptolemy.plot.PlotBox" />
	<method signature="void _setPadding(double)" class="ptolemy.plot.PlotBox" />
	<method signature="void removeLegend(int)" class="ptolemy.plot.PlotBox" />
	<method signature="void export(java.io.OutputStream)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getEndRange()" class="ptolemy.plot.PlotBox" />
	<method signature="void _measureFonts()" class="ptolemy.plot.PlotBox" />
	<method signature="void setYRange(double,double)" class="ptolemy.plot.PlotBox" />
	<method signature="void writeOldSyntax(java.io.OutputStream)" class="ptolemy.plot.PlotBox" />
	<method signature="double _roundUp(double)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getXLabel()" class="ptolemy.plot.PlotBox" />
	<method signature="void init()" class="ptolemy.plot.PlotBox" />
	<method signature="void horizontalSpacing(java.awt.Graphics)" class="ptolemy.plot.PlotBox" />
	<method signature="void setLabelFont(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="int print(java.awt.Graphics,java.awt.print.PageFormat,int)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getDataurl()" class="ptolemy.plot.PlotBox" />
	<method signature="void setDocumentBase(java.net.URL)" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage(java.awt.Rectangle)" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.Color getColorByName(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.Dimension getMaximumSize()" class="ptolemy.plot.PlotBox" />
	<method signature="void setYLog(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void resetAxes()" class="ptolemy.plot.PlotBox" />
	<method signature="void drawLegendPanel()" class="ptolemy.plot.PlotBox" />
	<method signature="void setYLabel(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="int _numFracDigits(double)" class="ptolemy.plot.PlotBox" />
	<method signature="void setForeground(java.awt.Color)" class="ptolemy.plot.PlotBox" />
	<method signature="void _drawPoint(java.awt.Graphics,int,long,long,boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="double[] getYRange()" class="ptolemy.plot.PlotBox" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String _formatNum(double,int)" class="ptolemy.plot.PlotBox" />
	<method signature="void setSize(int,int)" class="ptolemy.plot.PlotBox" />
	<method signature="boolean _parseLine(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void setBounds(int,int,int,int)" class="ptolemy.plot.PlotBox" />
	<method signature="void clearLegends()" class="ptolemy.plot.PlotBox" />
	<method signature="void _executeDeferredActions()" class="ptolemy.plot.PlotBox" />
	<method signature="java.util.Vector[] getXTicks()" class="ptolemy.plot.PlotBox" />
	<method signature="double _gridRoundUp(java.util.Vector,double)" class="ptolemy.plot.PlotBox" />
	<method signature="void setScanNum(int)" class="ptolemy.plot.PlotBox" />
	<method signature="void setStartRange(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getYLabel()" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getLegend(int)" class="ptolemy.plot.PlotBox" />
	<method signature="void write(java.io.OutputStream,java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void addXTick(java.lang.String,double)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getTitle()" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage(java.awt.image.BufferedImage,java.awt.Rectangle,java.awt.RenderingHints,boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="boolean getYLog()" class="ptolemy.plot.PlotBox" />
	<method signature="void parseFile(java.lang.String,java.net.URL)" class="ptolemy.plot.PlotBox" />
	<method signature="void read(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void zoom(double,double,double,double)" class="ptolemy.plot.PlotBox" />
	<method signature="void _parsePairs(java.lang.String,boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.Dimension getMinimumSize()" class="ptolemy.plot.PlotBox" />
	<method signature="void clear(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="ptolemy.plot.PlotBox" />
	<method signature="void setButtons(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void paintComponent(java.awt.Graphics)" class="ptolemy.plot.PlotBox" />
	<method signature="void _help()" class="ptolemy.plot.PlotBox" />
	<method signature="void setTitle(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void write(java.io.Writer,java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void setDataurl(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void setColor(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getStartRange()" class="ptolemy.plot.PlotBox" />
	<method signature="void setXLog(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void samplePlot()" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.Dimension getPreferredSize()" class="ptolemy.plot.PlotBox" />
	<method signature="void setXLabel(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void fillPlot()" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.RenderingHints _defaultImageRenderingHints()" class="ptolemy.plot.PlotBox" />
	<method signature="boolean getGrid()" class="ptolemy.plot.PlotBox" />
	<method signature="double _gridStep(java.util.Vector,double,double,boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void writeFormat(java.io.PrintWriter)" class="ptolemy.plot.PlotBox" />
	<method signature="java.util.Vector _gridInit(double,double,boolean,java.util.Vector)" class="ptolemy.plot.PlotBox" />
	<method signature="java.net.URL getDocumentBase()" class="ptolemy.plot.PlotBox" />
	<method signature="void setXRange(double,double)" class="ptolemy.plot.PlotBox" />
	<method signature="void addLegend(int,java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="int _drawLegend(java.awt.Graphics,int,int)" class="ptolemy.plot.PlotBox" />
	<method signature="int getScanNum()" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage()" class="ptolemy.plot.PlotBox" />
	<method signature="void parseFile(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void deferIfNecessary(java.lang.Runnable)" class="ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage(java.awt.image.BufferedImage)" class="ptolemy.plot.PlotBox" />
	<method signature="void addYTick(java.lang.String,double)" class="ptolemy.plot.PlotBox" />
	<method signature="void setBackground(java.awt.Color)" class="ptolemy.plot.PlotBox" />
	<method signature="void setEndRange(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void _writeOldSyntax(java.io.PrintWriter)" class="ptolemy.plot.PlotBox" />
	<method signature="void setWrap(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="void read(java.io.InputStream)" class="ptolemy.plot.PlotBox" />
	<method signature="java.util.Vector[] getYTicks()" class="ptolemy.plot.PlotBox" />
	<method signature="void writeData(java.io.PrintWriter)" class="ptolemy.plot.PlotBox" />
	<method signature="void setGrid(boolean)" class="ptolemy.plot.PlotBox" />
	<method signature="boolean getXLog()" class="ptolemy.plot.PlotBox" />
	<method signature="boolean getColor()" class="ptolemy.plot.PlotBox" />
	<method signature="void setTitleFont(java.lang.String)" class="ptolemy.plot.PlotBox" />
	<method signature="void _setYRange(double,double)" class="ptolemy.plot.PlotBox" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.PlotBox" />
	<method signature="java.lang.String _formatLogNum(double,int)" class="ptolemy.plot.PlotBox" />
	<method signature="int _numIntDigits(double)" class="ptolemy.plot.PlotBox" />
	<method signature="void _setXRange(double,double)" class="ptolemy.plot.PlotBox" />
	<field name="_gridBase" class="ptolemy.plot.PlotBox" />
	<field name="_xMin" class="ptolemy.plot.PlotBox" />
	<field name="_yticklabels" class="ptolemy.plot.PlotBox" />
	<field name="_yMin" class="ptolemy.plot.PlotBox" />
	<field name="_zoomxn" class="ptolemy.plot.PlotBox" />
	<field name="_superscriptFont" class="ptolemy.plot.PlotBox" />
	<field name="_xtickMax" class="ptolemy.plot.PlotBox" />
	<field name="_xlabel" class="ptolemy.plot.PlotBox" />
	<field name="_preferredHeight" class="ptolemy.plot.PlotBox" />
	<field name="_yscale" class="ptolemy.plot.PlotBox" />
	<field name="_yBottom" class="ptolemy.plot.PlotBox" />
	<field name="_gridCurJuke" class="ptolemy.plot.PlotBox" />
	<field name="PTPLOT_RELEASE" class="ptolemy.plot.PlotBox" />
	<field name="_yMax" class="ptolemy.plot.PlotBox" />
	<field name="_ytickscale" class="ptolemy.plot.PlotBox" />
	<field name="_yticks" class="ptolemy.plot.PlotBox" />
	<field name="_drawn" class="ptolemy.plot.PlotBox" />
	<field name="_formatButton" class="ptolemy.plot.PlotBox" />
	<field name="_title" class="ptolemy.plot.PlotBox" />
	<field name="screenMode" class="ptolemy.plot.PlotBox" />
	<field name="_padding" class="ptolemy.plot.PlotBox" />
	<field name="_resetButton" class="ptolemy.plot.PlotBox" />
	<field name="_xExp" class="ptolemy.plot.PlotBox" />
	<field name="_titleFont" class="ptolemy.plot.PlotBox" />
	<field name="_xBottom" class="ptolemy.plot.PlotBox" />
	<field name="_xlog" class="ptolemy.plot.PlotBox" />
	<field name="_superscriptFontMetrics" class="ptolemy.plot.PlotBox" />
	<field name="_xticks" class="ptolemy.plot.PlotBox" />
	<field name="_xlowgiven" class="ptolemy.plot.PlotBox" />
	<field name="_xtickscale" class="ptolemy.plot.PlotBox" />
	<field name="_ytickMax" class="ptolemy.plot.PlotBox" />
	<field name="_filespec" class="ptolemy.plot.PlotBox" />
	<field name="_printButton" class="ptolemy.plot.PlotBox" />
	<field name="_height" class="ptolemy.plot.PlotBox" />
	<field name="_legendDatasets" class="ptolemy.plot.PlotBox" />
	<field name="_xhighgiven" class="ptolemy.plot.PlotBox" />
	<field name="_lry" class="ptolemy.plot.PlotBox" />
	<field name="_ylog" class="ptolemy.plot.PlotBox" />
	<field name="_errorMsg" class="ptolemy.plot.PlotBox" />
	<field name="_foreground" class="ptolemy.plot.PlotBox" />
	<field name="_yhighgiven" class="ptolemy.plot.PlotBox" />
	<field name="_width" class="ptolemy.plot.PlotBox" />
	<field name="_xMax" class="ptolemy.plot.PlotBox" />
	<field name="scanNum" class="ptolemy.plot.PlotBox" />
	<field name="_DTD" class="ptolemy.plot.PlotBox" />
	<field name="_wrapHigh" class="ptolemy.plot.PlotBox" />
	<field name="_zoomin" class="ptolemy.plot.PlotBox" />
	<field name="_bottomPadding" class="ptolemy.plot.PlotBox" />
	<field name="_actionsDeferred" class="ptolemy.plot.PlotBox" />
	<field name="_yRangeGiven" class="ptolemy.plot.PlotBox" />
	<field name="_ylowgiven" class="ptolemy.plot.PlotBox" />
	<field name="_zoomButton" class="ptolemy.plot.PlotBox" />
	<field name="_fillButton" class="ptolemy.plot.PlotBox" />
	<field name="_xtickMin" class="ptolemy.plot.PlotBox" />
	<field name="_background" class="ptolemy.plot.PlotBox" />
	<field name="_lrx" class="ptolemy.plot.PlotBox" />
	<field name="toolPanel" class="ptolemy.plot.PlotBox" />
	<field name="_xTop" class="ptolemy.plot.PlotBox" />
	<field name="_sizeHasBeenSet" class="ptolemy.plot.PlotBox" />
	<field name="_preferredWidth" class="ptolemy.plot.PlotBox" />
	<field name="_labelFont" class="ptolemy.plot.PlotBox" />
	<field name="_wrapLow" class="ptolemy.plot.PlotBox" />
	<field name="_zoomx" class="ptolemy.plot.PlotBox" />
	<field name="_xscale" class="ptolemy.plot.PlotBox" />
	<field name="_peakAreaButton" class="ptolemy.plot.PlotBox" />
	<field name="_uly" class="ptolemy.plot.PlotBox" />
	<field name="_zoomy" class="ptolemy.plot.PlotBox" />
	<field name="_colors" class="ptolemy.plot.PlotBox" />
	<field name="_xRangeGiven" class="ptolemy.plot.PlotBox" />
	<field name="_ytickMin" class="ptolemy.plot.PlotBox" />
	<field name="startRange" class="ptolemy.plot.PlotBox" />
	<field name="_leftPadding" class="ptolemy.plot.PlotBox" />
	<field name="endRange" class="ptolemy.plot.PlotBox" />
	<field name="_labelFontMetrics" class="ptolemy.plot.PlotBox" />
	<field name="_usecolor" class="ptolemy.plot.PlotBox" />
	<field name="_xticklabels" class="ptolemy.plot.PlotBox" />
	<field name="_yExp" class="ptolemy.plot.PlotBox" />
	<field name="_zooming" class="ptolemy.plot.PlotBox" />
	<field name="_boxColor" class="ptolemy.plot.PlotBox" />
	<field name="_topPadding" class="ptolemy.plot.PlotBox" />
	<field name="_wrap" class="ptolemy.plot.PlotBox" />
	<field name="_rightPadding" class="ptolemy.plot.PlotBox" />
	<field name="_zoomout" class="ptolemy.plot.PlotBox" />
	<field name="_titleFontMetrics" class="ptolemy.plot.PlotBox" />
	<field name="_panButton" class="ptolemy.plot.PlotBox" />
	<field name="_ylabel" class="ptolemy.plot.PlotBox" />
	<field name="_deferredActions" class="ptolemy.plot.PlotBox" />
	<field name="_rangesGivenByZooming" class="ptolemy.plot.PlotBox" />
	<field name="_yTop" class="ptolemy.plot.PlotBox" />
	<field name="_documentBase" class="ptolemy.plot.PlotBox" />
	<field name="_ulx" class="ptolemy.plot.PlotBox" />
	<field name="_LOG10SCALE" class="ptolemy.plot.PlotBox" />
	<field name="_grid" class="ptolemy.plot.PlotBox" />
	<field name="_legendStrings" class="ptolemy.plot.PlotBox" />
	<field name="_zoomyn" class="ptolemy.plot.PlotBox" />
	<class name="edu.scripps.dtaselect.logic.gui.LLocusFiltersPanel" />
	<method signature="void parseInput()" class="edu.scripps.dtaselect.logic.gui.LLocusFiltersPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LLocusFiltersPanel" />
	<class name="graph.ptolemy.gui.CancelException" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.CancelException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="graph.ptolemy.gui.CancelException" />
	<class name="edu.scripps.dtaselect.logic.Huffman" />
	<method signature="void PrintDepth()" class="edu.scripps.dtaselect.logic.Huffman" />
	<method signature="void Initialize()" class="edu.scripps.dtaselect.logic.Huffman" />
	<method signature="java.lang.String EncodeIntensities(edu.scripps.dtaselect.logic.Point,float)" class="edu.scripps.dtaselect.logic.Huffman" />
	<method signature="edu.scripps.dtaselect.logic.Point DecodeIntensities(int,byte[],float)" class="edu.scripps.dtaselect.logic.Huffman" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.Huffman" />
	<class name="edu.scripps.dtaselect.logic.Classification" />
	<method signature="edu.scripps.dtaselect.logic.Classification GetClass(byte)" class="edu.scripps.dtaselect.logic.Classification" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.Classification" />
	<method signature="void PrintDatabase(java.lang.String)" class="edu.scripps.dtaselect.logic.Classification" />
	<class name="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" />
	<method signature="void setName(java.lang.String)" class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" />
	<method signature="void &lt;init&gt;(java.lang.String,javax.swing.DefaultListModel)" class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" />
	<method signature="java.lang.String getName()" class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" />
	<method signature="javax.swing.DefaultListModel getListModel()" class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" />
	<method signature="void setListModel(javax.swing.DefaultListModel)" class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" />
	<class name="edu.scripps.dtaselect.gui.utilities.ComponentComponentField" />
	<method signature="void setComponent1(javax.swing.JComponent)" class="edu.scripps.dtaselect.gui.utilities.ComponentComponentField" />
	<method signature="javax.swing.JComponent getComponent1()" class="edu.scripps.dtaselect.gui.utilities.ComponentComponentField" />
	<method signature="void &lt;init&gt;(javax.swing.JComponent,javax.swing.JComponent)" class="edu.scripps.dtaselect.gui.utilities.ComponentComponentField" />
	<method signature="void setComponent2(javax.swing.JComponent)" class="edu.scripps.dtaselect.gui.utilities.ComponentComponentField" />
	<method signature="javax.swing.JComponent getComponent2()" class="edu.scripps.dtaselect.gui.utilities.ComponentComponentField" />
	<class name="ptolemy.gui.Query" />
	<method signature="java.awt.Dimension getMaximumSize()" class="ptolemy.gui.Query" />
	<method signature="boolean booleanValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setLine(java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setBoolean(java.lang.String,boolean)" class="ptolemy.gui.Query" />
	<method signature="void addFileChooser(java.lang.String,java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void addDisplay(java.lang.String,java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setEnabled(java.lang.String,boolean)" class="ptolemy.gui.Query" />
	<method signature="void addRadioButtons(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="int getTextHeight()" class="ptolemy.gui.Query" />
	<method signature="void removeQueryListener(ptolemy.gui.QueryListener)" class="ptolemy.gui.Query" />
	<method signature="void addChoice(java.lang.String,java.lang.String,java.lang.String[],java.lang.String,boolean)" class="ptolemy.gui.Query" />
	<method signature="void setBackground(java.awt.Color)" class="ptolemy.gui.Query" />
	<method signature="void notifyListeners()" class="ptolemy.gui.Query" />
	<method signature="java.lang.String getStringValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setSlider(java.lang.String,int)" class="ptolemy.gui.Query" />
	<method signature="void addLine(java.lang.String,java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void set(java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="int getTextWidth()" class="ptolemy.gui.Query" />
	<method signature="boolean getBooleanValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setTextWidth(int)" class="ptolemy.gui.Query" />
	<method signature="void addQueryListener(ptolemy.gui.QueryListener)" class="ptolemy.gui.Query" />
	<method signature="void setToolTip(java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void addChoice(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="double doubleValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void addSelectButtons(java.lang.String,java.lang.String,java.lang.String[],java.util.Set)" class="ptolemy.gui.Query" />
	<method signature="int intValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setAndNotify(java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void addSlider(java.lang.String,java.lang.String,int,int,int)" class="ptolemy.gui.Query" />
	<method signature="void setColumns(int)" class="ptolemy.gui.Query" />
	<method signature="java.lang.String stringValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setTextHeight(int)" class="ptolemy.gui.Query" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.Query" />
	<method signature="int getIntValue(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void addCheckBox(java.lang.String,java.lang.String,boolean)" class="ptolemy.gui.Query" />
	<method signature="void _addPair(java.lang.String,javax.swing.JLabel,java.awt.Component,java.lang.Object)" class="ptolemy.gui.Query" />
	<method signature="void setMessage(java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void addTextArea(java.lang.String,java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="void setDisplay(java.lang.String,java.lang.String)" class="ptolemy.gui.Query" />
	<method signature="double getDoubleValue(java.lang.String)" class="ptolemy.gui.Query" />
	<field name="DEFAULT_ENTRY_WIDTH" class="ptolemy.gui.Query" />
	<field name="_constraints" class="ptolemy.gui.Query" />
	<field name="DEFAULT_ENTRY_HEIGHT" class="ptolemy.gui.Query" />
	<field name="_listeners" class="ptolemy.gui.Query" />
	<field name="_background" class="ptolemy.gui.Query" />
	<field name="_grid" class="ptolemy.gui.Query" />
	<class name="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void postProcessing()" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void parse(java.net.URL,java.io.Reader)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void endDocument()" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void parse(java.net.URL,java.lang.String)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void startExternalEntity(java.lang.String)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void parse(java.net.URL,java.io.InputStream)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void _checkForNull(java.lang.Object,java.lang.String)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void charData(char[],int,int)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void endElement(java.lang.String)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="java.lang.String _currentExternalEntity()" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void startDocument()" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void startElement(java.lang.String)" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="PlotML_DTD_1" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_attributes" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_currentCharData" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_plot" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_parser" class="ptolemy.plot.plotml.PlotBoxMLParser" />
	<class name="edu.scripps.pms.census.util.SpectrumUtil" />
	<method signature="int getNumOfIsolationWindow(java.lang.String)" class="edu.scripps.pms.census.util.SpectrumUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.SpectrumUtil" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.util.SpectrumUtil" />
	<class name="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void setVisible(java.lang.Boolean)" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void writeOutputToTextArea(java.lang.String,int)" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void showProgramStoppedMessage()" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="int getPercentCompleted()" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="edu.scripps.dtaselect.gui.ProgramProgressBarPanel getInstance()" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="javax.swing.JTextPane getProgramsOutputArea()" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void setToMaximum()" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void showCompletedMessage(java.lang.String)" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void increaseStatus()" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<method signature="void setMaxStatus(int)" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<field name="ONE_SECOND" class="edu.scripps.dtaselect.gui.ProgramProgressBarPanel" />
	<class name="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="edu.scripps.dtaselect.gui.ResultPanel getInstance()" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="void showGUI()" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="void showWarningMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="edu.scripps.dtaselect.gui.ConfigurationPaneTab getConfigurationPaneTab()" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="void showErrorMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="edu.scripps.dtaselect.gui.ResultPaneTab getResultPaneTab()" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.ResultPanel" />
	<class name="ptolemy.plot.EditablePlot" />
	<method signature="double[][] getData(int)" class="ptolemy.plot.EditablePlot" />
	<method signature="void setEditable(int)" class="ptolemy.plot.EditablePlot" />
	<method signature="void undo()" class="ptolemy.plot.EditablePlot" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.EditablePlot" />
	<method signature="void redo()" class="ptolemy.plot.EditablePlot" />
	<method signature="void addEditListener(ptolemy.plot.EditListener)" class="ptolemy.plot.EditablePlot" />
	<method signature="void removeEditListener(ptolemy.plot.EditListener)" class="ptolemy.plot.EditablePlot" />
	<class name="ptolemy.gui.JTextAreaExec" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void start()" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void updateStatusBar(java.lang.String)" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void setCommands(java.util.List)" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void main(java.lang.String[])" class="ptolemy.gui.JTextAreaExec" />
	<method signature="javax.swing.JButton getStartButton()" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void clear()" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void cancel()" class="ptolemy.gui.JTextAreaExec" />
	<method signature="void appendJTextArea(java.lang.String)" class="ptolemy.gui.JTextAreaExec" />
	<class name="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="java.util.Vector getNumberOfProteinsCommonInSamples()" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="void showGUI()" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="com.sun.org.apache.xalan.internal.xsltc.compiler.util.MultiHashtable getCommonProteins()" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="void showWarningMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="void showErrorMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="javax.swing.JTabbedPane getTabbedPane()" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<method signature="edu.scripps.dtaselect.gui.CompareOverviewPanel getInstance()" class="edu.scripps.dtaselect.gui.CompareOverviewPanel" />
	<class name="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void &lt;init&gt;(ptolemy.plot.EditablePlot,java.lang.String[])" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void _selectDataset()" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void _help()" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void _about()" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void main(java.lang.String[])" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="ptolemy.plot.plotml.EditablePlotMLApplication" />
	<class name="ptolemy.plot.CmdLineArgException" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.CmdLineArgException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="ptolemy.plot.CmdLineArgException" />
	<class name="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDisplayPeptidePIInformation()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDisplayKyteDoolittleHydropathyScore()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbPrintCommandsToCopySelectedIDs()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDisplayDeltaMassInformation()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbIncludeOnlyIDsInCurrentDirectory()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDoNotUseABackgroundGraphic()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbCreateIDXAndSPMFilesFromSpectra()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbSaveXMLReportOfFilteredResults()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbSaveInFormatForDatabaseImport()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbSaveModificationReport()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDisplayBirdsEyeViewOfProteins()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JRadioButton getRbCID()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDisplayHPLCIndexAdjustedForPH43Conditions()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbSaveChromatographyReport()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbSaveProteinSimilarityTable()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbReportThroughGUIInsteadOfOutputFiles()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbDisplayBullBreeseHydrophobicityIndex()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbIncorporateProteinInfoFromAuxFile()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbOutputExtraColumnsInDTASelectFilterTxtAndDBPeptidesTxtFiles()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbClassifyProteinsBySuppliedList()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbUseNewAccessoryPrograms()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JRadioButton getRbETD()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbSaveSequenceAlignmentReport()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<method signature="javax.swing.JCheckBox getCbExpectMascotOutputRatherThanSEQUEST()" class="edu.scripps.dtaselect.gui.UtilitiesPanel" />
	<class name="edu.scripps.pms.census.TextAreaRenderer" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="edu.scripps.pms.census.TextAreaRenderer" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.TextAreaRenderer" />
	<class name="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void _selectDataset()" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void _help()" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void _about()" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.EditablePlot,java.lang.String[])" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void main(java.lang.String[])" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="graph.ptolemy.plot.plotml.EditablePlotMLApplication" />
	<class name="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="void &lt;init&gt;(int,long[],long[])" class="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="long[] getRArr()" class="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="void setIndex(int)" class="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="int getIndex()" class="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="long[] getSArr()" class="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="void setRArr(long[])" class="edu.scripps.pms.census.model.BestFragIon" />
	<method signature="void setSArr(long[])" class="edu.scripps.pms.census.model.BestFragIon" />
	<class name="edu.scripps.pms.census.tools.Formatter" />
	<method signature="java.lang.String formatDecimal(double)" class="edu.scripps.pms.census.tools.Formatter" />
	<class name="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="java.lang.String getEncodedM2zAndIntensities()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setEncodedM2zAndIntensities(java.lang.String,int)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setBasePeakIntensity(double)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setPrecursorScan(int)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="java.util.Iterator getChildren()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="int getPrecursorScan()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="int getNumChildSpectrum()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setTotalIonCurrent(double)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="double getRetentionTime()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="double getTotalIonCurrent()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void addChildSpectrum(edu.scripps.pms.util.spectrum.MzxmlPeakList)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setMsLevel(int)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="double getBasePeakIntensity()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setBasePeakM2z(double)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setPrecursorIntensity(double)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="void setRetentionTime(double)" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="int getMsLevel()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<method signature="double getBasePeakM2z()" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
	<class name="ChroXmlParser" />
	<method signature="void specCount(java.lang.String)" class="ChroXmlParser" />
	<method signature="void &lt;init&gt;()" class="ChroXmlParser" />
	<method signature="void parser(java.lang.String)" class="ChroXmlParser" />
	<method signature="void main(java.lang.String[])" class="ChroXmlParser" />
	<class name="graph.ptolemy.plot.EditablePlot$ModifyListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$ModifyListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.EditablePlot)" class="graph.ptolemy.plot.EditablePlot$ModifyListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$ModifyListener" />
	<class name="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="int getDisplayCriteria()" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="java.util.Vector getSlices()" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="int getNrOfSlices()" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void drawLabel(java.awt.Graphics,java.lang.String,double)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void setDisplayCriteria(int)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void setNrOfSlices(int)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void setUpdatedSlices(java.util.Vector)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void setAllMarkingBack()" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void markProtein(edu.scripps.dtaselect.object.OProtein)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void &lt;init&gt;(int,java.util.Vector,int)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.object.OPieChart" />
	<method signature="void drawPie(java.awt.Graphics2D,java.awt.Rectangle,java.util.Vector)" class="edu.scripps.dtaselect.object.OPieChart" />
	<class name="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="void setColor(java.awt.Color)" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="int getNr()" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="void &lt;init&gt;(int,float,float)" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="void setCalcMZ(float)" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="float getDiff()" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="float getCalcMZ()" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="void setDiff(float)" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="void setNr(int)" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<method signature="java.awt.Color getColor()" class="edu.scripps.dtaselect.object.OTupleTableData" />
	<class name="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="java.lang.String getPeaks()" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="edu.scripps.pms.util.spectrum.PointList getPointList()" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="edu.scripps.pms.util.spectrum.PeakList getPeakList()" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="void close()" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="java.lang.String getClosestScan(long)" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.io.SpectrumIndexReader" />
	<class name="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$ZoomListener" />
	<class name="CensusRatioFilter" />
	<method signature="void &lt;init&gt;()" class="CensusRatioFilter" />
	<method signature="void main(java.lang.String[])" class="CensusRatioFilter" />
	<class name="edu.scripps.pms.census.MyTest" />
	<method signature="double getModG()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModS(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModO(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModM(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModX()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModF()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModI()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModN()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModD()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModC()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModY(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModV(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModC(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModK(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModX(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModB()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModK()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModQ()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModT()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModV()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModZ(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModM()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModR()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModH()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModH(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModE()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModD(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModP()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModY()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModA()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModA(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModF(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModQ(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModT(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModZ()" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModO()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModW(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModL()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModN(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModL(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModP(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModW()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModE(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModI(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModB(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModG(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="void setModR(double)" class="edu.scripps.pms.census.MyTest" />
	<method signature="double getModS()" class="edu.scripps.pms.census.MyTest" />
	<class name="edu.scripps.dtaselect.gui.CompareOverviewPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.CompareOverviewPanel,javax.swing.Icon)" class="edu.scripps.dtaselect.gui.CompareOverviewPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.CompareOverviewPanel,java.lang.String)" class="edu.scripps.dtaselect.gui.CompareOverviewPanel$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.CompareOverviewPanel,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.gui.CompareOverviewPanel$ToolBarButton" />
	<class name="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createMsmsSpecificChro()" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createNonlabelXmlChro()" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createMRMFragmentIons(edu.scripps.pms.census.ChroProgressDialog)" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createFullscanXmlChro()" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createMsmsXmlChro(edu.scripps.pms.census.ChroProgressDialog)" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createFullscanXmlChro_old()" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.ChroProgressDialog)" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.ChroProgressDialog,javax.swing.JTextArea,java.lang.String,java.lang.String[],org.jdom.Element,int[][][])" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createMsmsXmlChro()" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void createMsmsSpecificChro(edu.scripps.pms.census.ChroProgressDialog)" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="void &lt;init&gt;(javax.swing.JProgressBar,javax.swing.JTextArea,int,int,java.lang.String,double)" class="edu.scripps.pms.census.ChroGenerator" />
	<method signature="java.util.Hashtable createIndexedFiles(java.lang.String,java.lang.String)" class="edu.scripps.pms.census.ChroGenerator" />
	<field name="MZXML" class="edu.scripps.pms.census.ChroGenerator" />
	<field name="MS2_FILE" class="edu.scripps.pms.census.ChroGenerator" />
	<field name="CENSUS_CONFIG" class="edu.scripps.pms.census.ChroGenerator" />
	<field name="MS1_FILE" class="edu.scripps.pms.census.ChroGenerator" />
	<class name="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getNotationSystemId(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="int getColumnNumber()" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getAttributeEnumeration(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="int getEntityType(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String intern(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getNotationPublicId(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String intern(char[],int,int)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getElementContentModel(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="void parse(java.lang.String,java.lang.String,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredElements()" class="com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredAttributes(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="int getLineNumber()" class="com.microstar.xml.XmlParser" />
	<method signature="int getElementContentType(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="void parse(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="void parse(java.lang.String,java.lang.String,java.io.Reader)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntitySystemId(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntityNotationName(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="int getAttributeDefaultValueType(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntityPublicId(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getAttributeDefaultValue(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="void setHandler(com.microstar.xml.XmlHandler)" class="com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredEntities()" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getCurrentElement()" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getAttributeExpandedValue(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredNotations()" class="com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntityValue(java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="int getAttributeType(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlParser" />
	<method signature="void &lt;init&gt;()" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_CDATA" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_IDREF" class="com.microstar.xml.XmlParser" />
	<field name="CONTENT_ELEMENTS" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ID" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_UNDECLARED" class="com.microstar.xml.XmlParser" />
	<field name="CONTENT_UNDECLARED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ENUMERATED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ENTITY" class="com.microstar.xml.XmlParser" />
	<field name="ENTITY_UNDECLARED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_SPECIFIED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_IMPLIED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_UNDECLARED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_FIXED" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_NOTATION" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ENTITIES" class="com.microstar.xml.XmlParser" />
	<field name="ENTITY_NDATA" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_NMTOKENS" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_REQUIRED" class="com.microstar.xml.XmlParser" />
	<field name="ENTITY_INTERNAL" class="com.microstar.xml.XmlParser" />
	<field name="CONTENT_EMPTY" class="com.microstar.xml.XmlParser" />
	<field name="ENTITY_TEXT" class="com.microstar.xml.XmlParser" />
	<field name="CONTENT_ANY" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_NMTOKEN" class="com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_IDREFS" class="com.microstar.xml.XmlParser" />
	<field name="CONTENT_MIXED" class="com.microstar.xml.XmlParser" />
	<class name="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void toggleFilterIcon(boolean)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void exportReport()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void generateITRAQData(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void exportDummy()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void openChroFile(java.lang.String)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void setCurrentDirectory(java.io.File)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void runtest()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="java.lang.String chromXMLHeader(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void exportReport(boolean,boolean,boolean,boolean,double,double,double,boolean,boolean)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void updateiTRAQpeptideInfo(javax.swing.JTable,int,int)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void generateNonLabelData(edu.scripps.pms.census.model.ChroPeptide,int)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void exportITRAQReport()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void runNonLabelActionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void dummyOpenChroFile()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="javax.swing.JPanel getProteinPanel()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void mergeFiles(java.lang.Object[],java.io.File,java.lang.String,edu.scripps.pms.census.model.FilterModel,double)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="java.lang.String getCurrentDirectory()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void generateInDepData(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void openMRMCrvFile(java.lang.String)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void changePeakArea(int,int)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="java.lang.String getPlotHeader()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void exportITRAQMultipleReport(java.io.File)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void generateNonLabelData(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void openSpecFile(java.lang.String)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void generateDepData(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void mrmCsvTest(java.awt.event.ActionEvent)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="java.util.ArrayList getProteinList()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void printHeader(java.io.PrintStream)" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.RelExMainFrame" />
	<method signature="void generateInDepFragData(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.RelExMainFrame" />
	<class name="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void &lt;init&gt;(java.lang.String,boolean)" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void start()" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void updateStatusBar(java.lang.String)" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void setCommands(java.util.List)" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void main(java.lang.String[])" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="javax.swing.JButton getStartButton()" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void clear()" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void cancel()" class="graph.ptolemy.gui.JTextAreaExec" />
	<method signature="void appendJTextArea(java.lang.String)" class="graph.ptolemy.gui.JTextAreaExec" />
	<class name="SimpleXMLValidator" />
	<method signature="void &lt;init&gt;()" class="SimpleXMLValidator" />
	<method signature="void main(java.lang.String[])" class="SimpleXMLValidator" />
	<class name="com.microstar.xml.XmlHandler" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="com.microstar.xml.XmlHandler" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<method signature="void endDocument()" class="com.microstar.xml.XmlHandler" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="com.microstar.xml.XmlHandler" />
	<method signature="void startExternalEntity(java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="com.microstar.xml.XmlHandler" />
	<method signature="void charData(char[],int,int)" class="com.microstar.xml.XmlHandler" />
	<method signature="void endElement(java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<method signature="void endExternalEntity(java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<method signature="void startDocument()" class="com.microstar.xml.XmlHandler" />
	<method signature="void startElement(java.lang.String)" class="com.microstar.xml.XmlHandler" />
	<class name="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="void &lt;init&gt;(double[][],int)" class="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="void printNodeOrder()" class="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="edu.scripps.dtaselect.object.UPGMATree$Cluster getRoot()" class="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="void join(int,int)" class="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="double d(int,int)" class="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.object.UPGMATree" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.object.UPGMATree" />
	<class name="edu.scripps.pms.census.plot.ChromatographPlot" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.RelExMainFrame)" class="edu.scripps.pms.census.plot.ChromatographPlot" />
	<method signature="void _drawPeak(java.awt.Graphics)" class="edu.scripps.pms.census.plot.ChromatographPlot" />
	<class name="edu.scripps.dtaselect.logic.PointList" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.PointList" />
	<method signature="float IntensitySum()" class="edu.scripps.dtaselect.logic.PointList" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.Point,edu.scripps.dtaselect.logic.Point,float,java.lang.String,int,int,java.lang.String,boolean)" class="edu.scripps.dtaselect.logic.PointList" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.PointList" />
	<class name="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="void setBestShift(int)" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="double getCorr()" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="double getAreaRatio()" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="void setCorr(double)" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="double getSlope()" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="void setAreaRatio(double)" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="void setSlope(double)" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="void setIntercept(double)" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="int getBestShift()" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="double getIntercept()" class="edu.scripps.pms.census.util.LinearRegression" />
	<method signature="void &lt;init&gt;(long[],long[],int,int,int)" class="edu.scripps.pms.census.util.LinearRegression" />
	<class name="scripts.DTASelectProtXMLConvert" />
	<method signature="void &lt;init&gt;()" class="scripts.DTASelectProtXMLConvert" />
	<method signature="void main(java.lang.String[])" class="scripts.DTASelectProtXMLConvert" />
	<class name="edu.scripps.pms.census.dialog.OpenConfigDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.dialog.OpenConfigDialog" />
	<method signature="void runLabeledAnalysis(edu.scripps.pms.census.ChroGenerator,edu.scripps.pms.census.conf.Configuration)" class="edu.scripps.pms.census.dialog.OpenConfigDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.dialog.OpenConfigDialog" />
	<method signature="void runLabeledAnalysis(edu.scripps.pms.census.ChroGenerator,edu.scripps.pms.census.ChroProgressDialog,edu.scripps.pms.census.conf.Configuration)" class="edu.scripps.pms.census.dialog.OpenConfigDialog" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.dialog.OpenConfigDialog" />
	<class name="edu.scripps.pms.census.Relex" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.Relex" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.Relex" />
	<class name="graph.com.microstar.xml.XmlException" />
	<method signature="java.lang.String stackTraceToString(java.lang.Throwable)" class="graph.com.microstar.xml.XmlException" />
	<method signature="int getLine()" class="graph.com.microstar.xml.XmlException" />
	<method signature="void printStackTrace(java.io.PrintStream)" class="graph.com.microstar.xml.XmlException" />
	<method signature="int getColumn()" class="graph.com.microstar.xml.XmlException" />
	<method signature="java.lang.String getSystemId()" class="graph.com.microstar.xml.XmlException" />
	<method signature="java.lang.Throwable getCause()" class="graph.com.microstar.xml.XmlException" />
	<method signature="java.lang.String getMessage()" class="graph.com.microstar.xml.XmlException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,int)" class="graph.com.microstar.xml.XmlException" />
	<method signature="void printStackTrace(java.io.PrintWriter)" class="graph.com.microstar.xml.XmlException" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,int,int,java.lang.Throwable)" class="graph.com.microstar.xml.XmlException" />
	<method signature="void printStackTrace()" class="graph.com.microstar.xml.XmlException" />
	<class name="edu.scripps.dtaselect.gui.utilities.TextAreaRenderer" />
	<method signature="java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)" class="edu.scripps.dtaselect.gui.utilities.TextAreaRenderer" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.utilities.TextAreaRenderer" />
	<class name="edu.scripps.pms.stats.TTest" />
	<method signature="double T_p(double,double)" class="edu.scripps.pms.stats.TTest" />
	<method signature="double T_z(double,double)" class="edu.scripps.pms.stats.TTest" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.stats.TTest" />
	<method signature="double Norm_p(double)" class="edu.scripps.pms.stats.TTest" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.stats.TTest" />
	<class name="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDoNotApplyAnyCriteria()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsSaveSequenceAlignmentReport()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsUseNewAccessoryPrograms(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsOutputExtraColumnsInDTASelectFilterTxtAndDBPeptidesTxtFiles(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsSaveChromatographyReport(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsSaveProteinSimilarityTable()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsSaveProteinSimilarityTable(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsExpectMascotOutputRatherThanSEQUEST(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsExpectMascotOutputRatherThanSEQUEST()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsPrintCommandsToCopySelectedIDs()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsReportThroughGUIInsteadOfOutputFiles()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDisplayPeptidePIInformation(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsSaveInFormatForDatabaseImport(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDisplayPeptidePIInformation()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDisplayHPLCIndexAdjustedForPH43Conditions()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsSaveChromatographyReport()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDoNotUseABackgroundGraphic()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsReportThroughGUIInsteadOfOutputFiles(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsSaveXMLReportOfFilteredResults()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsIncludeOnlyIDsInCurrentDirectory()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDisplayBirdsEyeViewOfProteins(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsSaveSequenceAlignmentReport(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsSaveModificationReport()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDisplayKyteDoolittleHydropathyScore()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDisplayHPLCIndexAdjustedForPH43Conditions(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsClassifyProteinsBySuppliedList()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsIncorporateProteinInfoFromAuxFile(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDoNotUseABackgroundGraphic(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsSaveInFormatForDatabaseImport()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDisplayBullBreeseHydrophobicityIndex()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void &lt;init&gt;(java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsUseNewAccessoryPrograms()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsClassifyProteinsBySuppliedList(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsSaveXMLReportOfFilteredResults(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDisplayDeltaMassInformation(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsOutputExtraColumnsInDTASelectFilterTxtAndDBPeptidesTxtFiles()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDisplayDeltaMassInformation()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsSaveModificationReport(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsCreateIDXAndSPMFilesFromSpectra(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsIncorporateProteinInfoFromAuxFile()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDisplayBullBreeseHydrophobicityIndex(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDoNotApplyAnyCriteria(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsDisplayKyteDoolittleHydropathyScore(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsPrintCommandsToCopySelectedIDs(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void setIsIncludeOnlyIDsInCurrentDirectory(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsCreateIDXAndSPMFilesFromSpectra()" class="edu.scripps.dtaselect.object.OUtilities" />
	<method signature="java.lang.Boolean getIsDisplayBirdsEyeViewOfProteins()" class="edu.scripps.dtaselect.object.OUtilities" />
	<class name="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.EditablePlot)" class="graph.ptolemy.plot.EditablePlot$EditMouseListener" />
	<class name="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="double getAvgMass()" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="double[] getMasslist()" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="double getEndMass()" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="double getStartMass()" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="double getEachAbund(int,int)" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="void &lt;init&gt;(int[])" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.isotope.IsotopeDist" />
	<class name="edu.scripps.pms.census.ExportNonlabelDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.ExportNonlabelDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.ExportNonlabelDialog" />
	<class name="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<method signature="boolean isPercent(int)" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<method signature="int getValue(edu.scripps.dtaselect.object.OProtein,int)" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<method signature="int getMaximum(java.util.Vector,int)" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<method signature="int getMinimum(java.util.Vector,int)" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<field name="sequenceCoverage" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<field name="proteinConfidence" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<field name="spectraCount" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<field name="pI" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<field name="sequenceCount" class="edu.scripps.dtaselect.object.ODisplayCriteria" />
	<class name="edu.scripps.pms.census.FileHash" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.FileHash" />
	<class name="Fisher" />
	<method signature="double calculateFisherTwoTail(int,int,int,int)" class="Fisher" />
	<method signature="void rightTailedFisherFromFile(java.lang.String,java.lang.String,java.lang.String)" class="Fisher" />
	<method signature="double calculateFisherRightTail(int,int,int,int)" class="Fisher" />
	<method signature="void main(java.lang.String[])" class="Fisher" />
	<method signature="double calculateFisherLeftTail(int,int,int,int)" class="Fisher" />
	<method signature="double rightTailedFisher(int,int,int,int)" class="Fisher" />
	<method signature="void &lt;init&gt;()" class="Fisher" />
	<method signature="double getFisherLeftTail()" class="Fisher" />
	<method signature="double calculateFisherTwoTail()" class="Fisher" />
	<method signature="double getFisherRightTail()" class="Fisher" />
	<class name="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="double getIntensity()" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="void setMz(double)" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="void &lt;init&gt;(double,double,boolean)" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="int compareTo(java.lang.Object)" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="int compareTo(edu.scripps.pms.census.chroalign.AlignPeak)" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="void setIntensity(double)" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="double getMz()" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="void setRefSpectrum(boolean)" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<method signature="boolean getRefSpectrum()" class="edu.scripps.pms.census.chroalign.AlignPeak" />
	<class name="edu.scripps.pms.census.util.DataDependentPeakFinder" />
	<method signature="void &lt;init&gt;(int[][],int,int,float)" class="edu.scripps.pms.census.util.DataDependentPeakFinder" />
	<method signature="void calc()" class="edu.scripps.pms.census.util.DataDependentPeakFinder" />
	<class name="ptolemy.gui.QueryListener" />
	<method signature="void changed(java.lang.String)" class="ptolemy.gui.QueryListener" />
	<class name="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="java.lang.String HappyName()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="boolean IsHidden(int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void AddToLocusSummary(edu.scripps.dtaselect.logic.LocusSummary,long)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="float RoundTo(float,int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="edu.scripps.dtaselect.logic.CoverageZone GetLocusCoverageZones(int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void SetColumnHeadings()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="java.lang.String TableHead(int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void ApplyCriteria()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void PrintModReport(edu.scripps.dtaselect.logic.IniFile,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void PrintAlignReport(edu.scripps.dtaselect.logic.IniFile,java.lang.String)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void CullLociNotOnList(edu.scripps.dtaselect.logic.DataSet)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void PrintOutput(java.lang.String,java.lang.String,edu.scripps.dtaselect.logic.IniFile,java.lang.String)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void PrintProteinSimilarity(java.lang.String)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void ReadFromFile(java.io.File)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void PrintTXT()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void StructureByClassification()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="int CountSets()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void SetLocusCursors(java.lang.String)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void LoadLociFromFile()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void SetLocusCoverage(int,java.lang.String,float)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="edu.scripps.dtaselect.logic.DataSet$Modification GiveModList(edu.scripps.dtaselect.logic.Protein)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="edu.scripps.dtaselect.logic.Protein GetLocusCursor(int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="java.lang.StringBuffer PullTopLocus()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void IncorporateAuxInfo()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void PrintReports(java.lang.String,edu.scripps.dtaselect.logic.IniFile,java.lang.String)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void SetLocusCoverageUndefined()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="java.lang.String GetLocusCursorXCorr(int,java.lang.String,byte)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="java.lang.String ShortName(int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="int LocusCount(int)" class="edu.scripps.dtaselect.logic.DataSet" />
	<method signature="int CurrentSeqLength()" class="edu.scripps.dtaselect.logic.DataSet" />
	<class name="graph.ptolemy.plot.PlotBox" />
	<method signature="double[] getXRange()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _setButtonsVisibility(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void write(java.io.OutputStream)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _setPadding(double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void removeLegend(int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void export(java.io.OutputStream)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getEndRange()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _measureFonts()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setYRange(double,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void writeOldSyntax(java.io.OutputStream)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="double _roundUp(double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getXLabel()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void init()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void horizontalSpacing(java.awt.Graphics)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setLabelFont(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="int print(java.awt.Graphics,java.awt.print.PageFormat,int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getDataurl()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setDocumentBase(java.net.URL)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage(java.awt.Rectangle)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.Color getColorByName(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.Dimension getMaximumSize()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setYLog(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void resetAxes()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void drawLegendPanel()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setYLabel(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="int _numFracDigits(double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setForeground(java.awt.Color)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _drawPoint(java.awt.Graphics,int,long,long,boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="double[] getYRange()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String _formatNum(double,int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setSize(int,int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="boolean _parseLine(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setBounds(int,int,int,int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void clearLegends()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _executeDeferredActions()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.util.Vector[] getXTicks()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="double _gridRoundUp(java.util.Vector,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setScanNum(int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setStartRange(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getYLabel()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getLegend(int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void write(java.io.OutputStream,java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void addXTick(java.lang.String,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getTitle()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage(java.awt.image.BufferedImage,java.awt.Rectangle,java.awt.RenderingHints,boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="boolean getYLog()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void parseFile(java.lang.String,java.net.URL)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void read(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void zoom(double,double,double,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _parsePairs(java.lang.String,boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.Dimension getMinimumSize()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void clear(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setButtons(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void paintComponent(java.awt.Graphics)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _help()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setTitle(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void write(java.io.Writer,java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setDataurl(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setColor(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String getStartRange()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setXLog(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void samplePlot()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.Dimension getPreferredSize()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setXLabel(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void fillPlot()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.RenderingHints _defaultImageRenderingHints()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="boolean getGrid()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="double _gridStep(java.util.Vector,double,double,boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void writeFormat(java.io.PrintWriter)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.util.Vector _gridInit(double,double,boolean,java.util.Vector)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.net.URL getDocumentBase()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setXRange(double,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void addLegend(int,java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="int _drawLegend(java.awt.Graphics,int,int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="int getScanNum()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void parseFile(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void deferIfNecessary(java.lang.Runnable)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.awt.image.BufferedImage exportImage(java.awt.image.BufferedImage)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void addYTick(java.lang.String,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setBackground(java.awt.Color)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setEndRange(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _writeOldSyntax(java.io.PrintWriter)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setWrap(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void read(java.io.InputStream)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.util.Vector[] getYTicks()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void writeData(java.io.PrintWriter)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setGrid(boolean)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="boolean getXLog()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="boolean getColor()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void setTitleFont(java.lang.String)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _setYRange(double,double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.PlotBox" />
	<method signature="java.lang.String _formatLogNum(double,int)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="int _numIntDigits(double)" class="graph.ptolemy.plot.PlotBox" />
	<method signature="void _setXRange(double,double)" class="graph.ptolemy.plot.PlotBox" />
	<field name="_gridBase" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xMin" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yticklabels" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yMin" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomxn" class="graph.ptolemy.plot.PlotBox" />
	<field name="_superscriptFont" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xtickMax" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xlabel" class="graph.ptolemy.plot.PlotBox" />
	<field name="_preferredHeight" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yscale" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yBottom" class="graph.ptolemy.plot.PlotBox" />
	<field name="_gridCurJuke" class="graph.ptolemy.plot.PlotBox" />
	<field name="PTPLOT_RELEASE" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yMax" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ytickscale" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yticks" class="graph.ptolemy.plot.PlotBox" />
	<field name="_drawn" class="graph.ptolemy.plot.PlotBox" />
	<field name="_formatButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_title" class="graph.ptolemy.plot.PlotBox" />
	<field name="screenMode" class="graph.ptolemy.plot.PlotBox" />
	<field name="_padding" class="graph.ptolemy.plot.PlotBox" />
	<field name="_resetButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xExp" class="graph.ptolemy.plot.PlotBox" />
	<field name="_titleFont" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xBottom" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xlog" class="graph.ptolemy.plot.PlotBox" />
	<field name="_superscriptFontMetrics" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xticks" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xlowgiven" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xtickscale" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ytickMax" class="graph.ptolemy.plot.PlotBox" />
	<field name="_filespec" class="graph.ptolemy.plot.PlotBox" />
	<field name="_printButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_height" class="graph.ptolemy.plot.PlotBox" />
	<field name="_legendDatasets" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xhighgiven" class="graph.ptolemy.plot.PlotBox" />
	<field name="_lry" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ylog" class="graph.ptolemy.plot.PlotBox" />
	<field name="_errorMsg" class="graph.ptolemy.plot.PlotBox" />
	<field name="_foreground" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yhighgiven" class="graph.ptolemy.plot.PlotBox" />
	<field name="_width" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xMax" class="graph.ptolemy.plot.PlotBox" />
	<field name="scanNum" class="graph.ptolemy.plot.PlotBox" />
	<field name="_DTD" class="graph.ptolemy.plot.PlotBox" />
	<field name="_wrapHigh" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomin" class="graph.ptolemy.plot.PlotBox" />
	<field name="_bottomPadding" class="graph.ptolemy.plot.PlotBox" />
	<field name="_actionsDeferred" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yRangeGiven" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ylowgiven" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_fillButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xtickMin" class="graph.ptolemy.plot.PlotBox" />
	<field name="_background" class="graph.ptolemy.plot.PlotBox" />
	<field name="_lrx" class="graph.ptolemy.plot.PlotBox" />
	<field name="toolPanel" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xTop" class="graph.ptolemy.plot.PlotBox" />
	<field name="_sizeHasBeenSet" class="graph.ptolemy.plot.PlotBox" />
	<field name="_preferredWidth" class="graph.ptolemy.plot.PlotBox" />
	<field name="_labelFont" class="graph.ptolemy.plot.PlotBox" />
	<field name="_wrapLow" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomx" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xscale" class="graph.ptolemy.plot.PlotBox" />
	<field name="_peakAreaButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_uly" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomy" class="graph.ptolemy.plot.PlotBox" />
	<field name="_colors" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xRangeGiven" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ytickMin" class="graph.ptolemy.plot.PlotBox" />
	<field name="startRange" class="graph.ptolemy.plot.PlotBox" />
	<field name="_leftPadding" class="graph.ptolemy.plot.PlotBox" />
	<field name="endRange" class="graph.ptolemy.plot.PlotBox" />
	<field name="_labelFontMetrics" class="graph.ptolemy.plot.PlotBox" />
	<field name="_usecolor" class="graph.ptolemy.plot.PlotBox" />
	<field name="_xticklabels" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yExp" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zooming" class="graph.ptolemy.plot.PlotBox" />
	<field name="_boxColor" class="graph.ptolemy.plot.PlotBox" />
	<field name="_topPadding" class="graph.ptolemy.plot.PlotBox" />
	<field name="_wrap" class="graph.ptolemy.plot.PlotBox" />
	<field name="_rightPadding" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomout" class="graph.ptolemy.plot.PlotBox" />
	<field name="_titleFontMetrics" class="graph.ptolemy.plot.PlotBox" />
	<field name="_panButton" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ylabel" class="graph.ptolemy.plot.PlotBox" />
	<field name="_deferredActions" class="graph.ptolemy.plot.PlotBox" />
	<field name="_rangesGivenByZooming" class="graph.ptolemy.plot.PlotBox" />
	<field name="_yTop" class="graph.ptolemy.plot.PlotBox" />
	<field name="_documentBase" class="graph.ptolemy.plot.PlotBox" />
	<field name="_ulx" class="graph.ptolemy.plot.PlotBox" />
	<field name="_LOG10SCALE" class="graph.ptolemy.plot.PlotBox" />
	<field name="_grid" class="graph.ptolemy.plot.PlotBox" />
	<field name="_legendStrings" class="graph.ptolemy.plot.PlotBox" />
	<field name="_zoomyn" class="graph.ptolemy.plot.PlotBox" />
	<class name="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setRefIntensity(long)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="double[] getYsStartMass()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setTandemData(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYsIntensity(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="double[] getBsStartMass()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="java.lang.String getBsIntensityString()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void &lt;init&gt;(int,long,long)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYsIntensityReverse(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYrIntensity(java.lang.String)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long[] getIntensityArr()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="int getScanNum()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="java.lang.String getBrIntensityString()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setBsIntensity(java.lang.String)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="double[] getYsEndMass()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long[] getYrIntensity()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYsStartMass(double[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long[] getYsIntensity()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setBsStartMass(double[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setBrIntensity(java.lang.String)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setScanNum(int)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYrIntensity(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="java.lang.String getYsIntensityString()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setFullScanData(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long[] getBsIntensity()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setSampleIntensity(long)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long getRefIntensity()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setBsEndMass(double[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYsEndMass(double[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long[] getBrIntensity()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="double[] getBsEndMass()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setBsIntensity(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="int getResidueLength()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="java.lang.String getYrIntensityString()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setIntensityArr(long[])" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="long getSampleIntensity()" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setYsIntensity(java.lang.String)" class="edu.scripps.pms.census.model.ChroData" />
	<method signature="void setBrIntensity(java.lang.String[])" class="edu.scripps.pms.census.model.ChroData" />
	<class name="graph.ptolemy.plot.PlotLive" />
	<method signature="void stop()" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void pause()" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void makeButtons()" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void addPoints()" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void start()" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void setButtons(boolean)" class="graph.ptolemy.plot.PlotLive" />
	<method signature="void run()" class="graph.ptolemy.plot.PlotLive" />
	<class name="edu.scripps.pms.census.plot.DataDependentPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.DataDependentPlot" />
	<method signature="void _drawPeak(java.awt.Graphics)" class="edu.scripps.pms.census.plot.DataDependentPlot" />
	<class name="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getMinimumModifiedPeptidesPerLocusCriterion()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setHighestProteinMolecularWeight(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setShowAllLociWithPeptidesThatAppearThisManyTimes(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setIncludeOnlyProteinsWithDescriptionIncludingThisWord(java.lang.String)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setIsIncludingProteinsThatAreSubsetsOfOthers(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void &lt;init&gt;(java.lang.Integer,java.lang.Float,java.lang.Float,java.lang.Integer,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Float,java.lang.Float,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Float,java.lang.Float,java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Integer getPurgeDuplicateSpectra()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getShowAllLociWithPeptidesThatAppearThisManyTimes()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setPurgeDuplicateSpectra(java.lang.Integer)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getMinimumPeptidesPerLocusCriterion()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setKeepProteins(java.lang.Integer)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setRemoveProteinsWithDescriptionsIncludingThisWord(java.lang.String)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.String getIncludeOnlyProteinsThatEndWithOneOfTheseResidues()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setIncludeOnlyProteinsWithIDsMatchingThisString(java.lang.String)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setLowestProteinMolecularWeight(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.String getIncludeOnlyProteinsWithDescriptionIncludingThisWord()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Integer getKeepProteins()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setIsIncludingOnlyLociWithUniquelyMatchingPeptides(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getLowestProteinConfidenceLevel()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.String getRemoveProteinsWithDescriptionsIncludingThisWord()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.String getIncludeOnlyProteinsThatStartWithOneOfTheseResidues()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Boolean getIsIncludingOnlyLociWithUniquelyMatchingPeptides()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setMinimumPeptidesPerLocusCriterion(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setMinimumModifiedPeptidesPerLocusCriterion(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setLowestProteinConfidenceLevel(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setRemoveProteinsWithIDsMatchingThisString(java.lang.String)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getHighestProteinMolecularWeight()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setIncludeOnlyProteinsThatStartWithOneOfTheseResidues(java.lang.String)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setIncludeOnlyProteinsThatEndWithOneOfTheseResidues(java.lang.String)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.String getRemoveProteinsWithIDsMatchingThisString()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.String getIncludeOnlyProteinsWithIDsMatchingThisString()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Boolean getIsIncludingProteinsThatAreSubsetsOfOthers()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getProteinFPRate()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="void setProteinFPRate(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<method signature="java.lang.Float getLowestProteinMolecularWeight()" class="edu.scripps.dtaselect.object.OLocusFilters" />
	<class name="edu.scripps.dtaselect.object.OColorChooser" />
	<method signature="void stateChanged(javax.swing.event.ChangeEvent)" class="edu.scripps.dtaselect.object.OColorChooser" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OColorChooser" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.object.OColorChooser" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.object.OColorChooser" />
	<field name="banner" class="edu.scripps.dtaselect.object.OColorChooser" />
	<field name="tcc" class="edu.scripps.dtaselect.object.OColorChooser" />
	<class name="edu.scripps.pms.census.util.DataIndependentPeakFinder" />
	<method signature="void &lt;init&gt;(long[],int,int)" class="edu.scripps.pms.census.util.DataIndependentPeakFinder" />
	<method signature="void calc()" class="edu.scripps.pms.census.util.DataIndependentPeakFinder" />
	<class name="edu.scripps.pms.census.chroalign.Elements" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.chroalign.Elements" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.chroalign.Elements" />
	<field name="index" class="edu.scripps.pms.census.chroalign.Elements" />
	<field name="score" class="edu.scripps.pms.census.chroalign.Elements" />
	<class name="edu.scripps.pms.util.io.BaseIdentificationReader" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.io.BaseIdentificationReader" />
	<method signature="double getConfidence()" class="edu.scripps.pms.util.io.BaseIdentificationReader" />
	<method signature="edu.scripps.pms.util.io.IdentificationReader getIdentificationInst(java.lang.String)" class="edu.scripps.pms.util.io.BaseIdentificationReader" />
	<method signature="boolean isVersion2()" class="edu.scripps.pms.util.io.BaseIdentificationReader" />
	<class name="scripts.ident_quant.PeptideRedundance" />
	<method signature="void &lt;init&gt;()" class="scripts.ident_quant.PeptideRedundance" />
	<method signature="void main(java.lang.String[])" class="scripts.ident_quant.PeptideRedundance" />
	<class name="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getValidation()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setPeptideList(java.util.List)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setLength(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String[] getProteinData()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getLocus()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setProteinLine(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setDescription(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getSeqCoverage()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.util.List getPeptideList()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getDescription()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getSeqCount()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setSpectrumCount(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setValidation(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="edu.scripps.pms.census.model.ChroProtein convertProtein(edu.scripps.pms.util.dtaselect.Protein)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String,java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getPI()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setPI(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getSpectrumCount()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setSeqCoverage(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getMolWt()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setLocus(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setMolWt(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="boolean isRedundant()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setSeqCount(java.lang.String)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getProteinLine()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="boolean addPeptide(edu.scripps.pms.census.model.ChroPeptide)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="void setRedundant(boolean)" class="edu.scripps.pms.census.model.ChroProtein" />
	<method signature="java.lang.String getLength()" class="edu.scripps.pms.census.model.ChroProtein" />
	<class name="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void _help()" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void _about()" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void main(java.lang.String[])" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="ptolemy.plot.plotml.PlotBoxMLParser _newParser()" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Histogram,java.lang.String[])" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="ptolemy.plot.plotml.HistogramMLApplication" />
	<class name="edu.scripps.dtaselect.gui.HeatmapPaneTab" />
	<method signature="edu.scripps.dtaselect.object.OHeatMap getHeatMap()" class="edu.scripps.dtaselect.gui.HeatmapPaneTab" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.HeatmapPaneTab" />
	<method signature="edu.scripps.dtaselect.gui.HeatmapPaneTab getInstance()" class="edu.scripps.dtaselect.gui.HeatmapPaneTab" />
	<class name="FFT" />
	<method signature="Complex[] convolve(Complex[],Complex[])" class="FFT" />
	<method signature="Complex[] cconvolve(Complex[],Complex[])" class="FFT" />
	<method signature="Complex[] ifft(Complex[])" class="FFT" />
	<method signature="void &lt;init&gt;()" class="FFT" />
	<method signature="Complex[] fft(Complex[])" class="FFT" />
	<method signature="void main(java.lang.String[])" class="FFT" />
	<class name="edu.scripps.pms.census.exception.PrecursorNotFoundException" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.exception.PrecursorNotFoundException" />
	<class name="ptolemy.plot.PlotPoint" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.PlotPoint" />
	<field name="errorBar" class="ptolemy.plot.PlotPoint" />
	<field name="originalx" class="ptolemy.plot.PlotPoint" />
	<field name="yLowEB" class="ptolemy.plot.PlotPoint" />
	<field name="connected" class="ptolemy.plot.PlotPoint" />
	<field name="y" class="ptolemy.plot.PlotPoint" />
	<field name="x" class="ptolemy.plot.PlotPoint" />
	<field name="yHighEB" class="ptolemy.plot.PlotPoint" />
	<class name="edu.scripps.dtaselect.object.OOptions" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="java.lang.Boolean getIsDefineDeltaMassWithRespectToMonoisotopicAverageMass()" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="java.lang.Boolean getIsDefineDeltaCNWithRespectToTheNextBestDifferentPeptide()" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="void setIsDefineDeltaCNWithRespectToTheSecondBestPeptide(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="java.lang.Boolean getIsDefineDeltaCNWithRespectToTheSecondBestPeptide()" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="void &lt;init&gt;(java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean)" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="java.lang.Boolean getIsDefineDeltaMassWithRespectToNearestIsotope()" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="void setIsDefineDeltaMassWithRespectToMonoisotopicAverageMass(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="void setIsDefineDeltaMassWithRespectToNearestIsotope(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OOptions" />
	<method signature="void setIsDefineDeltaCNWithRespectToTheNextBestDifferentPeptide(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OOptions" />
	<class name="edu.scripps.pms.census.exception.CensusGeneralException" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.exception.CensusGeneralException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.exception.CensusGeneralException" />
	<class name="edu.scripps.pms.census.jtest.ChroValidate" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.jtest.ChroValidate" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.jtest.ChroValidate" />
	<class name="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getMean()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getStandardDeviationFromDist(double[],double)" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getMin()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getSum()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getMax()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double t2z(double,double)" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getStandardDeviation(long[])" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="void enter(double)" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getStandardDeviation(double[])" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double zScore2PValue(double)" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getStandardDeviation()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="int[] getHistogram(double[],double,int)" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="void &lt;init&gt;(double[])" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="void enter(double[])" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="int getCount()" class="edu.scripps.pms.util.stat.StatCalc" />
	<method signature="double getTTestPValue(double,double)" class="edu.scripps.pms.util.stat.StatCalc" />
	<class name="ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Histogram)" class="ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void endElement(java.lang.String)" class="ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void _addPoint(boolean,java.lang.String)" class="ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void startElement(java.lang.String)" class="ptolemy.plot.plotml.HistogramMLParser" />
	<class name="ptolemy.plot.Render" />
	<method signature="void setXOffset(double)" class="ptolemy.plot.Render" />
	<method signature="void setYIncrement(double)" class="ptolemy.plot.Render" />
	<method signature="void clearData()" class="ptolemy.plot.Render" />
	<method signature="void setYOffset(double)" class="ptolemy.plot.Render" />
	<method signature="void addStripe(int[])" class="ptolemy.plot.Render" />
	<method signature="double getYOffset()" class="ptolemy.plot.Render" />
	<method signature="int[][] getColormap()" class="ptolemy.plot.Render" />
	<method signature="double getYIncrement()" class="ptolemy.plot.Render" />
	<method signature="void samplePlot()" class="ptolemy.plot.Render" />
	<method signature="double getXIncrement()" class="ptolemy.plot.Render" />
	<method signature="double getXOffset()" class="ptolemy.plot.Render" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean)" class="ptolemy.plot.Render" />
	<method signature="void setColormap(int[][])" class="ptolemy.plot.Render" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.Render" />
	<method signature="void setXIncrement(double)" class="ptolemy.plot.Render" />
	<class name="edu.scripps.dtaselect.object.ONotShownData" />
	<method signature="void setLabel(java.lang.String)" class="edu.scripps.dtaselect.object.ONotShownData" />
	<method signature="int getIonType()" class="edu.scripps.dtaselect.object.ONotShownData" />
	<method signature="void &lt;init&gt;(int,java.lang.String)" class="edu.scripps.dtaselect.object.ONotShownData" />
	<method signature="java.lang.String getLabel()" class="edu.scripps.dtaselect.object.ONotShownData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.ONotShownData" />
	<method signature="void setIonType(int)" class="edu.scripps.dtaselect.object.ONotShownData" />
	<class name="edu.scripps.dtaselect.logic.BirdsEye" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.logic.DataSet)" class="edu.scripps.dtaselect.logic.BirdsEye" />
	<class name="edu.scripps.pms.census.junit.ChroValidate" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.junit.ChroValidate" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.junit.ChroValidate" />
	<class name="scripts.Test1" />
	<method signature="void &lt;init&gt;()" class="scripts.Test1" />
	<method signature="void main(java.lang.String[])" class="scripts.Test1" />
	<class name="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="gnu.trove.TIntLongHashMap readMS2SimpleIndexFile()" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="gnu.trove.TIntLongHashMap readMS2IndexFile()" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="gnu.trove.TIntLongHashMap readMS1IndexFile()" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="void &lt;init&gt;(java.io.File,java.lang.String)" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="gnu.trove.TIntDoubleHashMap getPrecursorMap()" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<method signature="gnu.trove.TIntLongHashMap readIndexFile()" class="edu.scripps.pms.census.hash.MSIndexBuilder" />
	<class name="edu.scripps.pms.census.plot.PeptideDistPlot" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.RelExMainFrame)" class="edu.scripps.pms.census.plot.PeptideDistPlot" />
	<method signature="void addData(double,double)" class="edu.scripps.pms.census.plot.PeptideDistPlot" />
	<method signature="void clearData()" class="edu.scripps.pms.census.plot.PeptideDistPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.PeptideDistPlot" />
	<method signature="void drawAdditional(java.awt.Graphics)" class="edu.scripps.pms.census.plot.PeptideDistPlot" />
	<class name="edu.scripps.dtaselect.logic.IniFile" />
	<method signature="void Initialize()" class="edu.scripps.dtaselect.logic.IniFile" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.IniFile" />
	<class name="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getScanNum()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getFilePath()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setUnique(boolean)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setFileName(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setCalcMHplus(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void &lt;init&gt;(java.lang.String[],boolean)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setFilePath(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setConf(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getXCorr()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setScanNum(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getMhPlus()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getIonProportion()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setMhPlus(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setRedundancy(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getChargeState()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setTotalIntensity(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getDeltCN()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setSpScore(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getSpRank()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getRedundancy()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="boolean isUnique()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getCalcMHplus()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setXCorr(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setSequence(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setIonProportion(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setSpRank(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getTotalIntensity()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="void setDeltCN(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getLoScan()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getSpScore()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String getConf()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<method signature="java.lang.String[] getPeptideLine()" class="edu.scripps.pms.util.dtaselect.Peptide" />
	<class name="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Float getProtFP()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setValidationStatus(int)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setDTACount(java.lang.Integer)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setSeqCovStr(java.lang.String)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Float getCoverage()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setCoverage(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.String getSeqCovStr()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Float getProtConf()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setDescription(java.lang.String)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.String getDescription()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setSeqLength(java.lang.Integer)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.String getID()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Float getPI()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Integer getSeqLength()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setSpetrumCount(java.lang.Integer)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void &lt;init&gt;(int,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Float,java.lang.Integer,java.lang.Float,java.lang.Float,java.lang.Integer,java.lang.Float,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Integer getDTACount()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setID(java.lang.String)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Integer getMW()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="java.lang.Integer getSpetrumCount()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setProtConf(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setMW(java.lang.Integer)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setProtFP(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void setPI(java.lang.Float)" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OLocus" />
	<method signature="int getValidationStatus()" class="edu.scripps.dtaselect.object.OLocus" />
	<class name="graph.ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void keyTyped(java.awt.event.KeyEvent)" class="graph.ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void keyReleased(java.awt.event.KeyEvent)" class="graph.ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void keyPressed(java.awt.event.KeyEvent)" class="graph.ptolemy.plot.EditablePlot$UndoListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.EditablePlot)" class="graph.ptolemy.plot.EditablePlot$UndoListener" />
	<class name="edu.scripps.dtaselect.logic.gui.LStatisticsPanel" />
	<method signature="void parseInput()" class="edu.scripps.dtaselect.logic.gui.LStatisticsPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LStatisticsPanel" />
	<class name="edu.scripps.dtaselect.gui.BarChartTab" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.BarChartTab" />
	<method signature="edu.scripps.dtaselect.gui.BarChartTab getInstance()" class="edu.scripps.dtaselect.gui.BarChartTab" />
	<class name="MZXMLRead" />
	<method signature="void &lt;init&gt;()" class="MZXMLRead" />
	<method signature="byte[] floatTobyte(float)" class="MZXMLRead" />
	<method signature="void main(java.lang.String[])" class="MZXMLRead" />
	<class name="edu.scripps.pms.pepshow.MainTest" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.pepshow.MainTest" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox)" class="edu.scripps.pms.pepshow.MainTest" />
	<field name="_directory" class="edu.scripps.pms.pepshow.MainTest" />
	<field name="plot" class="edu.scripps.pms.pepshow.MainTest" />
	<field name="_file" class="edu.scripps.pms.pepshow.MainTest" />
	<class name="scripts.MergeTest" />
	<method signature="void &lt;init&gt;()" class="scripts.MergeTest" />
	<method signature="void main(java.lang.String[])" class="scripts.MergeTest" />
	<class name="edu.scripps.dtaselect.gui.MainFrame$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.MainFrame,javax.swing.Icon)" class="edu.scripps.dtaselect.gui.MainFrame$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.MainFrame,java.lang.String)" class="edu.scripps.dtaselect.gui.MainFrame$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.MainFrame,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.gui.MainFrame$ToolBarButton" />
	<class name="edu.scripps.pms.census.util.CensusHelper" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.CensusHelper" />
	<field name="scientificFormat" class="edu.scripps.pms.census.util.CensusHelper" />
	<field name="format" class="edu.scripps.pms.census.util.CensusHelper" />
	<class name="edu.scripps.pms.census.plot.IrisPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.IrisPlot" />
	<class name="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void itemStateChanged(java.awt.event.ItemEvent)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="edu.scripps.dtaselect.object.OSpectrumData getOnlySeqInterSelected(edu.scripps.dtaselect.object.OSpectrumData)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void setShownSpec(edu.scripps.dtaselect.logic.SpecView)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void drawSpectrum(edu.scripps.dtaselect.object.OSpectrumData)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="edu.scripps.dtaselect.object.OSpectrumData getOnlyPeaksOfSelectedIonTypes(edu.scripps.dtaselect.object.OSpectrumData)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void init()" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void &lt;init&gt;(java.lang.String,edu.scripps.dtaselect.logic.DTAFile,edu.scripps.dtaselect.logic.ParamsFile)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
	<class name="edu.scripps.pms.util.spectrum.Zline" />
	<method signature="float getM2z()" class="edu.scripps.pms.util.spectrum.Zline" />
	<method signature="void &lt;init&gt;(int,float)" class="edu.scripps.pms.util.spectrum.Zline" />
	<method signature="java.util.List getDlines()" class="edu.scripps.pms.util.spectrum.Zline" />
	<method signature="void addDline(java.lang.String)" class="edu.scripps.pms.util.spectrum.Zline" />
	<method signature="int getChargeState()" class="edu.scripps.pms.util.spectrum.Zline" />
	<method signature="void setM2z(float)" class="edu.scripps.pms.util.spectrum.Zline" />
	<class name="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="void setXcorr(double)" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="int getDtaEndRange()" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="void setDtaStartRange(int)" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="int getDtaStartRange()" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="double getXcorr()" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<method signature="void setDtaEndRange(int)" class="edu.scripps.pms.census.plot.QualFragPlot" />
	<class name="ptolemy.plot.Histogram" />
	<method signature="void setBinOffset(double)" class="ptolemy.plot.Histogram" />
	<method signature="void addLegend(int,java.lang.String)" class="ptolemy.plot.Histogram" />
	<method signature="void addPoint(int,double)" class="ptolemy.plot.Histogram" />
	<method signature="void clear(boolean)" class="ptolemy.plot.Histogram" />
	<method signature="void setBars(double,double)" class="ptolemy.plot.Histogram" />
	<method signature="void addPoint(int,double,double,boolean)" class="ptolemy.plot.Histogram" />
	<method signature="void _checkDatasetIndex(int)" class="ptolemy.plot.Histogram" />
	<method signature="void _drawBar(java.awt.Graphics,int,long,long,boolean)" class="ptolemy.plot.Histogram" />
	<method signature="void writeData(java.io.PrintWriter)" class="ptolemy.plot.Histogram" />
	<method signature="void samplePlot()" class="ptolemy.plot.Histogram" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean)" class="ptolemy.plot.Histogram" />
	<method signature="void fillPlot()" class="ptolemy.plot.Histogram" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.Histogram" />
	<method signature="boolean _parseLine(java.lang.String)" class="ptolemy.plot.Histogram" />
	<method signature="void writeFormat(java.io.PrintWriter)" class="ptolemy.plot.Histogram" />
	<method signature="void setBinWidth(double)" class="ptolemy.plot.Histogram" />
	<field name="_histogram" class="ptolemy.plot.Histogram" />
	<field name="_currentdataset" class="ptolemy.plot.Histogram" />
	<field name="_points" class="ptolemy.plot.Histogram" />
	<class name="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<method signature="void deleteRow(int)" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<method signature="void addDefaultRow()" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<method signature="void &lt;init&gt;(java.util.Vector)" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<method signature="boolean isCellEditable(int,int)" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<method signature="void addNewRow(java.util.Vector)" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<method signature="void copyRow(int)" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
	<class name="edu.scripps.pms.census.CensusConstants" />
	<field name="NONLABEL_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="MASS_ACCURACY" class="edu.scripps.pms.census.CensusConstants" />
	<field name="PEPTIDE_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="MSMS_SPECIFIC_SINGLE_MASS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="PROTON_MASS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="DATA_TYPE" class="edu.scripps.pms.census.CensusConstants" />
	<field name="WINDOW_MARGIN" class="edu.scripps.pms.census.CensusConstants" />
	<field name="RESOLUTION" class="edu.scripps.pms.census.CensusConstants" />
	<field name="START_RANGE" class="edu.scripps.pms.census.CensusConstants" />
	<field name="PROTEIN_MRM_FRAG_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="ENRICHMENT" class="edu.scripps.pms.census.CensusConstants" />
	<field name="NONLABEL_SUMMARY_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="PROTEIN_SIMPLE_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="MAX_WINDOW" class="edu.scripps.pms.census.CensusConstants" />
	<field name="PEPTIDE_LABEL_FREE_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="ISOLATION_WINDOW" class="edu.scripps.pms.census.CensusConstants" />
	<field name="MSMS_DATA_INDEPENDENT" class="edu.scripps.pms.census.CensusConstants" />
	<field name="SEARCH_OUTPUT" class="edu.scripps.pms.census.CensusConstants" />
	<field name="MSMS_SPECIFIC_MULTIPLE_MASS" class="edu.scripps.pms.census.CensusConstants" />
	<field name="ELEMENT_COMPOSITION_FILE" class="edu.scripps.pms.census.CensusConstants" />
	<field name="END_RANGE" class="edu.scripps.pms.census.CensusConstants" />
	<field name="PROTEIN_COLUMNS" class="edu.scripps.pms.census.CensusConstants" />
	<class name="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _saveAs()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _save()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _about()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _close()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _print()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void samplePlot()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _editFormat()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _open()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _help()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="graph.ptolemy.plot.PlotFrame" />
	<method signature="void _export()" class="graph.ptolemy.plot.PlotFrame" />
	<field name="_fileMenu" class="graph.ptolemy.plot.PlotFrame" />
	<field name="_directory" class="graph.ptolemy.plot.PlotFrame" />
	<field name="_specialMenu" class="graph.ptolemy.plot.PlotFrame" />
	<field name="_menubar" class="graph.ptolemy.plot.PlotFrame" />
	<field name="plot" class="graph.ptolemy.plot.PlotFrame" />
	<field name="_file" class="graph.ptolemy.plot.PlotFrame" />
	<field name="_editMenu" class="graph.ptolemy.plot.PlotFrame" />
	<class name="graph.ptolemy.plot.CmdLineArgException" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.CmdLineArgException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="graph.ptolemy.plot.CmdLineArgException" />
	<class name="edu.scripps.dtaselect.logic.gui.LConfigurationPaneTab" />
	<method signature="void fillTable()" class="edu.scripps.dtaselect.logic.gui.LConfigurationPaneTab" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LConfigurationPaneTab" />
	<class name="edu.scripps.pms.census.plot.HeatmapUtil" />
	<method signature="java.lang.String getHeatColor(double,double,double)" class="edu.scripps.pms.census.plot.HeatmapUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.HeatmapUtil" />
	<class name="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void &lt;init&gt;(java.util.Vector)" class="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="edu.scripps.dtaselect.object.OBarChart" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.object.OBarChart" />
	<class name="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _error(java.lang.String,java.lang.Exception)" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _error(java.lang.String)" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="java.awt.Component getContext()" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _warning(java.lang.String)" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _message(java.lang.String)" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _warning(java.lang.String,java.lang.Exception)" class="ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void setContext(java.awt.Component)" class="ptolemy.gui.GraphicalMessageHandler" />
	<field name="_context" class="ptolemy.gui.GraphicalMessageHandler" />
	<class name="edu.scripps.pms.util.PmsUtil" />
	<method signature="float ChargeAtPH(float,int,int,int,int,int,int,int)" class="edu.scripps.pms.util.PmsUtil" />
	<method signature="float PercentNegative(float,float)" class="edu.scripps.pms.util.PmsUtil" />
	<method signature="float RoundTo(float,int)" class="edu.scripps.pms.util.PmsUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.PmsUtil" />
	<method signature="float calcPi(java.lang.String)" class="edu.scripps.pms.util.PmsUtil" />
	<method signature="float PercentPositive(float,float)" class="edu.scripps.pms.util.PmsUtil" />
	<class name="graph.ptolemy.plot.Render" />
	<method signature="void setXOffset(double)" class="graph.ptolemy.plot.Render" />
	<method signature="void setYIncrement(double)" class="graph.ptolemy.plot.Render" />
	<method signature="void clearData()" class="graph.ptolemy.plot.Render" />
	<method signature="void setYOffset(double)" class="graph.ptolemy.plot.Render" />
	<method signature="void addStripe(int[])" class="graph.ptolemy.plot.Render" />
	<method signature="double getYOffset()" class="graph.ptolemy.plot.Render" />
	<method signature="int[][] getColormap()" class="graph.ptolemy.plot.Render" />
	<method signature="double getYIncrement()" class="graph.ptolemy.plot.Render" />
	<method signature="void samplePlot()" class="graph.ptolemy.plot.Render" />
	<method signature="double getXIncrement()" class="graph.ptolemy.plot.Render" />
	<method signature="double getXOffset()" class="graph.ptolemy.plot.Render" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean)" class="graph.ptolemy.plot.Render" />
	<method signature="void setColormap(int[][])" class="graph.ptolemy.plot.Render" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.Render" />
	<method signature="void setXIncrement(double)" class="graph.ptolemy.plot.Render" />
	<class name="edu.scripps.dtaselect.logic.Contrast" />
	<method signature="void Run()" class="edu.scripps.dtaselect.logic.Contrast" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.Contrast" />
	<method signature="void SubsetDatabase()" class="edu.scripps.dtaselect.logic.Contrast" />
	<method signature="void ReadContrastParams()" class="edu.scripps.dtaselect.logic.Contrast" />
	<method signature="void MergeDTASelects()" class="edu.scripps.dtaselect.logic.Contrast" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.logic.Contrast" />
	<class name="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void addScrollbar(java.awt.Scrollbar)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void setVisible(int,boolean)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="java.lang.String getSelectedPrimary()" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void addTuple(int,java.lang.String,boolean)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void clearTypes()" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="int getSelectionIndex()" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="int getSelectedType()" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void setSelectionByIndex(int)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void addContainer(java.awt.Component)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void addTupleType(int,java.awt.Color,boolean,java.lang.String,java.lang.String,boolean,int)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void clear()" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void scrollToNext(int,java.lang.String)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.dtaselect.logic.TupleTable" />
	<class name="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getValidation()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.util.Iterator getPeptides()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="boolean addPeptide(edu.scripps.pms.util.dtaselect.Peptide)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setLength(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getLocus()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setDescription(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getSeqCoverage()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.util.List getPeptideList()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getDescription()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getSeqCount()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setSpectrumCount(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setValidation(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setPeptideHt(java.util.Hashtable)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.util.Hashtable getPeptideHt()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void removePeptide(edu.scripps.pms.util.dtaselect.Peptide)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getPI()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setPI(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getSpectrumCount()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setSeqCoverage(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getMolWt()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setLocus(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setMolWt(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void setSeqCount(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void populatePeptideHt(java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="int addPeptideHt(java.util.Iterator,java.lang.String)" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getProteinLine()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="int getPeptideSize()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<method signature="java.lang.String getLength()" class="edu.scripps.pms.util.dtaselect.Protein" />
	<class name="edu.scripps.pms.census.tools.IsoDist" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.tools.IsoDist" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.tools.IsoDist" />
	<class name="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<method signature="java.lang.String getMassDifference()" class="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<method signature="java.lang.String getModifiedResidue()" class="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<method signature="void setMassDifference(java.lang.String)" class="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<method signature="void setModifiedResidue(java.lang.String)" class="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="edu.scripps.pms.util.dtaselect.ModPeptide" />
	<class name="edu.scripps.dtaselect.gui.ProteinOverviewPanel$NumberOfSamples" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.ProteinOverviewPanel)" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel$NumberOfSamples" />
	<class name="ptolemy.plot.Plot$MousePressListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Plot)" class="ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$MousePressListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$MousePressListener" />
	<class name="ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,ptolemy.plot.PlotBox)" class="ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void _about()" class="ptolemy.plot.plotml.PlotMLFrame" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="ptolemy.plot.plotml.PlotMLFrame" />
	<class name="edu.scripps.dtaselect.gui.DiagramColorChooser$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.DiagramColorChooser,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.gui.DiagramColorChooser$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.DiagramColorChooser,java.lang.String)" class="edu.scripps.dtaselect.gui.DiagramColorChooser$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.DiagramColorChooser,javax.swing.Icon)" class="edu.scripps.dtaselect.gui.DiagramColorChooser$ToolBarButton" />
	<class name="edu.scripps.dtaselect.logic.IDXFile" />
	<method signature="void AddSubdir(java.lang.String)" class="edu.scripps.dtaselect.logic.IDXFile" />
	<method signature="void WriteToDisk()" class="edu.scripps.dtaselect.logic.IDXFile" />
	<method signature="void PrintDir()" class="edu.scripps.dtaselect.logic.IDXFile" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.IDXFile" />
	<method signature="void AddDTAToIndex(short,short,short,long)" class="edu.scripps.dtaselect.logic.IDXFile" />
	<method signature="edu.scripps.dtaselect.logic.Spectrum GetSpectrum(java.lang.String,short,short)" class="edu.scripps.dtaselect.logic.IDXFile" />
	<class name="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _error(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _error(java.lang.String)" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="java.awt.Component getContext()" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _warning(java.lang.String)" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _message(java.lang.String)" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void _warning(java.lang.String,java.lang.Exception)" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<method signature="void setContext(java.awt.Component)" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<field name="_context" class="graph.ptolemy.gui.GraphicalMessageHandler" />
	<class name="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void _help()" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void _about()" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Histogram,java.lang.String[])" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="graph.ptolemy.plot.plotml.PlotBoxMLParser _newParser()" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void main(java.lang.String[])" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="graph.ptolemy.plot.plotml.HistogramMLApplication" />
	<class name="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void writeOutputFile(org.jdom.Element,java.lang.String)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void setTargetMS1Files(java.lang.String[])" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="java.lang.String getWorkFolder()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void setMasterFile(int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="org.jdom.Element createPathdata(org.jdom.Element,float[][][],java.lang.Object[],int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void genCostMatrix(edu.scripps.pms.util.io.SpectrumReader,edu.scripps.pms.util.io.SpectrumReader,int,int,int,boolean)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void setAlignType(boolean)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="boolean checkConstraint(int,int,int,int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void populateNoAlignDataArray(java.util.ArrayList,int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void writeOutputLine(java.lang.String,java.lang.StringBuffer,boolean)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="int getMasterFile()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="java.lang.String[] getTargetMS1Files()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="float euclidianDis(float,float)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="float[] getSpectrumInfo(float[])" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="java.lang.String getReferenceMS1File()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="float spectrumDis(float[],float[],float[],float[],boolean)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="edu.scripps.pms.util.spectrum.Peak basePeak(java.util.Iterator)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="int[][][] noAlignChro(edu.scripps.pms.census.ChroProgressDialog,java.lang.Object[],java.lang.Object[],java.lang.String)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void setWorkFolder(java.lang.String)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="int[][][] alignChro(edu.scripps.pms.census.ChroProgressDialog,java.lang.Object[],java.lang.Object[],int,boolean,int,java.lang.String)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="org.jdom.Element createChrodata(org.jdom.Element,float[][][],java.lang.Object[],int,boolean)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void setConstraint(int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void usage()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void populateDataArray(java.util.ArrayList,int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void setReferenceMS1File(java.lang.String)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="int getConstraint()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="boolean getAlignType()" class="edu.scripps.pms.census.chroalign.chroalign" />
	<method signature="void findPath(int,int,int,int)" class="edu.scripps.pms.census.chroalign.chroalign" />
	<class name="graph.ptolemy.plot.PlotBox$DragListener" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.PlotBox$DragListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$DragListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.PlotBox$DragListener" />
	<class name="FilterLowQualityChro" />
	<method signature="void &lt;init&gt;()" class="FilterLowQualityChro" />
	<method signature="void main(java.lang.String[])" class="FilterLowQualityChro" />
	<class name="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.AbstractPanel,int,java.lang.String)" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="void setFieldNumber(int)" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="java.lang.String getErrorMessage()" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="int getFieldNumber()" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="void setErrorMessage(java.lang.String)" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="void setPanel(edu.scripps.dtaselect.gui.AbstractPanel)" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<method signature="edu.scripps.dtaselect.gui.AbstractPanel getPanel()" class="edu.scripps.dtaselect.utilities.DTASelectNumberFormatException" />
	<class name="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="void setXcorr(double)" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.RelExMainFrame)" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="int getDtaEndRange()" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="void setDtaStartRange(int)" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="void drawDTASelect(java.awt.Graphics)" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="int getDtaStartRange()" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="double getXcorr()" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<method signature="void setDtaEndRange(int)" class="edu.scripps.pms.census.plot.BaseChroPlot" />
	<class name="graph.ptolemy.plot.EditListener" />
	<method signature="void editDataModified(graph.ptolemy.plot.EditablePlot,int)" class="graph.ptolemy.plot.EditListener" />
	<class name="ptolemy.plot.Plot$DragListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Plot)" class="ptolemy.plot.Plot$DragListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$DragListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot$DragListener" />
	<class name="edu.scripps.pms.util.io.FileReaderUtil" />
	<method signature="java.lang.String getSQTFile(java.lang.String)" class="edu.scripps.pms.util.io.FileReaderUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.io.FileReaderUtil" />
	<method signature="java.util.Iterator getAllFiles(java.lang.String)" class="edu.scripps.pms.util.io.FileReaderUtil" />
	<class name="edu.scripps.pms.census.model.FragIon" />
	<method signature="int compareTo(java.lang.Object)" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="int getIndex()" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="boolean isBion()" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="void setIndex(int)" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="long[] getRArr()" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="void setRArr(long[])" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="void &lt;init&gt;(int,long[],long[],double,boolean)" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="double getRegScore()" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="long[] getSArr()" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="void setRegScore(double)" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="void setIsBion(boolean)" class="edu.scripps.pms.census.model.FragIon" />
	<method signature="void setSArr(long[])" class="edu.scripps.pms.census.model.FragIon" />
	<class name="XMLRead64" />
	<method signature="void &lt;init&gt;()" class="XMLRead64" />
	<method signature="byte[] floatTobyte(float)" class="XMLRead64" />
	<method signature="void main(java.lang.String[])" class="XMLRead64" />
	<class name="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPlus3XCorr()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtHighestChargeState()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestDeltaCN()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPlus1XCorr()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtSequencesMustContainThisPattern()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtSequenceMustBeAtLeastThisLong()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtSequenceMustBeNoLongerThanThis()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtMaximumSpRanking()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtSequencesMustContainAllTheseCharacters()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestChargeState()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPlus2XCorr()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPlus4XCorr()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtCTerminalResidueMustBeOneOfThese()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtHighestPeptideMZ()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtSequencesMustNotContainAnyOfTheseResidues()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtHighestPPMDeltaMass()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtMinimumSpScore()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPeptideMZ()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtSequenceMustHaveThisManyCompleteEnds()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtPrecedingResidueMustBeOneOfThese()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPPMDeltaMass()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestProportionOfFragmentIonsObserved()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.SpecializedFiltersPanel" />
	<class name="graph.ptolemy.gui.StatusBar" />
	<method signature="void setBackground(java.awt.Color)" class="graph.ptolemy.gui.StatusBar" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.StatusBar" />
	<method signature="javax.swing.JProgressBar progressBar()" class="graph.ptolemy.gui.StatusBar" />
	<method signature="void setMessage(java.lang.String)" class="graph.ptolemy.gui.StatusBar" />
	<class name="edu.scripps.dtaselect.gui.AbstractPanel" />
	<method signature="void addErrors(java.lang.Exception)" class="edu.scripps.dtaselect.gui.AbstractPanel" />
	<method signature="void removeAllErrors()" class="edu.scripps.dtaselect.gui.AbstractPanel" />
	<method signature="void fillValues(java.util.Vector)" class="edu.scripps.dtaselect.gui.AbstractPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.AbstractPanel" />
	<field name="fields" class="edu.scripps.dtaselect.gui.AbstractPanel" />
	<class name="edu.scripps.pms.census.exception.CensusIndexOutOfBoundException" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.exception.CensusIndexOutOfBoundException" />
	<class name="edu.scripps.pms.util.sqt.MLine" />
	<method signature="double getDeltaCnValue()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="boolean addLLine(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setCalMZ(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setMatchedIons(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setXcorr(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getXcorrRank()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="boolean contains(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="double getSpValue()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setXcorrRank(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setSp(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getXcorr()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getMatchedIons()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="int getXcorrRankInt()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setStatus(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getDeltCN()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="int getPrimaryRankInt()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getSpRank()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getPredictedIons()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getMLine()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="boolean lLineStartsWith(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getSp()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="int getSpRankInt()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setMLine(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setSequence(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setPredictedIons(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getCalMZ()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.util.Iterator getLLine()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setDeltCN(float)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setSpRank(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getFirstLLine()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="void setDeltCN(java.lang.String)" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="java.lang.String getStatus()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="double getXcorrValue()" class="edu.scripps.pms.util.sqt.MLine" />
	<method signature="boolean isReverseHit()" class="edu.scripps.pms.util.sqt.MLine" />
	<class name="ptolemy.gui.StatusBar" />
	<method signature="void setBackground(java.awt.Color)" class="ptolemy.gui.StatusBar" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.StatusBar" />
	<method signature="javax.swing.JProgressBar progressBar()" class="ptolemy.gui.StatusBar" />
	<method signature="void setMessage(java.lang.String)" class="ptolemy.gui.StatusBar" />
	<class name="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Integer getPlotting()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsDeltaMassUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setPlotting(java.lang.Integer)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsDeltaCNNotUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsSpUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsDeltaCNNotUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsUseSeparateModelsForModifiedPeptides()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsIonProportionUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.String getTrueProteinsHaveIDsMatchingThisString()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsUseRawPrimaryScoreValuesNoNormalization(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsUseModelsForTrypticHalfTrypticNonTryptic(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsLogDeltaMassUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsLogDeltaMassUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsSpUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setTrueProteinsHaveIDsMatchingThisString(java.lang.String)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsXCorrNotUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsDoNotUseModelsForEachChargeState()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void &lt;init&gt;(java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.Integer)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsHideDecoyDatabaseHits()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.String getDatabaseProteinDecoyLabel()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsDoNotUseModelsForEachChargeState(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsLogSpRankUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsNoStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsUseRawPrimaryScoreValuesNoNormalization()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsNoStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsLogSpRankUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsUseModelsForTrypticHalfTrypticNonTryptic()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="java.lang.Boolean getIsIonProportionUsedForStatistics()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsHideDecoyDatabaseHits(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsDeltaMassUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsUseSeparateModelsForModifiedPeptides(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setDatabaseProteinDecoyLabel(java.lang.String)" class="edu.scripps.dtaselect.object.OStatistics" />
	<method signature="void setIsXCorrNotUsedForStatistics(java.lang.Boolean)" class="edu.scripps.dtaselect.object.OStatistics" />
	<class name="ptolemy.gui.CloseListener" />
	<method signature="void windowClosed(java.awt.Window,java.lang.String)" class="ptolemy.gui.CloseListener" />
	<class name="edu.scripps.pms.census.util.ChroUtil" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.ChroUtil" />
	<class name="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getCalcRefAvgMass()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setSteepRatioThreshold(float)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getNumFileSize()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setSpecCountNormal(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setAlign(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setFilePath(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getNumOfIsolationWindow()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.util.Hashtable getSpHt()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getMsmsFragType()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getEnrichment()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setStartMassRange(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getSpectrumFormat()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getQuantLevel()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setIdFileName(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setOutlierPValue(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getRunningTime()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="edu.scripps.pms.census.conf.Configuration getInstance()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setExpType(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setSimpleIndexGenerator(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setSteepArea(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getMassRange()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="edu.scripps.pms.census.model.NonLabelMappingModel getMapModel()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setChargeColumn(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getVersion()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getMsmsSpecificTolerance()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setSpHt(java.util.Hashtable)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getExpType()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="edu.scripps.pms.census.ChroProgressDialog getProgressDialog()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.util.List getMsmsMassArr()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getIsolationWindow()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getFilePath()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void readSimpleXml(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getIdFileName()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isSimpleIndexGenerator()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getEndMassRange()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setIsolationWindow(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.util.Set getNonlabelFilePaths()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMsmsFragType(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setRootConfEle(org.jdom.Element)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getPrecursor(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getSteepArea()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="org.jdom.Element getRootConfEle()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isChargeColumn()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setRefFileName(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setNonlabelFilePaths(java.util.Set)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setSpectrumFormat(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setEnrichment(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setNumFileSize(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getColNum()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMzXMLFilePath(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void addExp(edu.scripps.pms.census.conf.Configuration$Sample)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setXmlConf(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="float getSteepRatioThreshold()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMaxWindow(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isHighRes()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setExtMethod(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setRetArr(double[][])" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getRefFileName()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setResolution(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMassTolerance(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getErrorMessage()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getCalcSamAvgMass()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setEndMassRange(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setQuantLevel(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setVersion(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getMargin()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getMzXMLFilePath()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="long getStartTime()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setProgressDialog(edu.scripps.pms.census.ChroProgressDialog)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setCalcRefAvgMass(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMsmsSpectrumNum(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double[][] getRetArr()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setStartTime()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setIsHighRes(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getMassTolerance()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.lang.String getElementCompFile()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getResolution()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMapModel(edu.scripps.pms.census.model.NonLabelMappingModel)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMargin(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isAlign()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setLabeling(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setNonlabelFilenameList(java.util.List)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void readXMLParam(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setColNum(int)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setErrorMessage(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="java.util.List getNonlabelFilenameList()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getSpecCountNormal()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getMaxWindow()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setWindowArr(double[])" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void readParam(java.lang.String,java.lang.String)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setIsDataIndependent(boolean)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getOutlierPValue()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double[] getWindowArr()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double getStartMassRange()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMsmsSpecificTolerance(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setPrecursorArr(double[])" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isDataIndependent()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setCalcSamAvgMass(double)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isXmlConf()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void setMsmsMassArr(java.util.List)" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="boolean isLabeling()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getMsmsSpectrumNum()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="double[] getPrecursorArr()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="int getExtMethod()" class="edu.scripps.pms.census.conf.Configuration" />
	<method signature="void calculateWindowArr()" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="SPEC_COUNT_NO_NORMALIZATION" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="MSMS_SINGLE_SPECTRUM" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="HIGH_RES_THRESHOLD" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="AUTOMATIC_FRAGMENT_ION" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="MS_FILE_FORMAT" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="expType" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="SPEC_COUNT_NORMALIZATION1" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="MRM_PRECURSOR_TOLERANCE" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="MSMS_MULTIPLE_SPECTRA" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="MZXML_FILE_FORMAT" class="edu.scripps.pms.census.conf.Configuration" />
	<field name="SPECIFIC_FRAGMENT_ION" class="edu.scripps.pms.census.conf.Configuration" />
	<class name="ptolemy.gui.MessageHandler" />
	<method signature="void _error(java.lang.String)" class="ptolemy.gui.MessageHandler" />
	<method signature="void warning(java.lang.String)" class="ptolemy.gui.MessageHandler" />
	<method signature="void _warning(java.lang.String)" class="ptolemy.gui.MessageHandler" />
	<method signature="void setMessageHandler(ptolemy.gui.MessageHandler)" class="ptolemy.gui.MessageHandler" />
	<method signature="void _message(java.lang.String)" class="ptolemy.gui.MessageHandler" />
	<method signature="void _warning(java.lang.String,java.lang.Exception)" class="ptolemy.gui.MessageHandler" />
	<method signature="void _error(java.lang.String,java.lang.Exception)" class="ptolemy.gui.MessageHandler" />
	<method signature="void warning(java.lang.String,java.lang.Exception)" class="ptolemy.gui.MessageHandler" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.MessageHandler" />
	<method signature="ptolemy.gui.MessageHandler getMessageHandler()" class="ptolemy.gui.MessageHandler" />
	<method signature="void message(java.lang.String)" class="ptolemy.gui.MessageHandler" />
	<method signature="void error(java.lang.String)" class="ptolemy.gui.MessageHandler" />
	<method signature="void error(java.lang.String,java.lang.Exception)" class="ptolemy.gui.MessageHandler" />
	<class name="graph.ptolemy.plot.Plot" />
	<method signature="void clear(boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setBars(double,double)" class="graph.ptolemy.plot.Plot" />
	<method signature="void addPointWithErrorBars(int,double,double,int,java.lang.String,boolean,java.lang.String,boolean,double,double,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="graph.ptolemy.plot.Plot" />
	<method signature="int getMaxDataSets()" class="graph.ptolemy.plot.Plot" />
	<method signature="void labelClicked(java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setMarksStyle(java.lang.String)" class="graph.ptolemy.plot.Plot" />
	<method signature="boolean getConnected()" class="graph.ptolemy.plot.Plot" />
	<method signature="void addPoint(int,double,double,int,java.lang.String,boolean,java.lang.String,boolean,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="java.lang.String getMarksStyle()" class="graph.ptolemy.plot.Plot" />
	<method signature="void _zoom(int,int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setMarksStyle(java.lang.String,int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setConnected(boolean,int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setImpulses(boolean,int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawBar(java.awt.Graphics,int,long,long,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setReuseDatasets(boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void clear(int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void fillPlot()" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawErrorBar(java.awt.Graphics,int,long,long,long,java.lang.String,boolean,java.lang.String,boolean,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawImpulse(java.awt.Graphics,long,long,int,java.lang.String,boolean,java.lang.String,boolean,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void writeFormat(java.io.PrintWriter)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawLine(java.awt.Graphics,int,long,long,long,long,java.lang.String,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void addLegend(int,java.lang.String)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _selectEventRange(java.awt.Graphics2D,int,int,java.awt.event.MouseEvent)" class="graph.ptolemy.plot.Plot" />
	<method signature="void drawLegendPanel()" class="graph.ptolemy.plot.Plot" />
	<method signature="void _checkDatasetIndex(int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void draw()" class="graph.ptolemy.plot.Plot" />
	<method signature="void setConnected(boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawPlotPoint(java.awt.Graphics,int,int,java.lang.String,boolean,java.lang.String,boolean,int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void erasePoint(int,int,int,java.lang.String,boolean,java.lang.String,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="boolean getImpulses()" class="graph.ptolemy.plot.Plot" />
	<method signature="void _writeOldSyntax(java.io.PrintWriter)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setSpetrumData(edu.scripps.dtaselect.object.OSpectrumData)" class="graph.ptolemy.plot.Plot" />
	<method signature="int getNumDataSets()" class="graph.ptolemy.plot.Plot" />
	<method signature="void setImpulses(boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void read(java.io.InputStream)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setPointsPersistence(int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setNumSets(int)" class="graph.ptolemy.plot.Plot" />
	<method signature="void writeData(java.io.PrintWriter)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setBars(boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawPeak(java.awt.Graphics)" class="graph.ptolemy.plot.Plot" />
	<method signature="void _drawPoint(java.awt.Graphics,int,long,long,boolean,java.lang.String,boolean,boolean)" class="graph.ptolemy.plot.Plot" />
	<method signature="void setXPersistence(double)" class="graph.ptolemy.plot.Plot" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.Plot" />
	<method signature="void parseFile(java.lang.String,java.net.URL)" class="graph.ptolemy.plot.Plot" />
	<field name="highestX" class="graph.ptolemy.plot.Plot" />
	<field name="_showing" class="graph.ptolemy.plot.Plot" />
	<field name="xValueSet" class="graph.ptolemy.plot.Plot" />
	<field name="line" class="graph.ptolemy.plot.Plot" />
	<field name="_marks" class="graph.ptolemy.plot.Plot" />
	<field name="graphics" class="graph.ptolemy.plot.Plot" />
	<field name="_currentdataset" class="graph.ptolemy.plot.Plot" />
	<field name="rectVec" class="graph.ptolemy.plot.Plot" />
	<field name="_points" class="graph.ptolemy.plot.Plot" />
	<field name="_seqInterpretation" class="graph.ptolemy.plot.Plot" />
	<class name="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="void &lt;init&gt;(long[])" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="int getStart()" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="double sgWeight(int,int,int,int,int)" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="int[] smoothCurve(int[])" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="int sgGenFact(int,int)" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="void calc()" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="double sgGramPoly(int,int,int,int)" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="int getEnd()" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="void smoothCurve()" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<method signature="long[] getSmoothArr()" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="NUM_POINT" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="smoothArr" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="weightArr" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="DERIVATIVE_ORDER" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="start" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="end" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="arr" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="POLYNOMIAL_ORDER" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="size" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="AVG_THRESHOLD" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<field name="WIDTH" class="edu.scripps.pms.census.util.BasePeakFinder" />
	<class name="edu.scripps.pms.census.plot.chroGUI" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.chroGUI" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.plot.chroGUI" />
	<class name="edu.scripps.pms.census.plot.SigNoisePlot" />
	<method signature="void &lt;init&gt;(int,int,edu.scripps.pms.census.model.FragIonList,int)" class="edu.scripps.pms.census.plot.SigNoisePlot" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.pms.census.plot.SigNoisePlot" />
	<class name="ptolemy.plot.PlotLive" />
	<method signature="void stop()" class="ptolemy.plot.PlotLive" />
	<method signature="void pause()" class="ptolemy.plot.PlotLive" />
	<method signature="void makeButtons()" class="ptolemy.plot.PlotLive" />
	<method signature="void addPoints()" class="ptolemy.plot.PlotLive" />
	<method signature="void start()" class="ptolemy.plot.PlotLive" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.PlotLive" />
	<method signature="void setButtons(boolean)" class="ptolemy.plot.PlotLive" />
	<method signature="void run()" class="ptolemy.plot.PlotLive" />
	<class name="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="void setResidues(java.lang.String)" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="char getSymbol()" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="void setMass(float)" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="void &lt;init&gt;(char,java.lang.String,float)" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="java.lang.String getResidues()" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="float getMass()" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<method signature="void setSymbol(char)" class="edu.scripps.dtaselect.object.OModificationLegend" />
	<class name="edu.scripps.pms.census.junit.IndexTest" />
	<method signature="java.util.Iterator getAllFiles(java.lang.String)" class="edu.scripps.pms.census.junit.IndexTest" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.junit.IndexTest" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.junit.IndexTest" />
	<class name="edu.scripps.pms.util.dtaselect.ModResidue" />
	<method signature="void setMassShift(double)" class="edu.scripps.pms.util.dtaselect.ModResidue" />
	<method signature="char getResidue()" class="edu.scripps.pms.util.dtaselect.ModResidue" />
	<method signature="void &lt;init&gt;(char,double)" class="edu.scripps.pms.util.dtaselect.ModResidue" />
	<method signature="void setResidue(char)" class="edu.scripps.pms.util.dtaselect.ModResidue" />
	<method signature="double getMassShift()" class="edu.scripps.pms.util.dtaselect.ModResidue" />
	<class name="edu.scripps.pms.census.LabelFreeDataSetDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.LabelFreeDataSetDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean,javax.swing.JDialog)" class="edu.scripps.pms.census.LabelFreeDataSetDialog" />
	<method signature="void updateDialog(edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel)" class="edu.scripps.pms.census.LabelFreeDataSetDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.LabelFreeDataSetDialog" />
	<class name="ptolemy.plot.PlotFrame" />
	<method signature="void _saveAs()" class="ptolemy.plot.PlotFrame" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="ptolemy.plot.PlotFrame" />
	<method signature="void _save()" class="ptolemy.plot.PlotFrame" />
	<method signature="void _about()" class="ptolemy.plot.PlotFrame" />
	<method signature="void _close()" class="ptolemy.plot.PlotFrame" />
	<method signature="void _print()" class="ptolemy.plot.PlotFrame" />
	<method signature="void samplePlot()" class="ptolemy.plot.PlotFrame" />
	<method signature="void _editFormat()" class="ptolemy.plot.PlotFrame" />
	<method signature="void &lt;init&gt;(java.lang.String,ptolemy.plot.PlotBox)" class="ptolemy.plot.PlotFrame" />
	<method signature="void _open()" class="ptolemy.plot.PlotFrame" />
	<method signature="void _help()" class="ptolemy.plot.PlotFrame" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.PlotFrame" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="ptolemy.plot.PlotFrame" />
	<method signature="void _export()" class="ptolemy.plot.PlotFrame" />
	<field name="_fileMenu" class="ptolemy.plot.PlotFrame" />
	<field name="_directory" class="ptolemy.plot.PlotFrame" />
	<field name="_specialMenu" class="ptolemy.plot.PlotFrame" />
	<field name="_menubar" class="ptolemy.plot.PlotFrame" />
	<field name="plot" class="ptolemy.plot.PlotFrame" />
	<field name="_file" class="ptolemy.plot.PlotFrame" />
	<field name="_editMenu" class="ptolemy.plot.PlotFrame" />
	<class name="graph.ptolemy.gui.QueryListener" />
	<method signature="void changed(java.lang.String)" class="graph.ptolemy.gui.QueryListener" />
	<class name="edu.scripps.dtaselect.logic.gui.LSpecializedFiltersPanel" />
	<method signature="void parseInput()" class="edu.scripps.dtaselect.logic.gui.LSpecializedFiltersPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LSpecializedFiltersPanel" />
	<class name="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="double getRegFactor()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="java.lang.String getPeptideLine()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setUnique(boolean)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setFileName(java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setSamIntensity(double)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="double getSamIntensity()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setRegFactor(double)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setUniqueIdentifier(java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="double getRefIntensity()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.model.MergeProteinModel,boolean,java.lang.String,double,double,double,double,java.lang.String,java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="double getProbability()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void &lt;init&gt;(edu.scripps.pms.census.model.MergeProteinModel,boolean,java.lang.String,double,double,double,double,java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setPeptideLine(java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setFilterOut(boolean)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setRefIntensity(double)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="boolean isUnique()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="java.lang.String getSequence()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="java.lang.String getNoModSequence()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setProbability(double)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setRatio(double)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="void setSequence(java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="double getRatio()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="java.lang.String getUniqueIdentifier()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<method signature="boolean isFilterOut()" class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" />
	<class name="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<method signature="int getValidationId(java.lang.String)" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<method signature="java.lang.String getValidationName(int)" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<field name="no" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<field name="unvalidated" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<field name="yes" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<field name="maybe" class="edu.scripps.dtaselect.object.OLocus$ValidationStatusType" />
	<class name="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getPublicId()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getType(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getSystemId()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void setEntityResolver(org.xml.sax.EntityResolver)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="int getColumnNumber()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void endDocument()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void setErrorHandler(org.xml.sax.ErrorHandler)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getValue(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void startDocument()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void setLocale(java.util.Locale)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void startElement(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getType(int)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void setDocumentHandler(org.xml.sax.DocumentHandler)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void parse(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getValue(int)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="int getLineNumber()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void parse(org.xml.sax.InputSource)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void startExternalEntity(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="int getLength()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void &lt;init&gt;()" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="java.lang.String getName(int)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void charData(char[],int,int)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void endElement(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void endExternalEntity(java.lang.String)" class="com.microstar.xml.driver.SAXDriver" />
	<method signature="void setDTDHandler(org.xml.sax.DTDHandler)" class="com.microstar.xml.driver.SAXDriver" />
	<class name="ptolemy.plot.compat.PxgraphParser" />
	<method signature="int parsePxgraphargs(java.lang.String,java.net.URL)" class="ptolemy.plot.compat.PxgraphParser" />
	<method signature="void read(java.io.InputStream)" class="ptolemy.plot.compat.PxgraphParser" />
	<method signature="void &lt;init&gt;(ptolemy.plot.Plot)" class="ptolemy.plot.compat.PxgraphParser" />
	<method signature="int parseArgs(java.lang.String[])" class="ptolemy.plot.compat.PxgraphParser" />
	<method signature="int parseArgs(java.lang.String[],java.net.URL)" class="ptolemy.plot.compat.PxgraphParser" />
	<field name="_currentdataset" class="ptolemy.plot.compat.PxgraphParser" />
	<field name="_plot" class="ptolemy.plot.compat.PxgraphParser" />
	<class name="edu.scripps.pms.util.AppProperties" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.AppProperties" />
	<class name="edu.scripps.pms.util.isotope.ElementComposition" />
	<method signature="void &lt;init&gt;(java.lang.String,edu.scripps.pms.util.isotope.IsotopeTable)" class="edu.scripps.pms.util.isotope.ElementComposition" />
	<method signature="int[] getElementRefArr()" class="edu.scripps.pms.util.isotope.ElementComposition" />
	<method signature="void &lt;init&gt;(char[],int,int,edu.scripps.pms.util.isotope.IsotopeTable)" class="edu.scripps.pms.util.isotope.ElementComposition" />
	<method signature="void calculateBion()" class="edu.scripps.pms.util.isotope.ElementComposition" />
	<method signature="int[] getElementSampleArr()" class="edu.scripps.pms.util.isotope.ElementComposition" />
	<class name="com.microstar.xml.HandlerBase" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="com.microstar.xml.HandlerBase" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<method signature="void processingInstruction(java.lang.String,java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<method signature="void endDocument()" class="com.microstar.xml.HandlerBase" />
	<method signature="void ignorableWhitespace(char[],int,int)" class="com.microstar.xml.HandlerBase" />
	<method signature="void startExternalEntity(java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<method signature="void doctypeDecl(java.lang.String,java.lang.String,java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="com.microstar.xml.HandlerBase" />
	<method signature="void &lt;init&gt;()" class="com.microstar.xml.HandlerBase" />
	<method signature="void charData(char[],int,int)" class="com.microstar.xml.HandlerBase" />
	<method signature="void endElement(java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<method signature="void endExternalEntity(java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<method signature="void startDocument()" class="com.microstar.xml.HandlerBase" />
	<method signature="void startElement(java.lang.String)" class="com.microstar.xml.HandlerBase" />
	<class name="edu.scripps.pms.census.MergeDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.MergeDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.MergeDialog" />
	<class name="ptolemy.plot.Plot" />
	<method signature="void clear(boolean)" class="ptolemy.plot.Plot" />
	<method signature="void setBars(double,double)" class="ptolemy.plot.Plot" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean,java.awt.Rectangle)" class="ptolemy.plot.Plot" />
	<method signature="java.util.ArrayList getGrayOutList()" class="ptolemy.plot.Plot" />
	<method signature="int getMaxDataSets()" class="ptolemy.plot.Plot" />
	<method signature="void labelClicked(java.awt.event.MouseEvent)" class="ptolemy.plot.Plot" />
	<method signature="void setMarksStyle(java.lang.String)" class="ptolemy.plot.Plot" />
	<method signature="boolean getConnected()" class="ptolemy.plot.Plot" />
	<method signature="java.lang.String getMarksStyle()" class="ptolemy.plot.Plot" />
	<method signature="void _zoom(int,int)" class="ptolemy.plot.Plot" />
	<method signature="void setMarksStyle(java.lang.String,int)" class="ptolemy.plot.Plot" />
	<method signature="void setConnected(boolean,int)" class="ptolemy.plot.Plot" />
	<method signature="void setImpulses(boolean,int)" class="ptolemy.plot.Plot" />
	<method signature="void _drawBar(java.awt.Graphics,int,long,long,boolean)" class="ptolemy.plot.Plot" />
	<method signature="void setReuseDatasets(boolean)" class="ptolemy.plot.Plot" />
	<method signature="void clear(int)" class="ptolemy.plot.Plot" />
	<method signature="void fillPlot()" class="ptolemy.plot.Plot" />
	<method signature="void writeFormat(java.io.PrintWriter)" class="ptolemy.plot.Plot" />
	<method signature="void _drawErrorBar(java.awt.Graphics,int,long,long,long,boolean)" class="ptolemy.plot.Plot" />
	<method signature="void _drawLine(java.awt.Graphics,int,long,long,long,long,boolean)" class="ptolemy.plot.Plot" />
	<method signature="void addLegend(int,java.lang.String)" class="ptolemy.plot.Plot" />
	<method signature="void _drawPlotPoint(java.awt.Graphics,int,int)" class="ptolemy.plot.Plot" />
	<method signature="void _selectEventRange(java.awt.Graphics2D,int,int,java.awt.event.MouseEvent)" class="ptolemy.plot.Plot" />
	<method signature="void drawLegendPanel()" class="ptolemy.plot.Plot" />
	<method signature="void addPoint(int,double,double,boolean)" class="ptolemy.plot.Plot" />
	<method signature="void _checkDatasetIndex(int)" class="ptolemy.plot.Plot" />
	<method signature="void setConnected(boolean)" class="ptolemy.plot.Plot" />
	<method signature="void _drawPoint(java.awt.Graphics,int,long,long,boolean)" class="ptolemy.plot.Plot" />
	<method signature="boolean getImpulses()" class="ptolemy.plot.Plot" />
	<method signature="void _drawImpulse(java.awt.Graphics,long,long,boolean)" class="ptolemy.plot.Plot" />
	<method signature="void _writeOldSyntax(java.io.PrintWriter)" class="ptolemy.plot.Plot" />
	<method signature="int getNumDataSets()" class="ptolemy.plot.Plot" />
	<method signature="void setImpulses(boolean)" class="ptolemy.plot.Plot" />
	<method signature="void read(java.io.InputStream)" class="ptolemy.plot.Plot" />
	<method signature="void addPointWithErrorBars(int,double,double,double,double,boolean)" class="ptolemy.plot.Plot" />
	<method signature="void setPointsPersistence(int)" class="ptolemy.plot.Plot" />
	<method signature="void setNumSets(int)" class="ptolemy.plot.Plot" />
	<method signature="void drawAdditional(java.awt.Graphics)" class="ptolemy.plot.Plot" />
	<method signature="void writeData(java.io.PrintWriter)" class="ptolemy.plot.Plot" />
	<method signature="void setBars(boolean)" class="ptolemy.plot.Plot" />
	<method signature="void _drawPeak(java.awt.Graphics)" class="ptolemy.plot.Plot" />
	<method signature="void setXPersistence(double)" class="ptolemy.plot.Plot" />
	<method signature="void setGrayOutList(java.util.ArrayList)" class="ptolemy.plot.Plot" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.Plot" />
	<method signature="void erasePoint(int,int)" class="ptolemy.plot.Plot" />
	<method signature="void parseFile(java.lang.String,java.net.URL)" class="ptolemy.plot.Plot" />
	<field name="_showing" class="ptolemy.plot.Plot" />
	<field name="xValueSet" class="ptolemy.plot.Plot" />
	<field name="_marks" class="ptolemy.plot.Plot" />
	<field name="line" class="ptolemy.plot.Plot" />
	<field name="_currentdataset" class="ptolemy.plot.Plot" />
	<field name="rectVec" class="ptolemy.plot.Plot" />
	<field name="_points" class="ptolemy.plot.Plot" />
	<class name="edu.scripps.pms.util.io.IdentificationReader" />
	<method signature="java.util.Iterator getProteins()" class="edu.scripps.pms.util.io.IdentificationReader" />
	<method signature="java.lang.String getFileName()" class="edu.scripps.pms.util.io.IdentificationReader" />
	<method signature="double getConfidence()" class="edu.scripps.pms.util.io.IdentificationReader" />
	<method signature="boolean isVersion2()" class="edu.scripps.pms.util.io.IdentificationReader" />
	<method signature="int getTotalPeptideNumber()" class="edu.scripps.pms.util.io.IdentificationReader" />
	<class name="edu.scripps.pms.util.dtaselect.ModList" />
	<method signature="gnu.trove.TIntDoubleHashMap getMap()" class="edu.scripps.pms.util.dtaselect.ModList" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.dtaselect.ModList" />
	<method signature="void &lt;init&gt;(java.lang.String,char,double)" class="edu.scripps.pms.util.dtaselect.ModList" />
	<class name="graph.ptolemy.gui.GUIStringUtilities" />
	<method signature="java.lang.String abbreviate(java.lang.String)" class="graph.ptolemy.gui.GUIStringUtilities" />
	<method signature="java.lang.String[] tokenizeForExec(java.lang.String)" class="graph.ptolemy.gui.GUIStringUtilities" />
	<method signature="java.lang.String split(java.lang.String)" class="graph.ptolemy.gui.GUIStringUtilities" />
	<class name="edu.scripps.pms.util.ByteArrayConverter" />
	<method signature="int getUnsignedShort(byte[],int)" class="edu.scripps.pms.util.ByteArrayConverter" />
	<method signature="int getInt(byte[],int)" class="edu.scripps.pms.util.ByteArrayConverter" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.ByteArrayConverter" />
	<method signature="long unsignedIntToLong(byte[])" class="edu.scripps.pms.util.ByteArrayConverter" />
	<method signature="int unsignedShortToInt(byte[])" class="edu.scripps.pms.util.ByteArrayConverter" />
	<class name="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void update()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="int getDisplayCriteria()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setTxtMin(javax.swing.JTextField)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setTxtNrOfSlices(javax.swing.JTextField)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="boolean isUsersColorsSet()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="javax.swing.JTextField getTxtProteinsShown()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel getInstance(int)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void fillValues(java.util.Vector)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="javax.swing.JRadioButton getRbGradientShading()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="javax.swing.JRadioButton getRbRangeShading()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="int getProteinOverviewMenuWidth()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="javax.swing.JTextField getTxtMax()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="javax.swing.JTextField getTxtNrOfSlices()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setTxtProteinsShown(javax.swing.JTextField)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setUsersColorsSet(boolean)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setDisplayCriteria(int)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel getInstance()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="edu.scripps.dtaselect.object.OColorLegend getColorLegend()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="javax.swing.JTextField getTxtMin()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setColorLegendToMaxMin()" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<method signature="void setTxtMax(javax.swing.JTextField)" class="edu.scripps.dtaselect.gui.ProteinOverviewMenuPanel" />
	<class name="ptolemy.gui.Top" />
	<method signature="void _read(java.net.URL)" class="ptolemy.gui.Top" />
	<method signature="void _about()" class="ptolemy.gui.Top" />
	<method signature="java.lang.String getLastOverallURL()" class="ptolemy.gui.Top" />
	<method signature="boolean _save()" class="ptolemy.gui.Top" />
	<method signature="void _print()" class="ptolemy.gui.Top" />
	<method signature="java.lang.String _getName()" class="ptolemy.gui.Top" />
	<method signature="void centerOnScreen()" class="ptolemy.gui.Top" />
	<method signature="boolean isModified()" class="ptolemy.gui.Top" />
	<method signature="void report(java.lang.String,java.lang.Exception)" class="ptolemy.gui.Top" />
	<method signature="void _help()" class="ptolemy.gui.Top" />
	<method signature="void setBackground(java.awt.Color)" class="ptolemy.gui.Top" />
	<method signature="boolean _saveAs()" class="ptolemy.gui.Top" />
	<method signature="void _addMenus()" class="ptolemy.gui.Top" />
	<method signature="boolean _clear()" class="ptolemy.gui.Top" />
	<method signature="void setModified(boolean)" class="ptolemy.gui.Top" />
	<method signature="void report(java.lang.Exception)" class="ptolemy.gui.Top" />
	<method signature="void setLastOverallURL(java.lang.String)" class="ptolemy.gui.Top" />
	<method signature="void report(java.lang.String)" class="ptolemy.gui.Top" />
	<method signature="void _exit()" class="ptolemy.gui.Top" />
	<method signature="void _open()" class="ptolemy.gui.Top" />
	<method signature="void _openURL()" class="ptolemy.gui.Top" />
	<method signature="void pack()" class="ptolemy.gui.Top" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.Top" />
	<method signature="void _writeFile(java.io.File)" class="ptolemy.gui.Top" />
	<method signature="boolean _close()" class="ptolemy.gui.Top" />
	<field name="_fileMenu" class="ptolemy.gui.Top" />
	<field name="_fileFilter" class="ptolemy.gui.Top" />
	<field name="_statusBar" class="ptolemy.gui.Top" />
	<field name="_helpMenuItems" class="ptolemy.gui.Top" />
	<field name="_helpMenu" class="ptolemy.gui.Top" />
	<field name="_directory" class="ptolemy.gui.Top" />
	<field name="_fileMenuItems" class="ptolemy.gui.Top" />
	<field name="_menubar" class="ptolemy.gui.Top" />
	<class name="edu.scripps.pms.census.junit.CensusUnitTest" />
	<method signature="junit.framework.Test suite()" class="edu.scripps.pms.census.junit.CensusUnitTest" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.junit.CensusUnitTest" />
	<class name="ptolemy.plot.EditablePlot$ModifyListener" />
	<method signature="void mouseMoved(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$ModifyListener" />
	<method signature="void mouseDragged(java.awt.event.MouseEvent)" class="ptolemy.plot.EditablePlot$ModifyListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.EditablePlot)" class="ptolemy.plot.EditablePlot$ModifyListener" />
	<class name="edu.scripps.pms.util.io.FileFormatUnknownException" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.io.FileFormatUnknownException" />
	<class name="SpecCount" />
	<method signature="void &lt;init&gt;()" class="SpecCount" />
	<method signature="void main(java.lang.String[])" class="SpecCount" />
	<class name="edu.scripps.dtaselect.logic.EndsWithFilter" />
	<method signature="boolean accept(java.io.File,java.lang.String)" class="edu.scripps.dtaselect.logic.EndsWithFilter" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.logic.EndsWithFilter" />
	<class name="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void _read(java.net.URL,java.io.InputStream)" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void _help()" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void &lt;init&gt;()" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void _about()" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox,java.lang.String[])" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void main(java.lang.String[])" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="ptolemy.plot.plotml.PlotBoxMLParser _newParser()" class="ptolemy.plot.plotml.PlotMLApplication" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="ptolemy.plot.plotml.PlotMLApplication" />
	<class name="edu.scripps.pms.census.ColorTable" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.ColorTable" />
	<method signature="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer,int,int)" class="edu.scripps.pms.census.ColorTable" />
	<class name="edu.scripps.dtaselect.object.UPGMATree$DrawingDirection" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.object.UPGMATree)" class="edu.scripps.dtaselect.object.UPGMATree$DrawingDirection" />
	<field name="top" class="edu.scripps.dtaselect.object.UPGMATree$DrawingDirection" />
	<field name="left" class="edu.scripps.dtaselect.object.UPGMATree$DrawingDirection" />
	<class name="edu.scripps.pms.census.ConfigDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.ConfigDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.ConfigDialog" />
	<class name="edu.scripps.pms.pepsniffer.PepSniffer" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.pepsniffer.PepSniffer" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.pepsniffer.PepSniffer" />
	<class name="edu.scripps.pms.census.model.ChroNonLabelData" />
	<method signature="void setIntensityArr(long[])" class="edu.scripps.pms.census.model.ChroNonLabelData" />
	<method signature="void setFullScanData(java.lang.String[])" class="edu.scripps.pms.census.model.ChroNonLabelData" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.ChroNonLabelData" />
	<method signature="long[] getIntensityArr()" class="edu.scripps.pms.census.model.ChroNonLabelData" />
	<method signature="int[] getScanNumArr()" class="edu.scripps.pms.census.model.ChroNonLabelData" />
	<method signature="void setScanNumArr(int[])" class="edu.scripps.pms.census.model.ChroNonLabelData" />
	<class name="edu.scripps.pms.census.plot.HeatMap" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.plot.HeatMap" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.plot.HeatMap" />
	<method signature="void paint(java.awt.Graphics)" class="edu.scripps.pms.census.plot.HeatMap" />
	<class name="graph.ptolemy.gui.SwingWorker" />
	<method signature="java.lang.Object get()" class="graph.ptolemy.gui.SwingWorker" />
	<method signature="void start()" class="graph.ptolemy.gui.SwingWorker" />
	<method signature="void interrupt()" class="graph.ptolemy.gui.SwingWorker" />
	<method signature="java.lang.Object construct()" class="graph.ptolemy.gui.SwingWorker" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.gui.SwingWorker" />
	<method signature="java.lang.Object getValue()" class="graph.ptolemy.gui.SwingWorker" />
	<method signature="void finished()" class="graph.ptolemy.gui.SwingWorker" />
	<class name="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<method signature="int compare(java.lang.Object,java.lang.Object)" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<method signature="int compare(edu.scripps.pms.util.sqt.SQTPeptide,edu.scripps.pms.util.sqt.SQTPeptide)" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<method signature="boolean equals(java.lang.Object)" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<method signature="void &lt;init&gt;(int)" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<field name="SORTBYSP" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<field name="SORTBYXCORR" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<field name="SORTBYDELTACN" class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" />
	<class name="edu.scripps.pms.census.model.IsotopeTable" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.IsotopeTable" />
	<class name="XMLValidator" />
	<method signature="void &lt;init&gt;()" class="XMLValidator" />
	<method signature="void main(java.lang.String[])" class="XMLValidator" />
	<class name="edu.scripps.pms.util.dtaselect.ModProtein" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.util.dtaselect.ModProtein" />
	<method signature="void setLocus(java.lang.String)" class="edu.scripps.pms.util.dtaselect.ModProtein" />
	<method signature="java.lang.String getLocus()" class="edu.scripps.pms.util.dtaselect.ModProtein" />
	<method signature="void &lt;init&gt;(java.lang.String[])" class="edu.scripps.pms.util.dtaselect.ModProtein" />
	<class name="edu.scripps.pms.census.TestPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.TestPanel" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.TestPanel" />
	<class name="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JCheckBox getCbIncludingProteinsThatAreSubsetsOfOthers()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JComboBox getCmbPurgeDuplicateSpectra()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JComboBox getCmbKeepProteins()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtIncludeOnlyProteinsEndingWithOneOfTheseResidues()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtIncludeOnlyProteinsStartingWithOneOfTheseResidues()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtRemoveProteinsWithDescriptionIncludingThisWord()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JCheckBox getCbIncludingOnlyLociWithUniquelyMatchingPeptides()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtIncludeOnlyProteinsWithIDsMatchingThisString()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestProteinMolecularWeight()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestProteinConfidenceLevel()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtIncludeOnlyProteinsWithDescriptionIncludingThisWord()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtProteinFPRate()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtMinimumModifiedPeptidesPerLocusCriterion()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtRemoveProteinsWithIDMatchingString()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtMinimumPeptidesPerLocusCriterion()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtHighestProteinMolecularWeight()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtShowAllLociWithPeptidesThatAppearThisManyTimes()" class="edu.scripps.dtaselect.gui.LocusFiltersPanel" />
	<class name="edu.scripps.dtaselect.gui.SeqCovPanel" />
	<method signature="void drawSeqCov()" class="edu.scripps.dtaselect.gui.SeqCovPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.SeqCovPanel" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.dtaselect.gui.SeqCovPanel" />
	<class name="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JComboBox getCmbPeptidesModification()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtMaximumNumberOfMissedTrypticSites()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JCheckBox getCbPeptidesWithAmbiguousIDsAllowed()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtMinimumNumberOfMissedTrypticSites()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="void setFields()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtLowestPeptideProbability()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="edu.scripps.dtaselect.logic.SelectCriteria getCutOffs()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JComboBox getCmbTrypticPeptides()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JComboBox getCmbKeepPeptides()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<method signature="javax.swing.JFormattedTextField getTxtPeptidePFRate()" class="edu.scripps.dtaselect.gui.PeptideFiltersPanel" />
	<class name="edu.scripps.dtaselect.gui.CompareSamplesDialog$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.CompareSamplesDialog,java.lang.String)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.CompareSamplesDialog,javax.swing.Icon)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog$ToolBarButton" />
	<method signature="void &lt;init&gt;(edu.scripps.dtaselect.gui.CompareSamplesDialog,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog$ToolBarButton" />
	<class name="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void setProteinNr(int)" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="boolean isFound()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void setModel(edu.scripps.dtaselect.gui.utilities.TableModel)" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void setFound(boolean)" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="java.lang.String getSearchTerm()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void setTable(javax.swing.JTable)" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="javax.swing.JTable getTable()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="edu.scripps.dtaselect.gui.utilities.TableModel getModel()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="int getProteinNr()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void setRow(int)" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="void setSearchTerm(java.lang.String)" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<method signature="int getRow()" class="edu.scripps.dtaselect.object.OSearchResultInformation" />
	<class name="Complex" />
	<method signature="Complex plus(Complex)" class="Complex" />
	<method signature="java.lang.String toString()" class="Complex" />
	<method signature="Complex conjugate()" class="Complex" />
	<method signature="double abs()" class="Complex" />
	<method signature="void &lt;init&gt;(double,double)" class="Complex" />
	<method signature="Complex minus(Complex)" class="Complex" />
	<method signature="void main(java.lang.String[])" class="Complex" />
	<method signature="Complex times(double)" class="Complex" />
	<method signature="Complex times(Complex)" class="Complex" />
	<class name="edu.scripps.pms.stats.STDev" />
	<method signature="double getStdev(long[])" class="edu.scripps.pms.stats.STDev" />
	<method signature="double getMean(long[])" class="edu.scripps.pms.stats.STDev" />
	<method signature="double getStdev(double[])" class="edu.scripps.pms.stats.STDev" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.stats.STDev" />
	<method signature="double getMean(double[])" class="edu.scripps.pms.stats.STDev" />
	<method signature="double getMeanExcludingNegative(double[])" class="edu.scripps.pms.stats.STDev" />
	<method signature="double getStdevWithoutNegative(double[])" class="edu.scripps.pms.stats.STDev" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.stats.STDev" />
	<class name="ptolemy.plot.EPSGraphics" />
	<method signature="void setClip(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void fillRect(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)" class="ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void translate(int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void setFont(java.awt.Font)" class="ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Font getFont()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void fillPolygon(int[],int[],int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Color getColor()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawRect(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void setColor(java.awt.Color)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawPolyline(int[],int[],int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawRoundRect(int,int,int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawString(java.lang.String,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void fillRoundRect(int,int,int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void setXORMode(java.awt.Color)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawPolygon(int[],int[],int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.FontMetrics getFontMetrics(java.awt.Font)" class="ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Shape getClip()" class="ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Graphics create()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void clipRect(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawArc(int,int,int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void showpage()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawString(java.text.AttributedCharacterIterator,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void fillArc(int,int,int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void copyArea(int,int,int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void &lt;init&gt;(java.io.OutputStream,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void setClip(java.awt.Shape)" class="ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)" class="ptolemy.plot.EPSGraphics" />
	<method signature="boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawOval(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void setPaintMode()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void dispose()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void clearRect(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="void fillOval(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<method signature="java.awt.Rectangle getClipBounds()" class="ptolemy.plot.EPSGraphics" />
	<method signature="void drawLine(int,int,int,int)" class="ptolemy.plot.EPSGraphics" />
	<class name="graph.IrisPlot" />
	<method signature="void &lt;init&gt;()" class="graph.IrisPlot" />
	<class name="edu.scripps.pms.census.exception.InvalidAAException" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.exception.InvalidAAException" />
	<class name="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void addProteinInfo(java.lang.String,java.lang.String,java.lang.String,boolean)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void removeOutlier(double)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void addPeptide(boolean,java.lang.String,double,double,double,double,java.lang.String,java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void addPeptide(boolean,java.lang.String,double,double,double,double,java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="double getStdev()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="java.util.Set getProteinNames()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="boolean isPeptideContain(java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="double getAverageRatio()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="int getTotalSpecCount()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="boolean isContain(java.lang.String)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="java.util.List getPeptides()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void addProteinList(java.util.List)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void addPeptideList(java.util.List)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="java.util.List getDescList()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="java.util.List getProteins()" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<method signature="boolean isMergeable(edu.scripps.pms.census.model.MergeProteinModel,java.util.Hashtable)" class="edu.scripps.pms.census.model.MergeProteinModel" />
	<class name="scripts.lliao.SilacEnrichRatio" />
	<method signature="void &lt;init&gt;()" class="scripts.lliao.SilacEnrichRatio" />
	<method signature="void main(java.lang.String[])" class="scripts.lliao.SilacEnrichRatio" />
	<class name="edu.scripps.pms.census.RelexStand" />
	<method signature="void init()" class="edu.scripps.pms.census.RelexStand" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.RelexStand" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.RelexStand" />
	<class name="graph.ptolemy.plot.EditablePlot" />
	<method signature="double[][] getData(int)" class="graph.ptolemy.plot.EditablePlot" />
	<method signature="void setEditable(int)" class="graph.ptolemy.plot.EditablePlot" />
	<method signature="void undo()" class="graph.ptolemy.plot.EditablePlot" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.EditablePlot" />
	<method signature="void redo()" class="graph.ptolemy.plot.EditablePlot" />
	<method signature="void removeEditListener(graph.ptolemy.plot.EditListener)" class="graph.ptolemy.plot.EditablePlot" />
	<method signature="void addEditListener(graph.ptolemy.plot.EditListener)" class="graph.ptolemy.plot.EditablePlot" />
	<class name="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="void fillMofificationTabelWithValues()" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="javax.swing.JLabel getLbCommandLine()" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="javax.swing.JLabel getLbDirectory()" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="edu.scripps.dtaselect.gui.utilities.TableModel getModel()" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<method signature="javax.swing.JLabel getLbDatabase()" class="edu.scripps.dtaselect.gui.ConfigurationPaneTab" />
	<class name="FindAllNothing" />
	<method signature="double[] getChiScore(double[],double[])" class="FindAllNothing" />
	<method signature="double getStandardDeviationFromDist(double[],double)" class="FindAllNothing" />
	<method signature="double[] getNormalize(double[])" class="FindAllNothing" />
	<method signature="double[] getXArr(double[])" class="FindAllNothing" />
	<method signature="double[] changeFrequency(double[],double)" class="FindAllNothing" />
	<method signature="double getCOG(java.util.ArrayList)" class="FindAllNothing" />
	<method signature="void &lt;init&gt;()" class="FindAllNothing" />
	<method signature="double[] getNormalDistFrequency(double[],double,double)" class="FindAllNothing" />
	<method signature="double[] normalizeOnArea(double[],double[])" class="FindAllNothing" />
	<method signature="void main(java.lang.String[])" class="FindAllNothing" />
	<method signature="double getMax(double[])" class="FindAllNothing" />
	<class name="graph.ptolemy.plot.Histogram" />
	<method signature="void setBinOffset(double)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void addLegend(int,java.lang.String)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void addPoint(int,double)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void clear(boolean)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void setBars(double,double)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void addPoint(int,double,double,boolean)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void _checkDatasetIndex(int)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void _drawBar(java.awt.Graphics,int,long,long,boolean)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void writeData(java.io.PrintWriter)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void samplePlot()" class="graph.ptolemy.plot.Histogram" />
	<method signature="void _drawPlot(java.awt.Graphics,boolean)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void fillPlot()" class="graph.ptolemy.plot.Histogram" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.Histogram" />
	<method signature="boolean _parseLine(java.lang.String)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void writeFormat(java.io.PrintWriter)" class="graph.ptolemy.plot.Histogram" />
	<method signature="void setBinWidth(double)" class="graph.ptolemy.plot.Histogram" />
	<field name="_histogram" class="graph.ptolemy.plot.Histogram" />
	<field name="_currentdataset" class="graph.ptolemy.plot.Histogram" />
	<field name="_points" class="graph.ptolemy.plot.Histogram" />
	<class name="edu.scripps.pms.stats.GrubbsTest" />
	<method signature="double[] filterExcludingNegative(double[],double)" class="edu.scripps.pms.stats.GrubbsTest" />
	<method signature="java.util.List filter(java.util.List,double)" class="edu.scripps.pms.stats.GrubbsTest" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.stats.GrubbsTest" />
	<method signature="double[] filter(double[],double)" class="edu.scripps.pms.stats.GrubbsTest" />
	<method signature="java.util.List filterMerge(java.util.List,double)" class="edu.scripps.pms.stats.GrubbsTest" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.stats.GrubbsTest" />
	<class name="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getNotationSystemId(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="int getColumnNumber()" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getAttributeEnumeration(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="int getEntityType(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String intern(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getNotationPublicId(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String intern(char[],int,int)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getElementContentModel(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="void parse(java.lang.String,java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredElements()" class="graph.com.microstar.xml.XmlParser" />
	<method signature="void setHandler(graph.com.microstar.xml.XmlHandler)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredAttributes(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="int getLineNumber()" class="graph.com.microstar.xml.XmlParser" />
	<method signature="int getElementContentType(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="void parse(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="void parse(java.lang.String,java.lang.String,java.io.Reader)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntitySystemId(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntityNotationName(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="int getAttributeDefaultValueType(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntityPublicId(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getAttributeDefaultValue(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredEntities()" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getCurrentElement()" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getAttributeExpandedValue(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.util.Enumeration declaredNotations()" class="graph.com.microstar.xml.XmlParser" />
	<method signature="java.lang.String getEntityValue(java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="int getAttributeType(java.lang.String,java.lang.String)" class="graph.com.microstar.xml.XmlParser" />
	<method signature="void &lt;init&gt;()" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_CDATA" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_IDREF" class="graph.com.microstar.xml.XmlParser" />
	<field name="CONTENT_ELEMENTS" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ID" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_UNDECLARED" class="graph.com.microstar.xml.XmlParser" />
	<field name="CONTENT_UNDECLARED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ENUMERATED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ENTITY" class="graph.com.microstar.xml.XmlParser" />
	<field name="ENTITY_UNDECLARED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_SPECIFIED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_IMPLIED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_UNDECLARED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_FIXED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_NOTATION" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_ENTITIES" class="graph.com.microstar.xml.XmlParser" />
	<field name="ENTITY_NDATA" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_NMTOKENS" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_DEFAULT_REQUIRED" class="graph.com.microstar.xml.XmlParser" />
	<field name="ENTITY_INTERNAL" class="graph.com.microstar.xml.XmlParser" />
	<field name="CONTENT_EMPTY" class="graph.com.microstar.xml.XmlParser" />
	<field name="ENTITY_TEXT" class="graph.com.microstar.xml.XmlParser" />
	<field name="CONTENT_ANY" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_NMTOKEN" class="graph.com.microstar.xml.XmlParser" />
	<field name="ATTRIBUTE_IDREFS" class="graph.com.microstar.xml.XmlParser" />
	<field name="CONTENT_MIXED" class="graph.com.microstar.xml.XmlParser" />
	<class name="ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mousePressed(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseExited(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseEntered(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseReleased(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void mouseClicked(java.awt.event.MouseEvent)" class="ptolemy.plot.PlotBox$ZoomListener" />
	<method signature="void &lt;init&gt;(ptolemy.plot.PlotBox)" class="ptolemy.plot.PlotBox$ZoomListener" />
	<class name="edu.scripps.pms.census.model.FilterModel" />
	<method signature="boolean isUniquePeptide()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setDetValue(double)" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setPValueSelect(boolean)" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setDetSelect(boolean)" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="boolean isFilterFragmentIons()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="boolean isDetSelect()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="boolean isRemoveNegative()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="boolean isPValueSelect()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="double getPValue()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setFilterFragmentIons(boolean)" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setUniquePeptide(boolean)" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="double getDetValue()" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setRemoveNegative(boolean)" class="edu.scripps.pms.census.model.FilterModel" />
	<method signature="void setPValue(double)" class="edu.scripps.pms.census.model.FilterModel" />
	<class name="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void addMessage(edu.scripps.pms.census.ChroProgressDialog,java.lang.String)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void addMessageOffset(java.lang.String)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void addMessage(int)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="javax.swing.JProgressBar getProgressBar()" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void addMessageWithLine(java.lang.String)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void addMessageWithLine(edu.scripps.pms.census.ChroProgressDialog,java.lang.String)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void addMessage(java.lang.String)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void setProgress(int)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<method signature="void updateProgress(edu.scripps.pms.census.ChroProgressDialog,int)" class="edu.scripps.pms.census.ChroProgressDialog" />
	<class name="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<method signature="void showGUI()" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<method signature="edu.scripps.dtaselect.gui.CompareSamplesDialog getInstance()" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<method signature="java.lang.String showOpenFileDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<method signature="void showWarningMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<method signature="void showErrorMessageDialog(java.lang.String)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<method signature="void actionPerformed(java.awt.event.ActionEvent)" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
	<class name="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="void addPoint(edu.scripps.pms.util.spectrum.Point)" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="java.util.ListIterator getPoints()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="double getMinXValue()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="double getTotalIntensity()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="java.util.ArrayList getSortedPoints(boolean)" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="java.lang.String getListType()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="void setListType(java.lang.String)" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="int numPoints()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="double getMaxIntensity()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="double getMinIntensity()" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="void sortPoints(boolean)" class="edu.scripps.pms.util.spectrum.PointList" />
	<method signature="double getMaxXValue()" class="edu.scripps.pms.util.spectrum.PointList" />
	<field name="DEFAULTNUMPEAKS" class="edu.scripps.pms.util.spectrum.PointList" />
	<field name="SORTBYXVALUE" class="edu.scripps.pms.util.spectrum.PointList" />
	<field name="SORTBYINTENSITY" class="edu.scripps.pms.util.spectrum.PointList" />
	<class name="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="int getNumSpectra()" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="void refreshInputStream()" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="java.util.ArrayList getSpectraList()" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="java.util.Iterator getSpectra()" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="java.util.Iterator getHlines()" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="void &lt;init&gt;(java.lang.String,java.lang.String)" class="edu.scripps.pms.util.io.SpectrumReader" />
	<method signature="void closeDataFile()" class="edu.scripps.pms.util.io.SpectrumReader" />
	<field name="MZINTENSITYDELIMITER" class="edu.scripps.pms.util.io.SpectrumReader" />
	<field name="FIRSTCHAROFHLINE" class="edu.scripps.pms.util.io.SpectrumReader" />
	<class name="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getPeptideValidation()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getProteinCount()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMinPI()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxMZ()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setLookInCurrentDirectory(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseEmpirics(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseModStats(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseCriteria(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getSeqMaxLength()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinProtConf()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getNameIncludePattern()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseSequenceCriteria()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void PrintSetCriteria()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseLogMass()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setForwardFPRate(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinPepsPerLocus(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinSpScore(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getSeqMinLength()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinSpScore()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getFiltered()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMinPI(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setExtraColumns(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinMZ(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setHandleModified(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getDirectory()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isFullProteinName()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDatabase(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseBackgroundGraphic(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseClassifications()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxMW()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinimumMissedTryptic(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayKD(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getDatabase()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintCopyList()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseTrueProtein(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxDoubleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setFPTol(double)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getDisplayType()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPeptideValidation(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustIncludeNone(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setCompressDTAs(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustExcludeBeforeC()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseXCorr(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseStatistics()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinPI(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinTripleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setRemoveSubsets(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseIonStat()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setProteinMustStartWithResidues(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxSingleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isDisplayKD()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinPepConf(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getLocusValidation()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getSequenceCompleteness()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxPI(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaximumSp(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMaxDeltaMass()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustIncludeOne(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isIncludeOnlyUniques()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinDoubleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMinDeltaMass(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxDeltaMassPPM(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintSimilarities()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseDeltCN()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseDeltCN(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinProtConf(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseAuxInfo()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMaxXCorrs()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseRawXCorr(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinModPepsPerLocus(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMaxLength(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxSingleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintChroma(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustComeAfterResidues(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinChargeState(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustComeAfterResidues()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDecoyLabel(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMaxMZ()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getMinimumMissedTryptic()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSinglePepCopyCount(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseIonStat(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String PrintXMLCriteria()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setFitLevel(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayType(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setRequireTryptic(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getUnfiltered()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="double getFPTol()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseTrypticInfo()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinDeltaMassPPM(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustIncludePattern(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintCopyList(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getPlotLevel()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setForwardMatches(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isHideDecoy()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMinMZ()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaximumMissedTryptic(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getFitLevel()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayBirdsEye(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinMW()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinDeltaMassPPM()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getMaximumMissedTryptic()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintChroma()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isRemoveSubsets()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMaxPI(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMaxMW(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean Allow(edu.scripps.dtaselect.logic.DTAFile)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxChargeState(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getDescripExcludePattern()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseETD()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxTripleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setHideDecoy(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getTrueProteinLabel()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseNewAccessoryPrograms()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinPI()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPermitAmbiguous(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintAlignment(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxPepFP(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseStatistics(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxQuadrupleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseCriteria()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinSingleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isLookInCurrentDirectory()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getProteinMustStartWithResidues()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isDisplayBB()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMaxXCorrs(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPermitAmbiguous()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMinMZ(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMinMW(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getDecoyLabel()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setIncludeOnlyUniques(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getMinPepsPerLocus()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxProtFP(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSequenceCompleteness(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxQuadrupleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getMaximumSp()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustEndWithResidues(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxPI()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinTripleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinQuadrupleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseBackgroundGraphic()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getForwardFPRate()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMinLength(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getRequireTryptic()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintDB()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getSinglePepCopyCount()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseClassifications(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustIncludeOne()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMinDeltaMass()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="byte getHandleModified()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setProteinCount(java.lang.Integer)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String PrintCriteria(java.lang.String,java.lang.String,java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setNameIncludePattern(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseTrypticInfo(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMaxDeltaMass(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseETD(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMinMW()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayPI(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMaxPI()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayBB(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getProteinMustEndWithResidues()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getMaxChargeState()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinIonProportion(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isIsotopes()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseCID()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isExtraColumns()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustIncludePattern()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDecoyMatches(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxMZ(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintMods(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseCID(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMassDifference()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPurgeDuplicateSequences(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayHPLC(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustIncludeNone()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinDeltCN(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustIncludeTwo(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMascotOutput()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setNameExcludePattern(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getCommandLine()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void ProcessParamsFile()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDescripIncludePattern(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseXCorrCriteria()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMassDifference(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintXML()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinQuadrupleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustIncludeTwo()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getPurgeDuplicateSequences()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setFullProteinName(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getNameExcludePattern()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseSp()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustExcludeBeforeC(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseAuxInfo(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setIsotopes(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustIncludeResidues()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseLogSpRank()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isCompressDTAs()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getDescripIncludePattern()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean Permit(edu.scripps.dtaselect.logic.Protein)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseLogMass(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseGUIInstead()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseGUIInstead(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxDeltaMassPPM()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinDoubleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setLocusValidation(byte)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDisplayDeltaMass(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseModStats()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseSp(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSeqMustIncludeResidues(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setProteinCount(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getMinModPepsPerLocus()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintSimilarities(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isDisplayDeltaMass()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseLogSpRank(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxPepFP()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDescripExcludePattern(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseChargeState()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isDisplayPI()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseNewAccessoryPrograms(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUnfiltered(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxDoubleChargeXCorr(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setTrueProteinLabel(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setInstance(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getMinChargeState()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="edu.scripps.dtaselect.logic.SelectCriteria getInstance()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxTripleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintAlignment()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseSequenceCriteria(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getDecoyMatches()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setSetDeltCN(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMaxProtFP()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setDirectory(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinMZ()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseEmpirics()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMascotOutput(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isDisplayBirdsEye()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseChargeState(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setFiltered(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPlotLevel(int)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseMaxMZ(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void SetCriteria(java.lang.String[])" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintDB(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinIonProportion()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="int getSetDeltCN()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setProteinMustEndWithResidues(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getSeqMustEndWithResidues()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinPepConf()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setUseXCorrCriteria(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseMaxMW()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="java.lang.String getForwardMatches()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isDisplayHPLC()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isPrintMods()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setCommandLine(java.lang.String)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinSingleChargeXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMaxMW(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setPrintXML(boolean)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="float getMinDeltCN()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="void setMinMW(float)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseTrueProtein()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<method signature="boolean isUseRawXCorr()" class="edu.scripps.dtaselect.logic.SelectCriteria" />
	<class name="edu.scripps.dtaselect.object.OSample" />
	<method signature="edu.scripps.dtaselect.object.OClass getClassBelonging()" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="java.lang.String getXMLFileName()" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="void setProteins(java.util.Vector)" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="void setClassBelonging(edu.scripps.dtaselect.object.OClass)" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="java.util.Vector getProteins()" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="void add(edu.scripps.dtaselect.object.OProtein)" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="void setSampleName(java.lang.String)" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="java.lang.String getSampleName()" class="edu.scripps.dtaselect.object.OSample" />
	<method signature="void setXMLFileName(java.lang.String)" class="edu.scripps.dtaselect.object.OSample" />
	<class name="graph.ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void endElement(java.lang.String)" class="graph.ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void _addPoint(boolean,java.lang.String)" class="graph.ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.Histogram)" class="graph.ptolemy.plot.plotml.HistogramMLParser" />
	<method signature="void startElement(java.lang.String)" class="graph.ptolemy.plot.plotml.HistogramMLParser" />
	<class name="edu.scripps.pms.census.MRMFragPanel" />
	<method signature="void initAdditional()" class="edu.scripps.pms.census.MRMFragPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.MRMFragPanel" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.MRMFragPanel" />
	<class name="edu.scripps.pms.census.model.WeightedProtein" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.WeightedProtein" />
	<method signature="double getWeightedAverage(java.lang.String)" class="edu.scripps.pms.census.model.WeightedProtein" />
	<method signature="void add(double,long,java.lang.String)" class="edu.scripps.pms.census.model.WeightedProtein" />
	<class name="edu.scripps.pms.census.io.CenSusReportReader" />
	<method signature="void setTotalPeptideCount(int)" class="edu.scripps.pms.census.io.CenSusReportReader" />
	<method signature="int getTotalPeptideCount()" class="edu.scripps.pms.census.io.CenSusReportReader" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.io.CenSusReportReader" />
	<method signature="java.util.List read(java.lang.String,edu.scripps.pms.census.model.FilterModel,double)" class="edu.scripps.pms.census.io.CenSusReportReader" />
	<method signature="java.util.List merge(java.lang.Object[],javax.swing.JProgressBar,java.lang.String,edu.scripps.pms.census.model.FilterModel,double)" class="edu.scripps.pms.census.io.CenSusReportReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.io.CenSusReportReader" />
	<class name="XMLRead1" />
	<method signature="void &lt;init&gt;()" class="XMLRead1" />
	<method signature="byte[] floatTobyte(float)" class="XMLRead1" />
	<method signature="void main(java.lang.String[])" class="XMLRead1" />
	<class name="ptolemy.gui.CancelException" />
	<method signature="void &lt;init&gt;()" class="ptolemy.gui.CancelException" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="ptolemy.gui.CancelException" />
	<class name="edu.scripps.pms.census.SelectConfDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.SelectConfDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.SelectConfDialog" />
	<class name="scripts.mqdong.FilterRedundantPeptides" />
	<method signature="void &lt;init&gt;()" class="scripts.mqdong.FilterRedundantPeptides" />
	<method signature="void main(java.lang.String[])" class="scripts.mqdong.FilterRedundantPeptides" />
	<class name="edu.scripps.pms.census.model.IrisDataModel" />
	<method signature="void setMass(double[])" class="edu.scripps.pms.census.model.IrisDataModel" />
	<method signature="double[] getIntensity()" class="edu.scripps.pms.census.model.IrisDataModel" />
	<method signature="double[] getMass()" class="edu.scripps.pms.census.model.IrisDataModel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.IrisDataModel" />
	<method signature="void &lt;init&gt;(double[],double[])" class="edu.scripps.pms.census.model.IrisDataModel" />
	<method signature="void setIntensity(double[])" class="edu.scripps.pms.census.model.IrisDataModel" />
	<class name="scripts.lliao.CensusReportReaderModified" />
	<method signature="void setTotalPeptideCount(int)" class="scripts.lliao.CensusReportReaderModified" />
	<method signature="int getTotalPeptideCount()" class="scripts.lliao.CensusReportReaderModified" />
	<method signature="void &lt;init&gt;()" class="scripts.lliao.CensusReportReaderModified" />
	<method signature="java.util.List read(java.lang.String)" class="scripts.lliao.CensusReportReaderModified" />
	<method signature="void main(java.lang.String[])" class="scripts.lliao.CensusReportReaderModified" />
	<class name="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="double GaussJordan(double[][],int)" class="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="java.lang.String getAccession(java.lang.String)" class="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="void PrintSymmetricMatrix(double[][],int)" class="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="void QuickSortIndex(double[],int[],int,int)" class="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="double LDA(double[][],double[],int,int,byte[])" class="edu.scripps.dtaselect.logic.NRUtils" />
	<method signature="void QuickSortIndex(double[],int[])" class="edu.scripps.dtaselect.logic.NRUtils" />
	<class name="edu.scripps.pms.census.model.Spectrum" />
	<method signature="int binarySearch(double)" class="edu.scripps.pms.census.model.Spectrum" />
	<method signature="void setMassList(double[])" class="edu.scripps.pms.census.model.Spectrum" />
	<method signature="void add(double,int)" class="edu.scripps.pms.census.model.Spectrum" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.model.Spectrum" />
	<method signature="int getIntensity(int)" class="edu.scripps.pms.census.model.Spectrum" />
	<method signature="double[] getMassIntensityList()" class="edu.scripps.pms.census.model.Spectrum" />
	<class name="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="void setIsotope(edu.scripps.pms.census.model.IsotopeTable)" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="void &lt;init&gt;(org.jdom.Element)" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="void &lt;init&gt;(java.io.File)" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="void test(edu.scripps.pms.census.model.IsotopeTable)" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="void &lt;init&gt;(java.lang.String)" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="edu.scripps.pms.census.model.IsotopeTable getStandardIsotopeTable()" class="edu.scripps.pms.census.io.IsotopeReader" />
	<method signature="edu.scripps.pms.census.model.IsotopeTable getIsotope()" class="edu.scripps.pms.census.io.IsotopeReader" />
	<class name="edu.scripps.dtaselect.logic.gui.LPeptideFiltersPanel" />
	<method signature="void parseInput()" class="edu.scripps.dtaselect.logic.gui.LPeptideFiltersPanel" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.gui.LPeptideFiltersPanel" />
	<class name="edu.scripps.dtaselect.logic.SpecBrowser" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.dtaselect.logic.SpecBrowser" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.dtaselect.logic.SpecBrowser" />
	<class name="edu.scripps.pms.census.LabelFreeConfDialog" />
	<method signature="void &lt;init&gt;(java.awt.Frame,boolean)" class="edu.scripps.pms.census.LabelFreeConfDialog" />
	<method signature="void main(java.lang.String[])" class="edu.scripps.pms.census.LabelFreeConfDialog" />
	<method signature="void updateDataSet(javax.swing.DefaultListModel,java.lang.String)" class="edu.scripps.pms.census.LabelFreeConfDialog" />
	<class name="edu.scripps.pms.census.junit.TestConstants" />
	<field name="TEST_DATA_HOME" class="edu.scripps.pms.census.junit.TestConstants" />
	<field name="CENSUS_PARAM_FILE" class="edu.scripps.pms.census.junit.TestConstants" />
	<class name="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void error(java.lang.String,java.lang.String,int,int)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void postProcessing()" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void parse(java.net.URL,java.io.Reader)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="java.lang.Object resolveEntity(java.lang.String,java.lang.String)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void endDocument()" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void parse(java.net.URL,java.lang.String)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void startExternalEntity(java.lang.String)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void parse(java.net.URL,java.io.InputStream)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void attribute(java.lang.String,java.lang.String,boolean)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void &lt;init&gt;()" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void _checkForNull(java.lang.Object,java.lang.String)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void charData(char[],int,int)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void endElement(java.lang.String)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="java.lang.String _currentExternalEntity()" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void startDocument()" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<method signature="void startElement(java.lang.String)" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="PlotML_DTD_1" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_attributes" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_currentCharData" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_plot" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<field name="_parser" class="graph.ptolemy.plot.plotml.PlotBoxMLParser" />
	<class name="edu.scripps.pms.census.conf.Configuration$Sample" />
	<method signature="void setMsFileList(java.util.ArrayList)" class="edu.scripps.pms.census.conf.Configuration$Sample" />
	<method signature="void setName(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration$Sample" />
	<method signature="void addFile(java.lang.String)" class="edu.scripps.pms.census.conf.Configuration$Sample" />
	<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.conf.Configuration$Sample" />
	<method signature="java.util.ArrayList getMsFileList()" class="edu.scripps.pms.census.conf.Configuration$Sample" />
	<method signature="java.lang.String getName()" class="edu.scripps.pms.census.conf.Configuration$Sample" />
	<class name="XMLTest" />
	<method signature="void &lt;init&gt;()" class="XMLTest" />
	<method signature="byte[] floatTobyte(float)" class="XMLTest" />
	<method signature="void main(java.lang.String[])" class="XMLTest" />
	<class name="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int getX()" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setLocalScore(double)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int[] rotateNew(int,int,int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setI(int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setCumScore(double)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int getY()" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int[] rotateOrigin(int,int,int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int getI()" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setPathIndex(int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setY(int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void &lt;init&gt;(int,int,int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="double getCumScore()" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setX(int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="boolean checkWithinBound(int,int,int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="double getLocalScore()" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int getPathIndex()" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="void setJ(int)" class="edu.scripps.pms.census.model.AlignNode" />
	<method signature="int getJ()" class="edu.scripps.pms.census.model.AlignNode" />
	<class name="graph.ptolemy.plot.PlotFormatter" />
	<method signature="void restore()" class="graph.ptolemy.plot.PlotFormatter" />
	<method signature="void openModal()" class="graph.ptolemy.plot.PlotFormatter" />
	<method signature="void &lt;init&gt;(graph.ptolemy.plot.PlotBox)" class="graph.ptolemy.plot.PlotFormatter" />
	<method signature="void apply()" class="graph.ptolemy.plot.PlotFormatter" />
	<field name="_plot" class="graph.ptolemy.plot.PlotFormatter" />
</entrypoints>

<!-- writing shrinked /home/rpark/pms/Census/deploy/census.jar to /home/rpark/pms/Census/deploy/yguard_temp_45328.jar. -->
<inOutPair in="/home/rpark/pms/Census/deploy/census.jar" out="/home/rpark/pms/Census/deploy/yguard_temp_45328.jar">
	<removed-code>
		<field name="USE_CHEATS" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UTF_8" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_ISO_8859_1" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UCS_2_12" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UCS_2_21" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UCS_4_1234" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UCS_4_4321" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UCS_4_2143" class="com.microstar.xml.XmlParser" />
		<field name="ENCODING_UCS_4_3412" class="com.microstar.xml.XmlParser" />
		<field name="INPUT_NONE" class="com.microstar.xml.XmlParser" />
		<field name="INPUT_INTERNAL" class="com.microstar.xml.XmlParser" />
		<field name="INPUT_EXTERNAL" class="com.microstar.xml.XmlParser" />
		<field name="INPUT_STREAM" class="com.microstar.xml.XmlParser" />
		<field name="INPUT_BUFFER" class="com.microstar.xml.XmlParser" />
		<field name="INPUT_READER" class="com.microstar.xml.XmlParser" />
		<field name="LIT_CHAR_REF" class="com.microstar.xml.XmlParser" />
		<field name="LIT_ENTITY_REF" class="com.microstar.xml.XmlParser" />
		<field name="LIT_PE_REF" class="com.microstar.xml.XmlParser" />
		<field name="LIT_NORMALIZE" class="com.microstar.xml.XmlParser" />
		<field name="CONTEXT_NONE" class="com.microstar.xml.XmlParser" />
		<field name="CONTEXT_DTD" class="com.microstar.xml.XmlParser" />
		<field name="CONTEXT_ENTITYVALUE" class="com.microstar.xml.XmlParser" />
		<field name="CONTEXT_ATTRIBUTEVALUE" class="com.microstar.xml.XmlParser" />
		<field name="READ_BUFFER_MAX" class="com.microstar.xml.XmlParser" />
		<field name="baseEncoding" class="com.microstar.xml.XmlParser" />
		<field name="baseInputBuffer" class="com.microstar.xml.XmlParser" />
		<field name="baseInputBufferStart" class="com.microstar.xml.XmlParser" />
		<field name="baseInputBufferLength" class="com.microstar.xml.XmlParser" />
		<field name="SYMBOL_TABLE_LENGTH" class="com.microstar.xml.XmlParser" />
		<method signature="java.awt.Color getColorFor(float)" class="edu.scripps.dtaselect.gui.BarChartTab" />
		<method signature="void setFields()" class="edu.scripps.dtaselect.gui.CompareSamplesDialog" />
		<method signature="java.awt.Color getColorFor(float)" class="edu.scripps.dtaselect.gui.HeatmapPaneTab" />
		<method signature="void showSaveDialog()" class="edu.scripps.dtaselect.gui.MainFrame" />
		<field name="oneSample" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel$NumberOfSamples" />
		<field name="NSamples" class="edu.scripps.dtaselect.gui.ProteinOverviewPanel$NumberOfSamples" />
		<method signature="void setLastRowToDefaultValues()" class="edu.scripps.dtaselect.gui.utilities.TableModelGeneral" />
		<method signature="int getLength()" class="edu.scripps.dtaselect.logic.CoverageZone$IntList" />
		<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.CoverageZone$IntList" />
		<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.CoverageZone" />
		<method signature="void DebugPrint()" class="edu.scripps.dtaselect.logic.DataSet$Modification" />
		<field name="CurrentLocus" class="edu.scripps.dtaselect.logic.DataSet" />
		<field name="LowScan" class="edu.scripps.dtaselect.logic.IDXFile$Subdir" />
		<field name="HighScan" class="edu.scripps.dtaselect.logic.IDXFile$Subdir" />
		<field name="Slope" class="edu.scripps.dtaselect.logic.LDAConfidence" />
		<field name="Score" class="edu.scripps.dtaselect.logic.LDAConfidence" />
		<field name="TempDeltaMass" class="edu.scripps.dtaselect.logic.LDAConfidence" />
		<class name="edu.scripps.dtaselect.logic.SelectCriteria$ExtendedGUI" />
		<class name="edu.scripps.dtaselect.logic.SelectCriteria$LocusGUI" />
		<class name="edu.scripps.dtaselect.logic.SelectCriteria$SpectrumGUI" />
		<class name="edu.scripps.dtaselect.logic.SelectCriteria$WindowEventAdapter" />
		<method signature="int access$000(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="int access$100(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="int access$200(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$300(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$400(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$500(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$600(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$700(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$800(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$900(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="byte access$1000(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="java.lang.String access$1100(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="java.lang.String access$1200(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="java.lang.String access$1300(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="java.lang.String access$1400(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="java.lang.String access$1500(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$1600(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$1700(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$1800(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="float access$1900(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="int access$2000(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="int access$2100(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<method signature="int access$2200(edu.scripps.dtaselect.logic.SelectCriteria)" class="edu.scripps.dtaselect.logic.SelectCriteria" />
		<field name="PrefixPresent" class="edu.scripps.dtaselect.logic.SpecView" />
		<field name="SuffixPresent" class="edu.scripps.dtaselect.logic.SpecView" />
		<method signature="boolean ReadDTAFile()" class="edu.scripps.dtaselect.logic.SpecView" />
		<method signature="edu.scripps.dtaselect.object.OPeak findIon(int,java.lang.String)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
		<method signature="float getMZFromToken(java.lang.String)" class="edu.scripps.dtaselect.logic.SpectrumPanel" />
		<field name="FontHeight" class="edu.scripps.dtaselect.logic.TupleTable" />
		<field name="allClasses" class="edu.scripps.dtaselect.object.OHeatMap" />
		<method signature="int calculateNumberOfDifferentProteins()" class="edu.scripps.dtaselect.object.OHeatMap" />
		<method signature="boolean isAlreadyInVector(java.lang.String)" class="edu.scripps.dtaselect.object.OHeatMap" />
		<method signature="java.awt.Color getBlueColorToneFor(int)" class="edu.scripps.dtaselect.object.OHeatMap" />
		<method signature="java.awt.Color getRedColorToneFor(int)" class="edu.scripps.dtaselect.object.OHeatMap" />
		<method signature="int countDifferentNrOfProteins(java.util.Vector)" class="edu.scripps.dtaselect.object.OHeatMap" />
		<method signature="void print()" class="edu.scripps.dtaselect.object.UPGMATree$Cluster" />
		<method signature="void print(int)" class="edu.scripps.dtaselect.object.UPGMATree$Cluster" />
		<method signature="void indent(int)" class="edu.scripps.dtaselect.object.UPGMATree$Cluster" />
		<field name="massTolerance" class="edu.scripps.pms.census.Census" />
		<field name="elementFile" class="edu.scripps.pms.census.Census" />
		<method signature="void printMode(boolean,boolean)" class="edu.scripps.pms.census.Census" />
		<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.CensusConstants" />
		<method signature="java.lang.String createChroHeader(boolean)" class="edu.scripps.pms.census.ChroGenerator" />
		<method signature="java.lang.String createChroPeptideTitle(boolean,edu.scripps.pms.util.dtaselect.Peptide)" class="edu.scripps.pms.census.ChroGenerator" />
		<method signature="int findStartScanNum(int,java.io.RandomAccessFile,int[],double)" class="edu.scripps.pms.census.ChroGenerator" />
		<method signature="double findScanNum(java.io.RandomAccessFile,int,long,double)" class="edu.scripps.pms.census.ChroGenerator" />
		<field name="ISOTOPE_SIZE" class="edu.scripps.pms.census.ElementComposition" />
		<field name="chroXmlParser" class="edu.scripps.pms.census.IrisPanel" />
		<method signature="void editBtnActionPerformed_backup(java.awt.event.ActionEvent)" class="edu.scripps.pms.census.LabelFreeConfDialog" />
		<field name="xmlData" class="edu.scripps.pms.census.RelExMainFrame" />
		<method signature="void initTest()" class="edu.scripps.pms.census.RelExMainFrame" />
		<method signature="void updateLabelFreeMS2PeptideInfo()" class="edu.scripps.pms.census.RelExMainFrame" />
		<field name="jLabel1" class="edu.scripps.pms.census.TestPanel" />
		<method signature="void initComponents()" class="edu.scripps.pms.census.TestPanel" />
		<field name="indexArr" class="edu.scripps.pms.census.chroalign.chroalign" />
		<field name="massRange" class="edu.scripps.pms.census.conf.Configuration" />
		<field name="MS1_FILE" class="edu.scripps.pms.census.hash.MSIndexFileCreator" />
		<field name="MS2_FILE" class="edu.scripps.pms.census.hash.MSIndexFileCreator" />
		<field name="MSZM" class="edu.scripps.pms.census.hash.MSIndexFileCreator" />
		<field name="br" class="edu.scripps.pms.census.io.ChroXmlReader" />
		<field name="fileName" class="edu.scripps.pms.census.io.ChroXmlReader" />
		<field name="ISOTOPE_SIZE" class="edu.scripps.pms.census.io.IsotopeReader" />
		<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.junit.TestConstants" />
		<field name="mw" class="edu.scripps.pms.census.model.Spectrum" />
		<method signature="void _drawPlotPoint(java.awt.Graphics)" class="edu.scripps.pms.census.plot.CorrelationPlot" />
		<field name="GREEN" class="edu.scripps.pms.census.plot.HeatmapUtil" />
		<field name="RED" class="edu.scripps.pms.census.plot.HeatmapUtil" />
		<field name="xcorr" class="edu.scripps.pms.census.plot.IrisPlot" />
		<field name="dtaStartRange" class="edu.scripps.pms.census.plot.IrisPlot" />
		<field name="dtaEndRange" class="edu.scripps.pms.census.plot.IrisPlot" />
		<method signature="void &lt;init&gt;()" class="edu.scripps.pms.census.tools.Formatter" />
		<field name="PROTON_MASS" class="edu.scripps.pms.census.tools.IsoDist" />
		<field name="steepArea" class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" />
		<method signature="void setDiff(int)" class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" />
		<method signature="int getSteepArea()" class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" />
		<method signature="void setSteepArea(int)" class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" />
		<method signature="java.lang.String getResult()" class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" />
		<method signature="edu.scripps.pms.util.io.MzxmlSpectrumReader getMzxmlreader()" class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" />
		<field name="SPACE" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="CARRIAGE_RETURN" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="WINDOW_CR" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="DOT" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="samplePrecursor" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="refPrecursor" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="chargeState" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="MOVE_LEFT" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="MOVE_RIGHT" class="edu.scripps.pms.census.util.CalcUtil" />
		<field name="DIST_SIZE" class="edu.scripps.pms.census.util.IsotopeDist" />
		<field name="scanNum" class="edu.scripps.pms.census.util.PostCalculation" />
		<field name="size" class="edu.scripps.pms.census.util.PostCalculation" />
		<field name="fileName" class="edu.scripps.pms.util.io.BaseIdentificationReader" />
		<method signature="void readSummary()" class="edu.scripps.pms.util.io.DTASelectFilterReader" />
		<method signature="void &lt;init&gt;()" class="edu.scripps.pms.util.io.FileUtil" />
		<method signature="java.util.Stack getScanNumStack()" class="edu.scripps.pms.util.io.MzxmlSpectrumReader" />
		<field name="ISOTOPE_SIZE" class="edu.scripps.pms.util.isotope.ElementComposition" />
		<field name="DIST_SIZE" class="edu.scripps.pms.util.isotope.IsotopeDist" />
		<field name="listType" class="edu.scripps.pms.util.spectrum.MzxmlPeakList" />
		<field name="spVale" class="edu.scripps.pms.util.sqt.MLine" />
</yshrink>

