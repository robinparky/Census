
package edu.scripps.pms.util.dtaselect;

/**
 * @author  Robin Park
 * @version $Id: Protein.java.orig,v 1.1 2014/09/09 19:28:27 rpark Exp $
 */
import java.util.*;
import edu.scripps.pms.util.seq.Fasta;

import edu.scripps.pms.census.model.*;

public class Protein
{
    private String locus;
    private String seqCount = "N/A";
    private String spectrumCount = "N/A";
    private String seqCoverage = "N/A";
    private String length = "N/A";
    private String molWt = "N/A";
    private String pI = "N/A";
    private String validation = "N/A";
    private String description = "N/A";
    private List<Peptide> peptideList;
    private String proteinLine="N/A";
    private Hashtable<String, Integer> proteinIndexHt;
    private String lSpectrumCount = "N/A";
    private String hSpectrumCount = "N/A";
        
    //for non-labeling union
    private Hashtable<String, Peptide> peptideHt;

    public void populatePeptideHt(String filePath)
    {
        for(Iterator<Peptide> itr=this.peptideList.iterator(); itr.hasNext(); )
        {
            Peptide pep = itr.next();
            pep.setFilePath(filePath);
            peptideHt.put(pep.getSequence() + pep.getChargeState(), pep);
        }
    }

    public int addPeptideHt(Iterator<Peptide> pepList, String filePath)
    {
        int count=0;
        
        for(Iterator<Peptide> itr=pepList; itr.hasNext(); )
        {
            Peptide pep = itr.next();
            pep.setFilePath(filePath);
            
            Peptide tempPep = peptideHt.get(pep.getSequence() + pep.getChargeState());
         
            if(null == tempPep)
            {
                peptideHt.put(pep.getSequence() + pep.getChargeState(), pep);
                count++;
                
                continue;
            }
            
            if( Double.parseDouble(tempPep.getXCorr()) < Double.parseDouble(pep.getXCorr()) )
            {
                peptideHt.put(pep.getSequence() + pep.getChargeState(), pep);                                
            }
        }
        
        return count;
        
    }
    
    public Protein() 
    {    
        peptideList = new ArrayList<Peptide>();
        peptideHt = new Hashtable<String, Peptide>();
    }
    
    public Protein(String proteinLine, Hashtable<String, Integer> proteinIndexHt) throws ArrayIndexOutOfBoundsException
    {
        this( proteinLine.split("\t"), proteinIndexHt);
        this.proteinLine = proteinLine;
    }

    private Protein(String[] strArr, Hashtable<String, Integer> proteinIndexHt) throws ArrayIndexOutOfBoundsException
    {
	this.proteinIndexHt = proteinIndexHt;
        peptideList = new ArrayList<Peptide>();
        peptideHt = new Hashtable<String, Peptide>();

        init(strArr);
    }

    public boolean addPeptide(Peptide peptide)
    {
        return peptideList.add(peptide);
    }

    public void removePeptide(Peptide peptide)
    {
        peptideList.remove(peptide);
    }

    public Iterator<Peptide> getPeptides()
    {
        return peptideList.iterator();
    }
    
    public List<Peptide> getPeptideList()
    {
        return peptideList;
    }

    
    private void init(String[] strArr) throws ArrayIndexOutOfBoundsException
    {
        try {

            this.setLocus( Fasta.getAccession(strArr[proteinIndexHt.get("Locus")]) );
            this.setSeqCount( strArr[proteinIndexHt.get("Sequence Count")] );
            this.setSpectrumCount( strArr[proteinIndexHt.get("Spectrum Count")] );
            this.setSeqCoverage(strArr[proteinIndexHt.get("Sequence Coverage")]);

            this.setLength(strArr[proteinIndexHt.get("Length")]);

	    if(strArr.length>proteinIndexHt.get("MolWt"))
		    this.setMolWt(strArr[proteinIndexHt.get("MolWt")]);

	    if(strArr.length>proteinIndexHt.get("pI"))
		    this.setPI(strArr[proteinIndexHt.get("pI")]);
	    if(strArr.length>proteinIndexHt.get("Validation Status"))
		    this.setValidation(strArr[proteinIndexHt.get("Validation Status")]);
	    if(strArr.length>proteinIndexHt.get("Descriptive Name"))
		    this.setDescription(strArr[proteinIndexHt.get("Descriptive Name")]);

	    Integer lspecC = proteinIndexHt.get("LRedundancy");


	    if(null != lspecC)
		    this.setlSpectrumCount(strArr[lspecC]);
		
	    Integer hspecC = proteinIndexHt.get("HRedundancy");
	    if(null != hspecC)
		    this.sethSpectrumCount(strArr[hspecC]);

/*
            this.setLocus( Fasta.getAccession(strArr[0]) );
            this.setSeqCount(strArr[1]);
            this.setSpectrumCount(strArr[2]);
            this.setSeqCoverage(strArr[3]);
            this.setLength(strArr[4]);
            this.setMolWt(strArr[5]);
            this.setPI(strArr[6]);
            this.setValidation(strArr[7]);
	    this.setDescription(strArr[8]);

*/
        }
        catch(ArrayIndexOutOfBoundsException ex) {
		ex.printStackTrace();

            throw new ArrayIndexOutOfBoundsException("Error : Mal formed DTASelect-filter.txt file in protein line");
        }
    }

    public String getLocus()
    {
        return locus;
    }

    public String getSeqCount()
    {
        return seqCount;
    }

    public String getSpectrumCount()
    {
        return spectrumCount;
    }

    public String getSeqCoverage()
    {
        return seqCoverage;
    }

    public String getLength()
    {
        return length;
    }

    public String getMolWt()
    {
        return molWt;
    }

    public String getPI()
    {
        return pI;
    }

    public String getValidation()
    {
        return validation;
    }

    public String getDescription()
    {
        return description;
    }

    public void setLocus(String locus)
    {
        this.locus = locus;
    }

    public void setSeqCount(String seqCount)
    {
        this.seqCount = seqCount;
    }

    public void setSpectrumCount(String spectrumCount)
    {
        this.spectrumCount = spectrumCount;
    }

    public void setSeqCoverage(String seqCoverage)
    {
        this.seqCoverage = seqCoverage;
    }

    public void setLength(String length)
    {
        this.length = length;
    }

    public void setMolWt(String molWt)
    {
        this.molWt = molWt;
    }

    public void setPI(String pI)
    {
        this.pI = pI;
    }

    public void setValidation(String validation)
    {
        this.validation = validation;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }
    
    public int getPeptideSize()
    {
        return peptideList.size();
    }

    public String getProteinLine()
    {
        return proteinLine;
    }

    public Hashtable<String, Peptide> getPeptideHt() {
        return peptideHt;
    }

    public void setPeptideHt(Hashtable<String, Peptide> peptideHt) {
        this.peptideHt = peptideHt;
    }

    public String gethSpectrumCount() {
        return hSpectrumCount;
    }

    public void sethSpectrumCount(String hSpectrumCount) {
        this.hSpectrumCount = hSpectrumCount;
    }

    public String getlSpectrumCount() {
        return lSpectrumCount;
    }

    public void setlSpectrumCount(String lSpectrumCount) {
        this.lSpectrumCount = lSpectrumCount;
    }

}
