/*co
 * OpenConfigDialog.java
 *
 * Created on May 12, 2006, 12:09 PM
 */

package edu.scripps.pms.census.dialog;

import edu.scripps.pms.census.*;
import javax.swing.*;
import java.io.*;
import java.awt.*;

import org.jdom.*;
import org.jdom.output.*;
import org.jdom.input.*;
import edu.scripps.pms.census.conf.*;
import edu.scripps.pms.census.exception.*;

import edu.scripps.pms.census.util.SimpleFileNameFilter;
import edu.scripps.pms.census.util.RelExFileFilter;

import edu.scripps.pms.util.Mzxml2Ms;

/**
 *
 * @author  rpark
 */
//public class OpenConfigDialog extends javax.swing.JDialog {
public class OpenConfigDialog extends javax.swing.JDialog implements java.beans.PropertyChangeListener {

    private RelExMainFrame mFrame;
    private File currentFolder=null;

    private Configuration conf;

    /** Creates new form OpenConfigDialog */
    public OpenConfigDialog() {
    }

    /** Creates new form OpenConfigDialog */
    public OpenConfigDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.mFrame = (RelExMainFrame)parent;
        this.currentFolder = new File(mFrame.getCurrentDirectory());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spectralFormatGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        spectrumField = new javax.swing.JTextField();
        spectrumBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        idFileField = new javax.swing.JTextField();
        ifFieldBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        configField = new javax.swing.JTextField();
        confFileBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open Config Files");

        jLabel1.setText("Spectrum Folder");

        spectrumBtn.setText("Open...");
        spectrumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("ID (DTASelect-filter.txt or pepXML)");

        ifFieldBtn.setText("Open...");
        ifFieldBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifFieldBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Configuration File");

        confFileBtn.setText("Open...");
        confFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confFileBtnActionPerformed(evt);
            }
        });

        okBtn.setText("OK");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Note. Spectral files should be located in Spectral folder.  Census supports MS1/MS2 and mzXML formats.");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel3)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(spectrumField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 522, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(configField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 522, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(17, 17, 17)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(spectrumBtn)
                            .add(confFileBtn)))
                    .add(layout.createSequentialGroup()
                        .add(idFileField)
                        .add(17, 17, 17)
                        .add(ifFieldBtn)))
                .add(29, 29, 29))
            .add(layout.createSequentialGroup()
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 669, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(324, 324, 324)
                .add(okBtn)
                .add(19, 19, 19)
                .add(cancelBtn)
                .addContainerGap(411, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(spectrumBtn)
                    .add(spectrumField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(confFileBtn)
                    .add(configField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ifFieldBtn)
                    .add(jLabel2)
                    .add(idFileField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(28, 28, 28)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 29, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okBtn)
                    .add(cancelBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ifFieldBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifFieldBtnActionPerformed
// TODO add your handling code here:
        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select Id file");
        choose.setApproveButtonText("Select");

	currentFolder = new File(mFrame.getCurrentDirectory());

        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        File f = new File("DTASelect-filter.txt");
        choose.setSelectedFile(f);

        int returnVal = choose.showOpenDialog(this);

        if(returnVal == choose.CANCEL_OPTION)
            return;

        File file = choose.getSelectedFile();
        this.idFileField.setText( file.getAbsolutePath() );

	mFrame.setCurrentDirectory(currentFolder);
    }//GEN-LAST:event_ifFieldBtnActionPerformed

    /**
     * Invoked when task's progress property changes.
     */
    private JProgressBar convertBar;
    public void propertyChange(java.beans.PropertyChangeEvent evt) {

        //if ("progress" == evt.getPropertyName()) {
        /*
            int progress = (Integer) evt.getNewValue();
            evt.getNewValue();
            StateValue v = new StateValue();

            convertBar.setIndeterminate(false);

            convertBar.setValue(progress);
         */
            //taskOutput.append(String.format(
        //              "Completed %d%% of task.\n", progress));
        //}

    }

    private void confFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confFileBtnActionPerformed
// TODO add your handling code here:

        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select configuration file");
        choose.setApproveButtonText("Select");
        choose.addChoosableFileFilter( new SimpleFileNameFilter("xml", "configuration file") );

	currentFolder = new File(mFrame.getCurrentDirectory());
        //currentFolder = new File("/home/rpark/test1");

        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        File f = new File("census_config.xml");
        choose.setSelectedFile(f);

        int returnVal = choose.showOpenDialog(this);

        if(returnVal == choose.CANCEL_OPTION)
            return;

        File file = choose.getSelectedFile();
        this.configField.setText( file.getAbsolutePath() );

	mFrame.setCurrentDirectory(currentFolder);
    }//GEN-LAST:event_confFileBtnActionPerformed

    private void spectrumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumBtnActionPerformed
// TODO add your handling code here:
        JFileChooser choose = new JFileChooser();
        choose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        choose.setApproveButtonText("Select");
        //choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select Spectrum Directory");

        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        int returnVal = choose.showOpenDialog(this);


        File file = choose.getSelectedFile();
        this.currentFolder = file;

        if(null==file)
            return;

        spectrumField.setText(choose.getSelectedFile().getAbsolutePath()); //.getCurrentDirectory().toString());

        File[] fList = file.listFiles();

        String ms1Files = "";
        String mzXMLFiles = "";

        for(int i=0;i<fList.length;i++)
        {
            if("DTASelect-filter.txt".equals(fList[i].getName()))
            {
                this.idFileField.setText( fList[i].getAbsolutePath() );
            }

            if("census_config.xml".equals(fList[i].getName()))
            {
                this.configField.setText( fList[i].getAbsolutePath() );
            }
        }

        Configuration conf = Configuration.getInstance();


        mFrame.setCurrentDirectory(file);
    }//GEN-LAST:event_spectrumBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
// TODO add your handling code here:

        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    public static void runLabeledAnalysis(ChroGenerator chro, Configuration conf) throws IOException, Exception
    {

        runLabeledAnalysis(chro, null, conf);
    }

    public static void runMRMWithoutId(ChroGenerator chro) throws IOException, Exception
    {
	chro.runMRMWithoutId();
    }

    public static void runLabeledAnalysis(ChroGenerator chro, ChroProgressDialog chroProgress, Configuration conf) throws IOException, CensusGeneralException, Exception
    {
        switch(conf.getQuantLevel())
        {
            case 1: //Full
		if(conf.isPulseLabeling())
			chro.createPulseChro();
                else if(conf.getSampleNum()==3)
                        chro.createFullscanXmlChroTriple();
		else
			chro.createFullscanXmlChro();
                break;

            case 2: //MSMS

                //MSMS.  Hmm... Here we need to add another different type of analysis.
                //now we have two different types of msms analysis.  automatically pick fragment ions or user defined peaks(e.g. iTRAQ)
                //if(conf.getMsmsFragType() == conf.AUTOMATIC_FRAGMENT_ION)

                //iTRAQ data

                //System.out.println(conf.getExpType() + " " + CensusConstants.MSMS_SPECIFIC_MULTIPLE_MASS  + " " + CensusConstants.MSMS_SPECIFIC_SINGLE_MASS);

                if(CensusConstants.MSMS_SPECIFIC_MULTIPLE_MASS == conf.getExpType() || CensusConstants.MSMS_SPECIFIC_SINGLE_MASS == conf.getExpType())
                {
                    chro.createMsmsSpecificChro();
                }
                else if(CensusConstants.MSMS_DATA_INDEPENDENT == conf.getExpType()) //data independent
                {
                                chro.createMsmsXmlChro(chroProgress);
                }
                else if(CensusConstants.MSMS_QUANT == conf.getExpType()) //data ms2 quant
                {
                    chro.createMsmsQautnXmlChro(chroProgress);
                } else if(CensusConstants.MSMS_DATA_INDEPENDENT_LFREE == conf.getExpType()) //data independent labelfree
                {
                  chro.createDIALabelfree();
                }
                else //for now data independent and non itraq call same method.  This will be fixed later.
                {
                    chro.createMsmsXmlChro(chroProgress);
                }

                break;

            default :
                break;
        }


    }


    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
// TODO add your handling code here:
        setVisible(false);
        dispose();

        //final String spectralFormat = this.spectralFormatGrp.getSelection().getActionCommand();
        final String spectrumFolder = this.spectrumField.getText();
        final String configFile = this.configField.getText();
        final String dtaFile = this.idFileField.getText();



        final ChroProgressDialog chroProgress = new ChroProgressDialog(this.mFrame, false);
        chroProgress.setLocationRelativeTo(this);
        chroProgress.setResizable(false);

        final RelExMainFrame parentFrame = this.mFrame;


        //chroProgress.setProgress(WIDTH);
  /*
        final JDialog convertProgress = new ChroProgressDialog(this.mFrame, false);
        convertProgress.setLocationRelativeTo(this);
        convertProgress.setResizable(false);
        convertProgress.setSize(500, 100);
        convertProgress.setResizable(false);
        convertProgress.pack();
convertProgress.add(progressBar);

        convertProgress.setVisible(true);
*/

        final JProgressBar progressBar = new JProgressBar(0, 100);
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        //progressBar.setVisible(true);

        //Container cp1 = convertProgress.getContentPane();
        //cp1.add(progressBar, BorderLayout.NORTH);

        if(null == conf)
            conf = Configuration.getInstance();

        conf.setSpectrumFormat(Configuration.MS_FILE_FORMAT);



        /*
        if("MS1".equals(spectralFormat))
        {
            conf.setSpectrumFormat(Configuration.MS_FILE_FORMAT);

        } else if("mzXML".equals(spectralFormat))
        {
            conf.setSpectrumFormat(Configuration.MZXML_FILE_FORMAT);
        }
        */

        //System.out.println("===============>>" + conf.getSpectrumFormat());

//        elementFile = filePath + File.separator + conf.getElementCompFile();
        Thread t = new Thread()
        {
            boolean isSuccessful = false;

            public void run()
            {
                try {
                    conf = Configuration.getInstance();
                    conf.setStartTime();
                    conf.setFilePath(spectrumFolder);
                    conf.readXMLParam(configFile);
                    conf.setIdFileName(dtaFile);
                    conf.setLabeling(true);
                    conf.setXmlConf(true);

                    //Generate MS1 files
                    File ff = new File(spectrumFolder);
                    String[] flist = ff.list(new RelExFileFilter(CensusConstants.MS1_FILE));
                    String[] ms2flist = ff.list(new RelExFileFilter(CensusConstants.MS2_FILE));
                    String[] mzflist = ff.list(new RelExFileFilter(CensusConstants.MZXML));

		    /*
                    if(flist.length<=0 && mzflist.length<0)
                    {
                        System.out.println("Error: Spectral files are not found.");
                    }

                    if(flist.length<=0)
                    {
                        //throw new CensusGeneralException("Error: Spectral files are ot found. If you use mzXML, please use option '-x'");
                        ChroProgressDialog progressDialog = new ChroProgressDialog(parentFrame);
                        //JDialog progressDialog = new JDialog(parentFrame);
                        //progressDialog.add(progressBar);
                        progressDialog.setSize(500, 100);
                        progressDialog.setLocationRelativeTo(parentFrame);
                        progressDialog.pack();
                        progressDialog.setResizable(false);
                        progressDialog.setVisible(true);

                        progressDialog.addMessage("Converting mzXML to MS1 files");
                        Mzxml2Ms.converMzXML2MS(spectrumFolder, progressDialog);

                        progressDialog.setVisible(false);
                    }*/

		    //if(isLabeled && flist.length<=0 && conf.getQuantLevel()==1 && mzflist.length<=0)
		    if(flist.length<=0 && conf.getQuantLevel()==1 && mzflist.length<=0)
		    {
                        ChroProgressDialog progressDialog = new ChroProgressDialog(parentFrame);
                        progressDialog.setSize(500, 100);
                        progressDialog.setLocationRelativeTo(parentFrame);
                        progressDialog.pack();
                        progressDialog.setResizable(false);
                        progressDialog.setVisible(true);
			progressDialog.addMessage("Converting mzXML to MS1 files...  this is one time job.");
			Mzxml2Ms.converMzXML2MS(spectrumFolder, progressDialog);
			progressDialog.addMessage("Converting mzXML to MS1 files is completed.");
                        progressDialog.setVisible(false);
		    }

		    if( ms2flist.length<=0 && conf.getQuantLevel() == 2)
		    {
                        ChroProgressDialog progressDialog = new ChroProgressDialog(parentFrame);
                        progressDialog.setSize(500, 100);
                        progressDialog.setLocationRelativeTo(parentFrame);
                        progressDialog.pack();
                        progressDialog.setResizable(false);
                        progressDialog.setVisible(true);
			progressDialog.addMessage("Converting mzXML to MS2 files...  this is one time job.");
			Mzxml2Ms.converMzXML2MS2(spectrumFolder, progressDialog);
			System.out.println("Converting mzXML to MS2 files is completed.");
			progressDialog.addMessage("Converting mzXML to MS2 files is completed.");
                        progressDialog.setVisible(false);
		    }


                    chroProgress.setVisible(true);

                    ChroGenerator chro = new ChroGenerator(
                            chroProgress//.getProgressBar(),
                            //chroProgress.getProgressText()
                            //configFile,
                            //dtaFile
                            //massTolerance
                    );

                    chroProgress.addMessageWithLine("Census starts to analyze data...");
                    runLabeledAnalysis(chro, chroProgress, conf);
                    isSuccessful = true;

                }catch(IOException e) {
                    e.printStackTrace();
                    //JOptionPane.showMessageDialog(parentFrame, "Failed to generate a chro file: " + e, "Failed to generate a chro file", JOptionPane.ERROR_MESSAGE);
		    chroProgress.setVisible(false);
		    chroProgress.hide();
                    JOptionPane.showMessageDialog(parentFrame, "Failed to generate a chro file " , "Failed to generate a chro file", JOptionPane.ERROR_MESSAGE);
                }catch(Exception e) {
                    e.printStackTrace();
		    chroProgress.setVisible(false);
		    chroProgress.hide();
                    JOptionPane.showMessageDialog(parentFrame, "Failed to generate a chro file " , "Failed to generate a chro file", JOptionPane.ERROR_MESSAGE);
                }


                SwingUtilities.invokeLater(new Runnable()
                {
                    public void run()
                    {
                        chroProgress.setVisible(false);
                        chroProgress.hide();

                        if(isSuccessful)
                        {
                            //JOptionPane.showMessageDialog(
                            //        parentFrame,
                            //        "Chro file is successfully created",
                            //        "Chro file Creation",
                            //        JOptionPane.PLAIN_MESSAGE);

                            parentFrame.openChroFile(spectrumFolder + File.separator + "census_chro.xml");
                        }
                    }
                 });
            }
        };

        try {
            t.start();

        } catch(Exception e)
        {
            t = null;
                        //chroProgress.setVisible(false);
        }


        //ChroGenerator chro = new ChroGenerator(bar, null, 50, 50, filePath + File.separator + "N15isotope.ini", massTolerance);


    }//GEN-LAST:event_okBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OpenConfigDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
         */

        OpenConfigDialog d = new OpenConfigDialog(new RelExMainFrame(), true);
        //OpenConfigDialog d = new OpenConfigDialog();
        d.test();
        //OpenConfigDialog.test();
    }



    //private static void test() throws Exception {
    private void test() throws Exception {
// TODO add your handling code here:

        JProgressBar bar = new JProgressBar();
        bar.setValue(40);
        bar.setVisible(true);

        conf = Configuration.getInstance();
	conf.setStartTime();

         //final String isFull = quantModeRadioGrp.getSelection().getActionCommand();

        final ChroProgressDialog chroProgress = new ChroProgressDialog(this.mFrame, false);
        final RelExMainFrame parentFrame = this.mFrame;
        //chroProgress.setLocationRelativeTo(this);
        //chroProgress.setResizable(false);
        //chroProgress.setVisible(true);


        final String spectrumFolder = "/home/rpark/001/MRM/jvenable"; //this.spectrumField.getText();
        final String configFile = "/home/rpark/001/MRM/jvenable/census_config.xml"; //this.configField.getText();
        final String dtaFile = "/home/rpark/001/MRM/jvenable/DTASelect-filter.txt"; //this.idFileField.getText();



//        elementFile = filePath + File.separator + conf.getElementCompFile();

        conf.setFilePath(spectrumFolder);
        conf.readXMLParam(configFile);
        conf.setIdFileName(dtaFile);

        ChroGenerator chro = new ChroGenerator(
  //null, null //
                chroProgress
                //chroProgress.getProgressText()
                //configFile,
                //dtaFile
                //massTolerance
        );

        System.out.println(conf.getQuantLevel());

        switch(conf.getQuantLevel())
        {
            case 1: //Full
                chro.createFullscanXmlChro();
                break;

            case 2: //MSMS
                chro.createMsmsXmlChro(null);
                break;

            default :
                break;
        }




        Thread t = new Thread()
        {
            boolean isSuccessful = false;

            public void run()
            {
                try {


                    //Fix me.

                    //conf.readXMLParam(configFile);

                    /*
                    ChroGenerator chro = new ChroGenerator(
                            chroProgress.getProgressBar(),
                            chroProgress.getProgressText(),
                            50,
                            50,
                            spectrumFolder,
                            configFile,
                            dtaFile
                            //massTolerance
                            );
                    */

                    //if( isFull.equals("f") ) //Full Scan
                    //    chro.createFullscanXmlChro();
                    //else //msms scan

                    isSuccessful = true;
                }catch(Exception e) {
                    //JOptionPane.showMessageDialog(parentFrame, "Failed to generate a chro file: " + e, "Failed to generate a chro file", JOptionPane.ERROR_MESSAGE);
                }

                /*
                SwingUtilities.invokeLater(new Runnable()
                {
                    public void run()
                    {
                        chroProgress.setVisible(false);

                        if(isSuccessful)
                        {
                            JOptionPane.showMessageDialog(
                                    parentFrame,
                                    "Chro file is successfully created",
                                    "Chro file Creation",
                                    JOptionPane.PLAIN_MESSAGE);

                            parentFrame.openChroFile(spectrumFolder + File.separator + "census_chro.xml");

                        }
                    }
                 });
                 */
            }
        };

        try {
           // t.start();

        } catch(Exception e)
        {
            t = null;
                        //chroProgress.setVisible(false);
        }

    }







    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton confFileBtn;
    private javax.swing.JTextField configField;
    private javax.swing.JTextField idFileField;
    private javax.swing.JButton ifFieldBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton okBtn;
    private javax.swing.ButtonGroup spectralFormatGrp;
    private javax.swing.JButton spectrumBtn;
    private javax.swing.JTextField spectrumField;
    // End of variables declaration//GEN-END:variables

}
