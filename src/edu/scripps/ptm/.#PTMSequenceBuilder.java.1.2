package edu.scripps.ptm;

import edu.scripps.pms.util.dtaselect.Peptide;
import edu.scripps.pms.util.dtaselect.Protein;
import edu.scripps.pms.util.io.DTASelectFilterReader;
import edu.scripps.ptm.FastaProteinReader;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Harshil
 */
public class PTMSequenceBuilder 
{
    public List getProteins(String filePath,String fileName)
    {
        List<ProteinIndex> proteinIndexList = new ArrayList();
         try {
            DTASelectFilterReader reader = new DTASelectFilterReader(filePath+File.separator+fileName);
            Iterator<Protein> itr =reader.getProteins();
            Protein protein=null;
            while(itr.hasNext())
            {   
                protein=itr.next();
                String accession = protein.getAccession();
                FastaProteinReader fr = new FastaProteinReader();
                String proteinSequence =fr.getProteinSeq(reader.getDbFilePathAndName(), accession);
                List<Peptide> peptideList = protein.getPeptideList();
                Iterator<Peptide> peptideIterator = peptideList.iterator();
//                System.out.println("**********"+protein.getAccession());
                ProteinIndex proteinIndex = new ProteinIndex(protein.getAccession(),proteinSequence);

                while(peptideIterator.hasNext())
                {
                    Peptide peptide = peptideIterator.next();
                    getIndex(peptide, proteinSequence,proteinIndex);
                }
                if(proteinIndex.getChangedIndex().size()!=0)
                    proteinIndexList.add(proteinIndex);
//                System.out.println("");
                
            }                      
        } catch (IOException ex) {
            Logger.getLogger(PTMSequenceBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(ProteinIndex pr : proteinIndexList)
        {
            System.out.println("---->"+pr.getAccession());
            Set<Integer> s=pr.getChangedIndex();
            for(int index : s)
            {
                System.out.println("--"+pr.getProteinSequence().charAt(index)+ ":" +index+":" +  pr.getModifiedArr()[index]);
            }
        }
        return proteinIndexList;
    }
    public static void main(String args[])
    {
        PTMSequenceBuilder ptmBuilder = new PTMSequenceBuilder();
        List<ProteinIndex> plist = ptmBuilder.getProteins("/home/rpark/test_data/phospho/ben", "DTASelect-filter.txt");
        
        System.out.println("done");
//          ptmBuilder.getProteins("C:\\Users\\Harshil\\Desktop\\", "dta-test.txt");
        
    }
    public void getIndex(Peptide peptideSequence,String proteinSequence ,ProteinIndex proteinIndex)
    {
//        Index peptideIndex= new Index();
        String[] splitter =  peptideSequence.getSequence().split("[().]");
        String searchingString="";
         for(int i=1;i<splitter.length-1;i+=3)
             searchingString += splitter[i];
//         System.out.print(searchingString);
        int startingIndex = proteinSequence.indexOf(searchingString);
        
        searchingString ="";
        splitter = peptideSequence.getSequence().split("[.]");
        for(int i=1;i<splitter.length-1;i++)
             searchingString += splitter[i];
        
        
        for(int i=0;i< searchingString.length();i++)
        {
            if(i<searchingString.length()-1  && searchingString.charAt(i+1) == '(')
            {
                //Its a modifide string 
                proteinIndex.addModifiedIndex(startingIndex,peptideSequence.getSpectralCount());
                proteinIndex.setUnModifiedIndex(startingIndex,0);
                proteinIndex.addChangedIndex(startingIndex);
                while(true)
                {
                    i++;
                    if(searchingString.charAt(i) == ')')
                        break;
                }
            }
            else
            {
                //add the getseq to the arrray index......
                proteinIndex.addUnModifiedIndex(startingIndex,peptideSequence.getSpectralCount());
            }
            startingIndex++;
        }
    }
}
