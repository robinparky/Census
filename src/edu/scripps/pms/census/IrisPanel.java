/*
 * IrisPanel.java
 *
 * Created on November 11, 2005, 1:20 PM
 */

package edu.scripps.pms.census;

/**
 *
 * @author  rpark
 */

import ptolemy.plot.plotml.PlotBoxMLParser;

import edu.scripps.pms.census.plot.*;
import ptolemy.plot.plotml.PlotMLParser;
import ptolemy.plot.*;
import edu.scripps.pms.census.hash.*;

import java.util.*;
import edu.scripps.pms.census.util.*;
import edu.scripps.pms.census.model.*;

public class IrisPanel extends javax.swing.JPanel {

    private ChroPeptide peptide;
    private Hashtable<String, IndexedFile> ht;

    public IrisPanel() {
        super();
        initComponents();
    }
    
    /** Creates new form IrisPanel */
    public IrisPanel(Hashtable ht, ChroPeptide peptide) {
        this();
        this.setHt(ht);
        this.peptide = peptide;
                
        //draw plot
        drawPlot();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
        add(jPanel1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    public void drawPlot(Hashtable ht, ChroPeptide peptide)
    {
        this.setHt(ht);
        this.peptide = peptide;
                
        //draw plot
        drawPlot();
    }
    
    private void drawPlot()
    {
        
        try {
            
            //011406_50percent_enriched-04.itms.ms2
                                
            StringBuffer xmlData = new StringBuffer();
            xmlData.append("<?xml version=\"1.0\" standalone=\"no\"?>");   
            xmlData.append("<plot>");
            xmlData.append("<title>Iris - Fragment Ions</title>");
            xmlData.append("<xLabel>m/z</xLabel>");
            xmlData.append("<yLabel>Intensity</yLabel>");

            xmlData.append("<grid/>");    
            xmlData.append("<dataset name=\"peak_list\" marks=\"none\" connected=\"no\" stems=\"yes\">");

            //<tick label="90-100" position="90" />                     
            //xmlData.append("<p x=\"213\" y=\"43\" />");
            //xmlData.append("<p x=\"2131\" y=\"423\" />");
            //xmlData.append("<p x=\"2123\" y=\"443\" />");

            //String ms2FileName = peptide.getFileName().substring(0, peptide.getFileName().indexOf("."));
            
            String ms2FileName=peptide.getFileName();
            for(int i=0;i<3;i++)
                ms2FileName = ms2FileName.substring(0, ms2FileName.lastIndexOf("."));

            ms2FileName += ".ms2";

            IndexedFile iFile = ht.get( ms2FileName );

            if(null == iFile)
            {
                throw new Exception("Error : cannot find the file " + ms2FileName);
            }

            int[] keys = iFile.getKeys();
            int keyIndex = Arrays.binarySearch(keys, peptide.getScanNum());


            if(keyIndex<0) //Cannot find index
                keyIndex=-(++keyIndex); //Math.abs(++keyIndex);

            IrisDataModel dataModel = CalcUtil.readSpectrumPeaks(iFile, keyIndex, keys);
            
            double[] massArr = dataModel.getMass();
            double[] intArr = dataModel.getIntensity();
            
            for(int i=0;i<massArr.length;i++)
            {
                xmlData.append("<p x=\"").append(massArr[i]).append("\" y=\"").append(intArr[i]).append("\" />");
            }            
            
            xmlData.append("</dataset>");
            xmlData.append("</plot>");                        

            Plot plot = new IrisPlot();
            
            PlotMLParser parser = new PlotMLParser( (Plot)plot );
            plot.clear(true);            
            plot.repaint();        
            parser.parse(null, xmlData.toString());

            jPanel1.add(plot);
                    
        } catch (Exception e) {
            System.out.println("Error : " + e);
            e.printStackTrace();
        }
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
    private PlotBoxMLParser chroXmlParser;

    public ChroPeptide getPeptide() {
        return peptide;
    }

    public void setPeptide(ChroPeptide peptide) {
        this.peptide = peptide;
    }

    public Hashtable<String, IndexedFile> getHt() {
        return ht;
    }

    public void setHt(Hashtable<String, IndexedFile> ht) {
        this.ht = ht;
    }
}
