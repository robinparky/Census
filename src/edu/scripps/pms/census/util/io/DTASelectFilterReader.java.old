package edu.scripps.pms.util.io;

import java.io.BufferedReader;
import java.util.*;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileReader;
import java.io.RandomAccessFile;

import edu.scripps.pms.util.dtaselect.Protein;
import edu.scripps.pms.util.dtaselect.Peptide;

import edu.scripps.pms.census.model.*;
        
/**
 * @author  Robin Park
 * @version $Id: DTASelectFilterReader.java.old,v 1.1 2014/09/09 19:29:52 rpark Exp $
 */
public class DTASelectFilterReader
{
    private final long READ_FROM_THE_END = 500; //position from the end

    private String dbFileName;
//    private InputStreamReader reader;
    private String fileName;
    private BufferedReader br;
    private String lastLine = "";
    private String criteria;
//    private int unfilteredProteinNum;
    private int redundantProteinNum;
//    private int nonRedundantProteinNum;
    private int unfilteredPeptideNum;
    private int redundantPeptideNum;
//    private int nonRedundantPeptideNum;
    private double confidence;
    private double CONFIDENCE_THRESHOLD=0.05;

    private boolean version2;  //DTASelect version

    public static void main(String args[]) throws IOException
    {
        DTASelectFilterReader reader = new DTASelectFilterReader( args[0] );

        Iterator<Protein> pitr = reader.getProteins();

        Protein protein;
	Peptide peptide;
        ArrayList<Protein> aList = new ArrayList<Protein>();

	HashSet set = new HashSet();

int i=0;
        for (Iterator<Protein> itr = pitr; itr.hasNext(); )
        {
            protein = itr.next();

//            System.out.println(protein.getLocus());
            if( protein.getLocus().startsWith("Rever") || protein.getLocus().startsWith("contam") || protein.getLocus().startsWith("Contam") )
                continue;

                for(Iterator<Peptide> pepItr=protein.getPeptides(); pepItr.hasNext(); )
                {
                    peptide = pepItr.next();
            //		if(protein.getLocus().equals("IPI00430839.1"))
       //             System.out.println(peptide.getSequence());
		    i++;

                }

            if(protein.getPeptideSize()<=0)
            {
                aList.add(protein);
                set.add(protein.getLocus());
            }
            else
            {
            /*
                for(Iterator<Protein> tempItr=aList.iterator(); tempItr.hasNext(); )
                {
                    Protein tempProtein = tempItr.next();

                    for(Iterator<Peptide> pepItr=protein.getPeptides(); pepItr.hasNext(); )
                    {

                        peptide = pepItr.next();
                            if(protein.getLocus().equals("IPI00430839.1"))
                                System.out.println(peptide.getSequence());

                    }
                }
*/
                aList.clear();


            }
        }
//		System.out.println(set.size());
		System.out.println(i);
/*

        for(Iterator<Protein> itr = pitr; itr.hasNext(); )
        {
            p = itr.next();
            System.out.println( p.getLocus() );

		if(p.getLocus().equals("IPI00430839.1"))
		{

                    for(Iterator<Peptide> itr2=p.getPeptides(); itr2.hasNext(); )
                    {
                        Peptide pep = itr2.next();

                        System.out.println("==>>" + pep.getSequence() + "\t");
                    }

		}
/*
            if(p.getPeptideSize()<=0)
            {
                aList.add(p);
            }
            else
            {
                for(Iterator<Protein> tempItr=aList.iterator(); tempItr.hasNext(); )
                {
                    Protein tempProtein = tempItr.next();

  //                  System.out.print(tempProtein.getLocus());// + "\t" + tempProtein.getSeqCount() + "\t");

                    int ii=0;
                    for(Iterator<Peptide> itr2=p.getPeptides(); itr2.hasNext(); )
                    {
                        Peptide pep = itr2.next();

                        //System.out.println("conf==>>" + pep.getConf() + "\t");

                        ii++;
                    }

                    //System.out.println(ii);

                }

                aList.clear();

            }
*/

        //System.out.println(reader.getDbFileName());
        //System.out.println(reader.getCriteria());
        //System.out.println(reader.getNonRedundantProteinNum());
        //System.out.println(reader.getNonRedundantPeptideNum());
    }

    public DTASelectFilterReader(String fileName) throws IOException
    {
        this.fileName = fileName;
//        this.reader = new FileReader(fileName);
        init();
    }

    /*
    public Iterator <Protein> getProteins(final InputStream is) throws IOException {
        return getProteins(new InputStreamReader(is));
    }
*/
    private void readSummary() throws IOException
    {
        RandomAccessFile file = new RandomAccessFile(fileName, "r");

        file.seek(file.length()-500);

        String eachLine;
        eachLine=file.readLine();

        while( (eachLine=file.readLine()) != null && !eachLine.startsWith("Filtered") );

        String[] arr = eachLine.split("\t");
        this.redundantProteinNum = Integer.parseInt(arr[1]);
        this.redundantPeptideNum = Integer.parseInt(arr[2]);

/*
        this.unfilteredProteinNum = Integer.parseInt(arr[1]);
        this.unfilteredPeptideNum = Integer.parseInt(arr[2]);

        eachLine=file.readLine(); //Redundant line of DTASelect-filter.txt
	System.out.println("===>>" + eachLine);
        arr = eachLine.split("\t");
        this.redundantProteinNum = Integer.parseInt(arr[1]);
        this.redundantPeptideNum = Integer.parseInt(arr[2]);

        eachLine=file.readLine(); //NonRedundant line of DTASelect-filter.txt
	System.out.println("===>>" + eachLine);
        arr = eachLine.split("\t");
        this.nonRedundantProteinNum = Integer.parseInt(arr[1]);
        this.nonRedundantPeptideNum = Integer.parseInt(arr[2]);
*/

        file.close();
    }

    private void init() throws IOException
    {
        readSummary();

        br = new BufferedReader(new FileReader(fileName));

        readHeader();

        //Move line to parse protein
        while (!(lastLine = br.readLine()).startsWith("Unique"));

        lastLine = br.readLine();
    }

    private void readHeader() throws IOException
    {
        lastLine = br.readLine();

        if(lastLine.startsWith("DTASelect v2.0"))
            version2 = true;
        else
            version2 = false;

        //whie (!(lastLine = br.readLine()).endsWith("fasta")); .startsWith("Unique"));
        for(int i=0; i<2; i++)
            lastLine = br.readLine();

        //Remove directory name
        this.dbFileName = lastLine.substring(lastLine.lastIndexOf("/")+1);

        if(version2)
        {
            //Move line to parameters.  We assume parameters start after carriage return
            while( !(lastLine = br.readLine()).startsWith("SEQUEST") && !lastLine.startsWith("ProLuCID") );
            lastLine = br.readLine();

            String tempLine = lastLine;
            int tempIndex = tempLine.indexOf("fp");
            if(tempIndex<0)
            {
                confidence = CONFIDENCE_THRESHOLD;
            }
            else
            {
                tempLine = tempLine.substring(tempIndex+3);

                tempIndex = tempLine.indexOf(" ");
                if(tempIndex>0)
                    tempLine = tempLine.substring(0, tempIndex);
                confidence = Double.parseDouble(tempLine);
            }
            
            StringBuffer sb = new StringBuffer();
            sb.append(lastLine=br.readLine());  //Read this line, which can be either empty or not
            while (!(lastLine = br.readLine()).equals(""))
            {
                sb.append(lastLine);
                sb.append("\n");
            }

            criteria = sb.toString();
        }

//        System.out.println("dbfilename==>>" + dbFileName + " " + confidence);
    }

    public double getConfidence()
    {
        return confidence;
    }
    
    public ArrayList<ChroProtein> getChroProteinList() throws IOException {
        
        ArrayList list = new ArrayList();
        
        for(Iterator<Protein> itr=getProteins(); itr.hasNext(); )
        {
            Protein protein = itr.next();
            
            list.add( ChroProtein.convertProtein(protein) );
            
        }
        
        return list;
    }
    
    
    public Iterator <Protein> getProteins() throws IOException {
        return new Iterator<Protein>() {
            private Protein protein;
            private Peptide peptide;

            public boolean hasNext() {
                return lastLine != null && !lastLine.startsWith("\tProteins\t");
            }

            public Protein next() {

                try {
                    protein = getProtein(lastLine);
                }
                catch (IOException e) {
                    e.printStackTrace();
                }

                return protein;
            }

            public void remove() {
                throw new UnsupportedOperationException("Not supported");
            }

            //private Protein getProtein(String[] strArr) throws IOException {
            private Protein getProtein(String proteinLine) throws IOException {

//                String[] strArr = lastLine.split("\t");

		try {
		    String[] strArr = proteinLine.split("\t");
		    protein = new Protein(proteinLine);

		    /*
		       The format of the DTASelect-filter.txt file peptide line
		       is the following:

		       - a star if the peptide is unique to that protein (optional)
		       - then an integer greater than 1 (optional)
		       - then one of the characters 'M', 'Y', or 'N' (optional)
		       - then tab (mandatory)
		       - then the rest of the fields...

		       Anything that comes until the first tab is optional. You can
		       have a line that starts with "\t", or "*\t", or "2\t", or
		       "*2\t", or "*2M\t", or "Y\t", or "2N\t", or "*Y\t", etc...

		       Peptide line starts like (*)(int)(M||Y||N)\t
		     */

		    /*
		     *  Some proteins does not have peptide lines, because those proteins
		     *  are assumed to have identical peptides as following protein has.
		     *
		     **/


		    while ( ((lastLine = br.readLine()) != null && !lastLine.equals(""))
			    && !lastLine.startsWith("\tProteins\t"))
		    {

			strArr = lastLine.split("\t");

			// If Spectrum Count position does not have a decimal point,
			// it is not a peptide line
			if(strArr[2].indexOf(".")<=0)
			    break;

			peptide = new Peptide(strArr, version2);
			protein.addPeptide(peptide);
		    }

		}
		catch(Exception e)
		{
		    throw new IOException("Your DTASelect-filter.txt file is corrupted.  Please remove this line : " + proteinLine);
		}	

		return protein;
            }
        };
    }

    public void close() throws IOException
    {
        br.close();
    }

    public void setDbFileName(String dbFileName)
    {
        this.dbFileName = dbFileName;
    }

/*
    public void setUnfilteredProteinNum(int unfilteredProteinNum)
    {
        this.unfilteredProteinNum = unfilteredProteinNum;
    }
*/

    public void setRedundantProteinNum(int redundantProteinNum)
    {
        this.redundantProteinNum = redundantProteinNum;
    }

/*
    public void setNonRedundantProteinNum(int nonRedundantProteinNum)
    {
        this.nonRedundantProteinNum = nonRedundantProteinNum;
    }
*/

    public void setUnfilteredPeptideNum(int unfilteredPeptideNum)
    {
        this.unfilteredPeptideNum = unfilteredPeptideNum;
    }

    public void setRedundantPeptideNum(int redundantPeptideNum)
    {
        this.redundantPeptideNum = redundantPeptideNum;
    }

/*
    public void setNonRedundantPeptideNum(int nonRedundantPeptideNum)
    {
        this.nonRedundantPeptideNum = nonRedundantPeptideNum;
    }
*/

    public String getDbFileName()
    {
        return dbFileName;
    }

    public String getCriteria()
    {
        return criteria;
    }

/*
    public int getUnfilteredProteinNum()
    {
        return unfilteredProteinNum;
    }
*/

    public int getRedundantProteinNum()
    {
        return redundantProteinNum;
    }

/*
    public int getNonRedundantProteinNum()
    {
        return nonRedundantProteinNum;
    }
*/

    public int getUnfilteredPeptideNum()
    {
        return unfilteredPeptideNum;
    }

    public int getRedundantPeptideNum()
    {
        return redundantPeptideNum;
    }

/*
    public int getNonRedundantPeptideNum()
    {
        return nonRedundantPeptideNum;
    }
*/

    public boolean isVersion2() {
        return version2;
    }
}
