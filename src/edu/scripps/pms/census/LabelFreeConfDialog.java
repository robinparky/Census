/*
 * LabelFreeConfDialog.java
 *
 * Created on May 2, 2006, 5:04 PM
 */

package edu.scripps.pms.census;

import javax.swing.*;
import java.io.*;
import org.jdom.*;
import org.jdom.output.*;
import org.jdom.input.*;

import java.util.*;

import edu.scripps.pms.census.util.*;
import edu.scripps.pms.census.io.*;
import edu.scripps.pms.census.model.*;
import edu.scripps.pms.census.*;
import javax.swing.table.*;

/**
 *
 * @author  rpark
 */
public class LabelFreeConfDialog extends javax.swing.JDialog {
    
    private RelExMainFrame mFrame;
    private File currentFolder=null;

    private final String[] PROTEIN_COLUMNS = {"Name", "C", "H", "O", "N", "S", "P", "15N", "2H", "13C", };
    private final String[] AA = {"A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y", "NTERM", "CTERM", "STAR", "POUND", "AT", };

    private final String[][] DEFAULT_CELL_DATA = {                
        {"A", "3", "5", "1", "1", "0", "0", "0", "0", "0", },
        {"C", "5", "8", "2", "2", "1", "0", "0", "0", "0", },
        {"D", "4", "5", "3", "1", "0", "0", "0", "0", "0", },
        {"E", "5", "7", "3", "1", "0", "0", "0", "0", "0", },
        {"F", "9", "9", "1", "1", "0", "0", "0", "0", "0", },
        {"G", "2", "3", "1", "1", "0", "0", "0", "0", "0", },
        {"H", "6", "7", "1", "3", "0", "0", "0", "0", "0", },
        {"I", "6", "11", "1", "1", "0", "0", "0", "0", "0", },
        {"K", "6", "12", "1", "2", "0", "0", "0", "0", "0", },
        {"L", "6", "11", "1", "1", "0", "0", "0", "0", "0", },
        {"M", "5", "9", "1", "1", "1", "0", "0", "0", "0", },
        {"N", "4", "6", "2", "2", "0", "0", "0", "0", "0", },
        {"P", "5", "7", "1", "1", "0", "0", "0", "0", "0", },
        {"Q", "5", "8", "2", "2", "0", "0", "0", "0", "0", },
        {"R", "6", "12", "1", "4", "0", "0", "0", "0", "0", },
        {"S", "3", "5", "2", "1", "0", "0", "0", "0", "0", },
        {"T", "4", "7", "2", "1", "0", "0", "0", "0", "0", },
        {"V", "5", "9", "1", "1", "0", "0", "0", "0", "0", },
        {"W", "11", "10", "1", "2", "0", "0", "0", "0", "0", },
        {"Y", "9", "9", "2", "1", "0", "0", "0", "0", "0", },
        {"NTERM", "0", "1", "0", "0", "0", "0", "0", "0", "0", },
        {"CTERM", "0", "1", "1", "0", "0", "0", "0", "0", "0", },
        {"*", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
        {"#", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
        {"@", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
    };
    
    private DefaultTableModel isotopeLightElementModel = 
        new DefaultTableModel( this.DEFAULT_CELL_DATA, this.PROTEIN_COLUMNS) 
    {
        public boolean isCellEditable(int row, int column)
        {
            if(column==0)            
                return false;
            else
                return true;
        }        
    };
    
    
    /** Creates new form LabelFreeConfDialog */
    public LabelFreeConfDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();
        initAdditional();
        
        this.mFrame = (RelExMainFrame)parent;    
        this.currentFolder = new File(mFrame.getCurrentDirectory());        
    }
    
    private JTable atomTable = null;
    
    private void initAdditional()
    {
        
        atomTable = new edu.scripps.pms.census.ColorTable();
        atomTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        atomTable.setModel(isotopeLightElementModel);
        jScrollPane3.setViewportView(atomTable);
        /*
        this.name3.setVisible(false);
        this.name3Field.setVisible(false);
        this.scrollPane3.setVisible(false);
        this.addSpecBtn3.setVisible(false);
        this.remove3.setVisible(false);
        */
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        extMethodRadioGrp = new javax.swing.ButtonGroup();
        alignRadioGrp = new javax.swing.ButtonGroup();
        fileSelectBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        setList = new javax.swing.JList();
        addSet = new javax.swing.JButton();
        remove1 = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        paramPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        quanScanType = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        isoLabel = new javax.swing.JLabel();
        isoField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        maxWinField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        isoFieldUnit = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        bandLabel = new javax.swing.JLabel();
        bandConField = new javax.swing.JTextField();
        alignUnitLabel = new javax.swing.JLabel();
        retionAligneRadio = new javax.swing.JRadioButton();
        peakAlignRadio = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        wholeEnvRadio = new javax.swing.JRadioButton();
        indivIsoRadio = new javax.swing.JRadioButton();
        envMargin = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        massAccField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        elePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuration Dialog for Labeling Free");
        fileSelectBtn.setText("Open...");
        fileSelectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSelectBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save...");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Sets"));
        jScrollPane1.setViewportView(setList);

        addSet.setText("Add Set");
        addSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSetActionPerformed(evt);
            }
        });

        remove1.setText("Remove");
        remove1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 519, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel3Layout.createSequentialGroup()
                .add(166, 166, 166)
                .add(addSet)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(remove1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addSet)
                    .add(remove1)))
        );

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Chromatograms"));
        quanScanType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MS", "MS/MS" }));
        quanScanType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quanScanTypeActionPerformed(evt);
            }
        });

        jLabel5.setText("Quantification Scan Type");

        isoLabel.setText("Isolation Window");
        isoLabel.setEnabled(false);

        isoField.setEditable(false);
        isoField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        isoField.setText("3");
        isoField.setEnabled(false);

        jLabel13.setText("Max # Scans");

        maxWinField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxWinField.setText("300");

        jLabel12.setText("scans");

        isoFieldUnit.setText("m/z");
        isoFieldUnit.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(isoLabel)
                    .add(jLabel13))
                .add(22, 22, 22)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(isoField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(isoFieldUnit))
                    .add(quanScanType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(maxWinField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel12))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(quanScanType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(isoLabel)
                    .add(isoFieldUnit)
                    .add(isoField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(maxWinField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12)
                    .add(jLabel13))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Alignment"));
        bandLabel.setText("Band Constraint");

        bandConField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bandConField.setText("500");

        alignUnitLabel.setText("scans");

        alignRadioGrp.add(retionAligneRadio);
        retionAligneRadio.setText("Align on Retention Time");
        retionAligneRadio.setActionCommand("Retention Time");
        retionAligneRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        retionAligneRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        retionAligneRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retionAligneRadioActionPerformed(evt);
            }
        });

        alignRadioGrp.add(peakAlignRadio);
        peakAlignRadio.setSelected(true);
        peakAlignRadio.setText("Align on MS Spectral Correlation");
        peakAlignRadio.setActionCommand("Peak Profile");
        peakAlignRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        peakAlignRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        peakAlignRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peakAlignRadioActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(retionAligneRadio)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(bandLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                        .add(bandConField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(alignUnitLabel))
                    .add(peakAlignRadio))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(peakAlignRadio)
                .add(19, 19, 19)
                .add(retionAligneRadio)
                .add(29, 29, 29)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bandLabel)
                    .add(alignUnitLabel)
                    .add(bandConField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Extraction Method"));
        extMethodRadioGrp.add(wholeEnvRadio);
        wholeEnvRadio.setSelected(true);
        wholeEnvRadio.setText("Whole Isotope Envelope");
        wholeEnvRadio.setActionCommand("1");
        wholeEnvRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        wholeEnvRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));

        extMethodRadioGrp.add(indivIsoRadio);
        indivIsoRadio.setText("Individual Isotopes");
        indivIsoRadio.setActionCommand("2");
        indivIsoRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        indivIsoRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));

        envMargin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        envMargin.setText("0.3");

        jLabel14.setText("Envelope Margin");

        jLabel15.setText("m/z");

        jLabel8.setText("Mass Accuracy");

        massAccField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        massAccField.setText("30");

        jLabel16.setText("ppm");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel14)
                            .add(jLabel8))
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(massAccField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(1, 1, 1)
                                .add(jLabel16)
                                .add(6, 6, 6))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(23, 23, 23)
                                .add(envMargin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(wholeEnvRadio)
                    .add(indivIsoRadio))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(wholeEnvRadio)
                .add(7, 7, 7)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(envMargin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15))
                .add(21, 21, 21)
                .add(indivIsoRadio)
                .add(12, 12, 12)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(massAccField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel16)
                    .add(jLabel8)))
        );

        org.jdesktop.layout.GroupLayout paramPanelLayout = new org.jdesktop.layout.GroupLayout(paramPanel);
        paramPanel.setLayout(paramPanelLayout);
        paramPanelLayout.setHorizontalGroup(
            paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, paramPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(73, 73, 73))
        );
        paramPanelLayout.setVerticalGroup(
            paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, paramPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(paramPanelLayout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(250, 250, 250))
        );
        jTabbedPane1.addTab("Parameters", paramPanel);

        elePanel.setLayout(new java.awt.BorderLayout());

        elePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Element Composition"));
        jScrollPane3.setMaximumSize(new java.awt.Dimension(32767, 32000));
        elePanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Element Composition", elePanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jTabbedPane1, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(17, 17, 17)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(fileSelectBtn, 0, 0, Short.MAX_VALUE)
                            .add(cancelBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(saveBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(fileSelectBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelBtn)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 417, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editBtnActionPerformed_backup(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
        DataSetModel dModel = dataSetList.get( setList.getSelectedIndex() );
        
        LabelFreeDataSetDialog dialog = new LabelFreeDataSetDialog(this.mFrame,true, this);

        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        dialog.setResizable(false);

    }
    
    private void retionAligneRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retionAligneRadioActionPerformed
// TODO add your handling code here:
        this.bandLabel.setEnabled(false);
        this.bandConField.setEnabled(false);
        this.alignUnitLabel.setEnabled(false);
    }//GEN-LAST:event_retionAligneRadioActionPerformed

    private void peakAlignRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peakAlignRadioActionPerformed
// TODO add your handling code here:
        this.bandLabel.setEnabled(true);
        this.bandConField.setEnabled(true);
        this.alignUnitLabel.setEnabled(true);
    }//GEN-LAST:event_peakAlignRadioActionPerformed

    private void quanScanTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quanScanTypeActionPerformed
// TODO add your handling code here:
        JComboBox box = (JComboBox)evt.getSource();

        String item = box.getSelectedItem().toString();
        if("MS".equals(item))
        {
            this.isoField.setEnabled(false);
            this.isoField.setEditable(false);
            this.isoLabel.setEnabled(false);
        }
        else if("MS/MS".equals(item))
        {
            this.isoField.setEnabled(true);
            this.isoField.setEditable(true);
            this.isoLabel.setEnabled(true);
        }
    }//GEN-LAST:event_quanScanTypeActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
// TODO add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void fileSelectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSelectBtnActionPerformed

        // TODO add your handling code here:
        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select configuration File");

        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        //String[] extArr = {"xml", "ini", };
        String[] extArr = {"xml", };
        
        choose.addChoosableFileFilter( new SimpleFileNameFilter(extArr, "configuration file") );

        int returnVal = choose.showOpenDialog(this);
        File file = choose.getSelectedFile();
                                    
        if(null==file)
            return;
        
        try {
            //listModel.addElement(file.getAbsolutePath());
            SAXBuilder builder = new SAXBuilder();

            Document doc = builder.build(file);
            Element rootEle = doc.getRootElement();

            IsotopeReader reader = new IsotopeReader(rootEle);
            
            IsotopeTable<String, int[]> ht = reader.getIsotope();
            
            String labelingType = rootEle.getChild("label_type").getAttributeValue("labeling");
            
            if(!"false".equals(labelingType))
            {
                JOptionPane.showMessageDialog(this, "Please open config file for labeling free data", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
              
            
            Element paramEle = rootEle.getChild("params");
            
            String scanType = paramEle.getChildText("scan_type");
            this.quanScanType.setSelectedItem( scanType );
            
            String isoWindow = paramEle.getChildText("iso_window");
            if(null != isoWindow)
                this.isoField.setText(isoWindow);
            
            String extMethod = paramEle.getChildText("extract_method");
            Element massEle = paramEle.getChild("mass_accuracy");
            if( "1".equals(extMethod) )
            {
                this.wholeEnvRadio.setSelected(true);
                this.indivIsoRadio.setSelected(false);
                
                this.envMargin.setText( massEle.getText() );
            }
            else if( "2".equals(extMethod) )
            {
                this.wholeEnvRadio.setSelected(false);
                this.indivIsoRadio.setSelected(true);
                
                this.massAccField.setText( massEle.getText() );
            }
            
            Element alignEle = paramEle.getChild("alignment");
            String isAlign = alignEle.getAttributeValue("align");
            
            if( "true".equals(isAlign) )
            {
                this.peakAlignRadio.setSelected(true);
                this.retionAligneRadio.setSelected(false);
                
            }
            else if("false".equals(isAlign))
            {
             
                this.peakAlignRadio.setSelected(false);
                this.retionAligneRadio.setSelected(true);   
            }
            
            this.bandConField.setText(alignEle.getChildText("band_con"));            
            this.maxWinField.setText( paramEle.getChildText("max_win") );
            
            for(int i=0;i<ElementComposition.AMINO_ACIDS.length;i++)
            {
                //ElementComposition element = new ElementComposition(ElementComposition.AMINO_ACIDS[i], ht);
                
                int[] samArr = ht.get("sample" + ElementComposition.AMINO_ACIDS[i]);
                int[] refArr = ht.get("ref" + ElementComposition.AMINO_ACIDS[i]);
                                                
                //System.out.print("------------\t" + ElementComposition.AMINO_ACIDS[i]);
                for(int j=0;j<samArr.length;j++)
                {
                    //System.out.print(samArr[j] + "(" + j + ") ");
                    this.isotopeLightElementModel.setValueAt(samArr[j], i, j+1);
                }                
                
                //System.out.println(" ");
                
            }
            
            List<Element> sList = rootEle.getChildren("sample");
            for(Iterator<Element> sItr=sList.iterator(); sItr.hasNext(); )
            {
                Element sEach = sItr.next();
                String setName = sEach.getChildText("name");
            
                DefaultListModel listModel = new DefaultListModel();  
                
                for(Iterator<Element> fileItr=sEach.getChild("ms_files").getChildren("file").iterator(); fileItr.hasNext(); )
                {
                    Element fEach = fileItr.next();
                    
                    listModel.addElement(fEach.getText());
                }
                
                updateDataSet(listModel, setName);
            }
            
           
            
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(this, "Failed to open Element Compositon File: " + e, "Failed to open Element Compositon File", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Failed to open Element Compositon File: " + e, "Failed to open Element Compositon File", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        
        this.currentFolder = file.getAbsoluteFile();
        this.mFrame.setCurrentDirectory(file);
        
        //fileList.setModel(listModel);
    /*    JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select Element Composition File");
        
        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);
        
        String[] extArr = {"xml", "ini", };
        
        choose.addChoosableFileFilter( new SimpleFileNameFilter(extArr, "Isotope File") );
        
        int returnVal = choose.showOpenDialog(this);
        File file = choose.getSelectedFile();
        
        if(null==file)
            return;
        
        try {
            //listModel.addElement(file.getAbsolutePath());
            IsotopeReader reader = new IsotopeReader(file);
            IsotopeTable<String, int[]> ht = reader.getIsotope();
            
            for(int i=0;i<ElementComposition.AMINO_ACIDS.length;i++) {
                //ElementComposition element = new ElementComposition(ElementComposition.AMINO_ACIDS[i], ht);
                
                int[] samArr = ht.get("sample" + ElementComposition.AMINO_ACIDS[i]);
                int[] refArr = ht.get("ref" + ElementComposition.AMINO_ACIDS[i]);
                
                //System.out.print("------------\t" + ElementComposition.AMINO_ACIDS[i]);
                for(int j=0;j<samArr.length;j++) {
                    System.out.print(samArr[j] + " ");
                    this.isotopeLightElementModel.setValueAt(samArr[j], i+1, j+1);
                }
                //System.out.print("\t\t");
                
                //System.out.print("------------\t" + ElementComposition.AMINO_ACIDS[i]);
                for(int j=0;j<refArr.length;j++) {
                    System.out.print(refArr[j] + " ");
                    this.isotopeHeavyElementModel.setValueAt(refArr[j], i+1, j+1);
                }
                
                System.out.println("");
                
            }
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Failed to open Element Compositon File: " + e, "Failed to open Element Compositon File", JOptionPane.ERROR_MESSAGE);
        }
        
        
        this.currentFolder = file.getAbsoluteFile();
        this.mFrame.setCurrentDirectory(file);
      */  
        //fileList.setModel(listModel);
    }//GEN-LAST:event_fileSelectBtnActionPerformed


    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
    // TODO add your handling code here:
        
        if(0>=dataSetList.size())
        {
            JOptionPane.showMessageDialog(this, "Error : No data set was selected.  Please add data set.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
                
        Vector vec = new Vector();
                       
        Element rootEle = new Element("config");
        Element labelType = new Element("label_type");        
        labelType.setAttribute("labeling", "false");
        rootEle.addContent(labelType);
                        
        Element paramEle = new Element("params");
        Element eachParam = new Element("scan_type");
        eachParam.addContent(this.quanScanType.getModel().getSelectedItem().toString());
        paramEle.addContent(eachParam);        
        
        eachParam = new Element("extract_method");                
        eachParam.addContent(this.extMethodRadioGrp.getSelection().getActionCommand());
        paramEle.addContent(eachParam);
        
        eachParam = new Element("mass_accuracy");        
        
        if( "1".equals(this.extMethodRadioGrp.getSelection().getActionCommand()) )
        {
            eachParam.setAttribute("unit", "mz");
            eachParam.addContent(this.envMargin.getText());
        }
        else
        {
            eachParam.setAttribute("unit", "ppm");
            eachParam.addContent(this.massAccField.getText());
        }
        
        paramEle.addContent(eachParam);
        
        if(this.isoField.isEnabled())
        {
            eachParam = new Element("iso_window");
            eachParam.addContent(this.isoField.getText());
            paramEle.addContent(eachParam);            
        }
        
        eachParam = new Element("max_win");
        eachParam.addContent(this.maxWinField.getText());
        paramEle.addContent(eachParam);
        
        //eachParam = new Element("avg_interval");
        //eachParam.addContent(this.avgIntevalField.getText());
        //paramEle.addContent(eachParam);
        
        //eachParam = new Element("peak_margin");
        //eachParam.addContent(this.peakMarginField.getText());
        //paramEle.addContent(eachParam);
        
        //eachParam = new Element("area_threshold");
        //eachParam.addContent(this.areaThresholdField.getText());
        //paramEle.addContent(eachParam);
        
        rootEle.addContent(paramEle);
        
        eachParam = new Element("alignment");
        
        if( this.alignRadioGrp.getSelection().getActionCommand().equals("Peak Profile") )            
        {
            eachParam.setAttribute("align", "true");
            
            Element bandConEle = new Element("band_con");
            bandConEle.setText( this.bandConField.getText() );
            
            eachParam.addContent(bandConEle);
            
            Element alignTypeEle = new Element("align_type");
            
            alignTypeEle.setText( this.alignRadioGrp.getSelection().getActionCommand() );
            eachParam.addContent(alignTypeEle);
        }
        else //retention time alignment
        {
            eachParam.setAttribute("align", "false");
        }
        
        paramEle.addContent(eachParam);
        
        for(Iterator<DataSetModel> itr=dataSetList.iterator(); itr.hasNext(); )
        {
            DataSetModel model = itr.next();
        
            Element eachSample = new Element("sample");
            eachSample.addContent( new Element("name").addContent( model.getName() ) );    

            Element msFiles = new Element("ms_files");        
            DefaultListModel listModel = model.getListModel();
            for(Enumeration enu = listModel.elements(); enu.hasMoreElements(); )
            {
                String eachPath = enu.nextElement().toString();
                msFiles.addContent( new Element("file").addContent(eachPath));
                vec.add( new SelectFileModel(model.getName(), eachPath) );
            }                        

            eachSample.addContent(msFiles);            
            
            rootEle.addContent(eachSample);
        }
        
        
        //element composition
        TableModel model = this.atomTable.getModel();
                        
        Element eleCompEle = new Element("element_comp");
        Element eachSampleEle = new Element("each_sample");
        
        for(int i=0;i<this.atomTable.getRowCount();i++)
        {
            Element residueEle = new Element("residue");
            residueEle.setAttribute("name", this.atomTable.getValueAt(i,0).toString());
            
            Element eachValue = null;
            
            for(int j=1;j<this.atomTable.getColumnCount();j++)
            {                
                eachValue = new Element( "ele_" + PROTEIN_COLUMNS[j] );                
                eachValue.addContent(this.atomTable.getValueAt(i,j).toString());
                residueEle.addContent(eachValue);                
            }            
            eachSampleEle.addContent(residueEle);            
        }
        
        eleCompEle.addContent(eachSampleEle);
        rootEle.addContent(eleCompEle);
        
        
        
        if( this.alignRadioGrp.getSelection().getActionCommand().equals("Peak Profile") )            
        {
            setVisible(false);
            dispose();

            SelectRefMSDialog msDia = new SelectRefMSDialog(new javax.swing.JFrame(), true, rootEle, vec);
            msDia.setVisible(true);                    
        } else
        {
            
            JFileChooser choose = new JFileChooser();
            choose.setMultiSelectionEnabled(false);
            choose.setDialogTitle("Save Configuration file");
            choose.setApproveButtonText("Create");

            //choose.addChoosableFileFilter( new SimpleFileNameFilter("txt", "CenSus Report File (*.txt)") );

            File f = new File("census_config.xml");
            choose.setSelectedFile(f);        


            int returnVal = choose.showOpenDialog(this);        

            if(returnVal == choose.CANCEL_OPTION)
                return;

            File file = choose.getSelectedFile();       

            try
            {
                Document doc = new Document(rootEle);
                OutputStream os = new FileOutputStream(file); //(filePath + "census_chro.xml");             
                XMLOutputter outputter = new XMLOutputter();
                outputter.setFormat(Format.getPrettyFormat());             
                outputter.output(doc, os);
                os.close();         
            } 
            catch (IOException e)
            {
                JOptionPane.showMessageDialog(this, "Error: " + e, "Error", JOptionPane.ERROR_MESSAGE);
            }

            //JOptionPane.showMessageDialog(this, "configuration file was successfully saved", "Saved", JOptionPane.INFORMATION_MESSAGE);
            
            
            setVisible(false);
            dispose();

        }
            
        
        /*
        TableModel model = this.lightTable.getModel();
                
        //String[] chemArr = {"C", "H", "O", "N", "S", "P", "15N", "2H", "13C", };
        
        Element eleCompEle = new Element("element_comp");
        Element eachSampleEle = new Element("each_sample");
        
        for(int i=0;i<this.lightTable.getRowCount();i++)
        {
            Element residueEle = new Element("residue");
            residueEle.setAttribute("name", this.lightTable.getValueAt(i,0).toString());
            
            Element eachValue = null;
            
            for(int j=1;j<this.lightTable.getColumnCount();j++)
            {                
                eachValue = new Element( "ele_" + PROTEIN_COLUMNS[j] );                
                eachValue.addContent(this.lightTable.getValueAt(i,j).toString());
                residueEle.addContent(eachValue);                
            }            
            eachSampleEle.addContent(residueEle);            
        }
        
        eleCompEle.addContent(eachSampleEle);
        
        eachSampleEle = new Element("each_sample");
        
        for(int i=0;i<this.heavyTable.getRowCount();i++)
        {
            Element residueEle = new Element("residue");
            residueEle.setAttribute("name", this.heavyTable.getValueAt(i,0).toString());
            
            Element eachValue = null;
            
            for(int j=1;j<this.heavyTable.getColumnCount();j++)
            {                
                eachValue = new Element( "ele_" + PROTEIN_COLUMNS[j] );                
                //eachValue.setAttribute("value", this.heavyTable.getValueAt(i,j).toString());
                eachValue.addContent(this.heavyTable.getValueAt(i,j).toString());                        
                residueEle.addContent(eachValue);                
            }            
            eachSampleEle.addContent(residueEle);            
        }
        */
                
        //eleCompEle.addContent(eachSampleEle);
        
        
        //rootEle.addContent(eleCompEle);
 
    }//GEN-LAST:event_saveBtnActionPerformed

    public static class DataSetModel
    {
        private String name;
        private DefaultListModel listModel;
        
        public DataSetModel(String name, DefaultListModel listModel)
        {
            this.setName(name);
            this.setListModel(listModel);
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public DefaultListModel getListModel() {
            return listModel;
        }

        public void setListModel(DefaultListModel listModel) {
            this.listModel = listModel;
        }
    }
    

    
    public void updateDataSet(DefaultListModel listModel, String setName)
    {
        dataSetList.add(new DataSetModel(setName, listModel));
        
        this.setListModel.addElement(setName + " " + listModel.size() + " file(s)");
        
        setList.setModel(setListModel);
    }
        
    private void remove1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove1ActionPerformed
// TODO add your handling code here:
                
        int index = this.setList.getSelectedIndex();
        setListModel.remove(index);

        setList.setModel(setListModel);
    }//GEN-LAST:event_remove1ActionPerformed

    private void addSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSetActionPerformed
// TODO add your handling code here:
        
        LabelFreeDataSetDialog dialog = new LabelFreeDataSetDialog(this.mFrame,true, this);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        dialog.setResizable(false);
        
        /*
        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select Spectra File");
        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        int returnVal = choose.showOpenDialog(this);
        
        File file = choose.getSelectedFile();

        if(null==file)
            return;

        listModel1.addElement(file.getAbsolutePath());
        this.currentFolder = file.getAbsoluteFile();
        this.mFrame.setCurrentDirectory(file);
        
        fileList1.setModel(listModel1);
        */
        
    }//GEN-LAST:event_addSetActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabelFreeConfDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSet;
    private javax.swing.ButtonGroup alignRadioGrp;
    private javax.swing.JLabel alignUnitLabel;
    private javax.swing.JTextField bandConField;
    private javax.swing.JLabel bandLabel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel elePanel;
    private javax.swing.JTextField envMargin;
    private javax.swing.ButtonGroup extMethodRadioGrp;
    private javax.swing.JButton fileSelectBtn;
    private javax.swing.JRadioButton indivIsoRadio;
    private javax.swing.JTextField isoField;
    private javax.swing.JLabel isoFieldUnit;
    private javax.swing.JLabel isoLabel;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField massAccField;
    private javax.swing.JTextField maxWinField;
    private javax.swing.JPanel paramPanel;
    private javax.swing.JRadioButton peakAlignRadio;
    private javax.swing.JComboBox quanScanType;
    private javax.swing.JButton remove1;
    private javax.swing.JRadioButton retionAligneRadio;
    private javax.swing.JButton saveBtn;
    private javax.swing.JList setList;
    private javax.swing.JRadioButton wholeEnvRadio;
    // End of variables declaration//GEN-END:variables
    
    private DefaultListModel setListModel = new DefaultListModel();    
    private ArrayList<DataSetModel> dataSetList = new ArrayList<DataSetModel>();    //actually data list for configuration file
}
