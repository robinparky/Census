<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.2.0, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Tue Jun 10 09:39:10 PDT 2008

  Jar file to be obfuscated:           census.jar
  Target Jar file for obfuscated code: census_obf.jar

-->
<!--
  Memory in use after class data structure built: 9989736 bytes
  Total memory available                        : 17920000 bytes
-->
<expose>
  <method class="com.microstar.xml.HandlerBase" name="void startElement(java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="java.lang.Object resolveEntity(java.lang.String, java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="void startExternalEntity(java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="void error(java.lang.String, java.lang.String, int, int)"/>
  <method class="com.microstar.xml.HandlerBase" name="void endElement(java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="void doctypeDecl(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="void processingInstruction(java.lang.String, java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="void ignorableWhitespace(char[], int, int)"/>
  <method class="com.microstar.xml.HandlerBase" name="void charData(char[], int, int)"/>
  <method class="com.microstar.xml.HandlerBase" name="void endExternalEntity(java.lang.String)"/>
  <method class="com.microstar.xml.HandlerBase" name="void endDocument()"/>
  <method class="com.microstar.xml.HandlerBase" name="void attribute(java.lang.String, java.lang.String, boolean)"/>
  <method class="com.microstar.xml.HandlerBase" name="void startDocument()"/>
  <method class="com.microstar.xml.XmlHandler" name="void startElement(java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="java.lang.Object resolveEntity(java.lang.String, java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="void startExternalEntity(java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="void error(java.lang.String, java.lang.String, int, int)"/>
  <method class="com.microstar.xml.XmlHandler" name="void endElement(java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="void doctypeDecl(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="void processingInstruction(java.lang.String, java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="void ignorableWhitespace(char[], int, int)"/>
  <method class="com.microstar.xml.XmlHandler" name="void charData(char[], int, int)"/>
  <method class="com.microstar.xml.XmlHandler" name="void endExternalEntity(java.lang.String)"/>
  <method class="com.microstar.xml.XmlHandler" name="void endDocument()"/>
  <method class="com.microstar.xml.XmlHandler" name="void attribute(java.lang.String, java.lang.String, boolean)"/>
  <method class="com.microstar.xml.XmlHandler" name="void startDocument()"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_currentCharData"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="PlotML_DTD_1"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_parser"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_plot"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_attributes"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void startElement(java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void startExternalEntity(java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="java.lang.Object resolveEntity(java.lang.String, java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void error(java.lang.String, java.lang.String, int, int)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void endElement(java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void _checkForNull(java.lang.Object, java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void charData(char[], int, int)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void postProcessing()"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="java.lang.String _currentExternalEntity()"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void endDocument()"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void attribute(java.lang.String, java.lang.String, boolean)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void parse(java.net.URL, java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void parse(java.net.URL, java.io.Reader)"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void startDocument()"/>
  <method class="ptolemy.plot.plotml.PlotBoxMLParser" name="void parse(java.net.URL, java.io.InputStream)"/>
  <field class="ptolemy.plot.plotml.PlotMLParser" name="_currentPointCount"/>
  <field class="ptolemy.plot.plotml.PlotMLParser" name="_currentDataset"/>
  <field class="ptolemy.plot.plotml.PlotMLParser" name="_connected"/>
  <method class="ptolemy.plot.plotml.PlotMLParser" name="void _addPoint(boolean, java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotMLParser" name="void endElement(java.lang.String)"/>
  <method class="ptolemy.plot.plotml.PlotMLParser" name="void startDocument()"/>
  <method class="ptolemy.plot.plotml.PlotMLParser" name="void startElement(java.lang.String)"/>
  <field class="ptolemy.plot.PlotBox" name="_drawn"/>
  <field class="ptolemy.plot.PlotBox" name="_xExp"/>
  <field class="ptolemy.plot.PlotBox" name="PTPLOT_RELEASE"/>
  <field class="ptolemy.plot.PlotBox" name="_yTop"/>
  <field class="ptolemy.plot.PlotBox" name="_wrapHigh"/>
  <field class="ptolemy.plot.PlotBox" name="_LOG10SCALE"/>
  <field class="ptolemy.plot.PlotBox" name="_yExp"/>
  <field class="ptolemy.plot.PlotBox" name="_ytickMax"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomin"/>
  <field class="ptolemy.plot.PlotBox" name="_zooming"/>
  <field class="ptolemy.plot.PlotBox" name="_foreground"/>
  <field class="ptolemy.plot.PlotBox" name="_ylabel"/>
  <field class="ptolemy.plot.PlotBox" name="_sizeHasBeenSet"/>
  <field class="ptolemy.plot.PlotBox" name="_printButton"/>
  <field class="ptolemy.plot.PlotBox" name="_topPadding"/>
  <field class="ptolemy.plot.PlotBox" name="_legendStrings"/>
  <field class="ptolemy.plot.PlotBox" name="_xBottom"/>
  <field class="ptolemy.plot.PlotBox" name="_xtickscale"/>
  <field class="ptolemy.plot.PlotBox" name="_xhighgiven"/>
  <field class="ptolemy.plot.PlotBox" name="_xMin"/>
  <field class="ptolemy.plot.PlotBox" name="_yMin"/>
  <field class="ptolemy.plot.PlotBox" name="screenMode"/>
  <field class="ptolemy.plot.PlotBox" name="_gridBase"/>
  <field class="ptolemy.plot.PlotBox" name="_labelFontMetrics"/>
  <field class="ptolemy.plot.PlotBox" name="_actionsDeferred"/>
  <field class="ptolemy.plot.PlotBox" name="_bottomPadding"/>
  <field class="ptolemy.plot.PlotBox" name="_height"/>
  <field class="ptolemy.plot.PlotBox" name="_xlog"/>
  <field class="ptolemy.plot.PlotBox" name="toolPanel"/>
  <field class="ptolemy.plot.PlotBox" name="_xlowgiven"/>
  <field class="ptolemy.plot.PlotBox" name="_wrap"/>
  <field class="ptolemy.plot.PlotBox" name="_ylog"/>
  <field class="ptolemy.plot.PlotBox" name="_xRangeGiven"/>
  <field class="ptolemy.plot.PlotBox" name="_rightPadding"/>
  <field class="ptolemy.plot.PlotBox" name="_xtickMin"/>
  <field class="ptolemy.plot.PlotBox" name="_DTD"/>
  <field class="ptolemy.plot.PlotBox" name="_background"/>
  <field class="ptolemy.plot.PlotBox" name="_boxColor"/>
  <field class="ptolemy.plot.PlotBox" name="_panButton"/>
  <field class="ptolemy.plot.PlotBox" name="_legendDatasets"/>
  <field class="ptolemy.plot.PlotBox" name="_xMax"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomyn"/>
  <field class="ptolemy.plot.PlotBox" name="_yMax"/>
  <field class="ptolemy.plot.PlotBox" name="_resetButton"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomButton"/>
  <field class="ptolemy.plot.PlotBox" name="endRange"/>
  <field class="ptolemy.plot.PlotBox" name="_formatButton"/>
  <field class="ptolemy.plot.PlotBox" name="_wrapLow"/>
  <field class="ptolemy.plot.PlotBox" name="scanNum"/>
  <field class="ptolemy.plot.PlotBox" name="startRange"/>
  <field class="ptolemy.plot.PlotBox" name="_errorMsg"/>
  <field class="ptolemy.plot.PlotBox" name="_preferredHeight"/>
  <field class="ptolemy.plot.PlotBox" name="_xticklabels"/>
  <field class="ptolemy.plot.PlotBox" name="_titleFont"/>
  <field class="ptolemy.plot.PlotBox" name="_padding"/>
  <field class="ptolemy.plot.PlotBox" name="_xtickMax"/>
  <field class="ptolemy.plot.PlotBox" name="_xticks"/>
  <field class="ptolemy.plot.PlotBox" name="_width"/>
  <field class="ptolemy.plot.PlotBox" name="_xscale"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomxn"/>
  <field class="ptolemy.plot.PlotBox" name="_grid"/>
  <field class="ptolemy.plot.PlotBox" name="_uly"/>
  <field class="ptolemy.plot.PlotBox" name="_peakAreaButton"/>
  <field class="ptolemy.plot.PlotBox" name="_ulx"/>
  <field class="ptolemy.plot.PlotBox" name="_rangesGivenByZooming"/>
  <field class="ptolemy.plot.PlotBox" name="_usecolor"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomout"/>
  <field class="ptolemy.plot.PlotBox" name="_leftPadding"/>
  <field class="ptolemy.plot.PlotBox" name="_gridCurJuke"/>
  <field class="ptolemy.plot.PlotBox" name="_ytickscale"/>
  <field class="ptolemy.plot.PlotBox" name="_yhighgiven"/>
  <field class="ptolemy.plot.PlotBox" name="_yRangeGiven"/>
  <field class="ptolemy.plot.PlotBox" name="_yticks"/>
  <field class="ptolemy.plot.PlotBox" name="_yscale"/>
  <field class="ptolemy.plot.PlotBox" name="_ylowgiven"/>
  <field class="ptolemy.plot.PlotBox" name="_preferredWidth"/>
  <field class="ptolemy.plot.PlotBox" name="_ytickMin"/>
  <field class="ptolemy.plot.PlotBox" name="_fillButton"/>
  <field class="ptolemy.plot.PlotBox" name="_filespec"/>
  <field class="ptolemy.plot.PlotBox" name="_colors"/>
  <field class="ptolemy.plot.PlotBox" name="_deferredActions"/>
  <field class="ptolemy.plot.PlotBox" name="_documentBase"/>
  <field class="ptolemy.plot.PlotBox" name="_labelFont"/>
  <field class="ptolemy.plot.PlotBox" name="_yBottom"/>
  <field class="ptolemy.plot.PlotBox" name="_superscriptFont"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomy"/>
  <field class="ptolemy.plot.PlotBox" name="_zoomx"/>
  <field class="ptolemy.plot.PlotBox" name="_titleFontMetrics"/>
  <field class="ptolemy.plot.PlotBox" name="_superscriptFontMetrics"/>
  <field class="ptolemy.plot.PlotBox" name="_xlabel"/>
  <field class="ptolemy.plot.PlotBox" name="_lry"/>
  <field class="ptolemy.plot.PlotBox" name="_lrx"/>
  <field class="ptolemy.plot.PlotBox" name="_yticklabels"/>
  <field class="ptolemy.plot.PlotBox" name="_title"/>
  <field class="ptolemy.plot.PlotBox" name="_xTop"/>
  <method class="ptolemy.plot.PlotBox" name="void write(java.io.OutputStream)"/>
  <method class="ptolemy.plot.PlotBox" name="void setTitleFont(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void export(java.io.OutputStream)"/>
  <method class="ptolemy.plot.PlotBox" name="void _executeDeferredActions()"/>
  <method class="ptolemy.plot.PlotBox" name="void paintComponent(java.awt.Graphics)"/>
  <method class="ptolemy.plot.PlotBox" name="double _gridRoundUp(java.util.Vector, double)"/>
  <method class="ptolemy.plot.PlotBox" name="void samplePlot()"/>
  <method class="ptolemy.plot.PlotBox" name="void deferIfNecessary(java.lang.Runnable)"/>
  <method class="ptolemy.plot.PlotBox" name="void setYLog(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void fillPlot()"/>
  <method class="ptolemy.plot.PlotBox" name="int getScanNum()"/>
  <method class="ptolemy.plot.PlotBox" name="void resetAxes()"/>
  <method class="ptolemy.plot.PlotBox" name="void setYLabel(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="java.util.Vector[] getXTicks()"/>
  <method class="ptolemy.plot.PlotBox" name="void setEndRange(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.image.BufferedImage exportImage(java.awt.image.BufferedImage)"/>
  <method class="ptolemy.plot.PlotBox" name="double _gridStep(java.util.Vector, double, double, boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getXLabel()"/>
  <method class="ptolemy.plot.PlotBox" name="void _measureFonts()"/>
  <method class="ptolemy.plot.PlotBox" name="void _setButtonsVisibility(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void write(java.io.Writer, java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void write(java.io.OutputStream, java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void addLegend(int, java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getDataurl()"/>
  <method class="ptolemy.plot.PlotBox" name="void writeOldSyntax(java.io.OutputStream)"/>
  <method class="ptolemy.plot.PlotBox" name="int print(java.awt.Graphics, java.awt.print.PageFormat, int)"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.image.BufferedImage exportImage()"/>
  <method class="ptolemy.plot.PlotBox" name="boolean getYLog()"/>
  <method class="ptolemy.plot.PlotBox" name="void setButtons(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void _setYRange(double, double)"/>
  <method class="ptolemy.plot.PlotBox" name="void init()"/>
  <method class="ptolemy.plot.PlotBox" name="double[] getYRange()"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String _formatNum(double, int)"/>
  <method class="ptolemy.plot.PlotBox" name="void setDataurl(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.image.BufferedImage exportImage(java.awt.image.BufferedImage, java.awt.Rectangle, java.awt.RenderingHints, boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="int _numFracDigits(double)"/>
  <method class="ptolemy.plot.PlotBox" name="void addYTick(java.lang.String, double)"/>
  <method class="ptolemy.plot.PlotBox" name="int _numIntDigits(double)"/>
  <method class="ptolemy.plot.PlotBox" name="void setXRange(double, double)"/>
  <method class="ptolemy.plot.PlotBox" name="void setLabelFont(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="boolean getColor()"/>
  <method class="ptolemy.plot.PlotBox" name="void setScanNum(int)"/>
  <method class="ptolemy.plot.PlotBox" name="boolean getXLog()"/>
  <method class="ptolemy.plot.PlotBox" name="void _drawPlot(java.awt.Graphics, boolean, java.awt.Rectangle)"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.image.BufferedImage exportImage(java.awt.Rectangle)"/>
  <method class="ptolemy.plot.PlotBox" name="void setTitle(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="boolean getGrid()"/>
  <method class="ptolemy.plot.PlotBox" name="void setXLabel(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void clear(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void drawLegendPanel()"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getEndRange()"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.Dimension getMinimumSize()"/>
  <method class="ptolemy.plot.PlotBox" name="void horizontalSpacing(java.awt.Graphics)"/>
  <method class="ptolemy.plot.PlotBox" name="void setGrid(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String _formatLogNum(double, int)"/>
  <method class="ptolemy.plot.PlotBox" name="void parseFile(java.lang.String, java.net.URL)"/>
  <method class="ptolemy.plot.PlotBox" name="java.net.URL getDocumentBase()"/>
  <method class="ptolemy.plot.PlotBox" name="void setColor(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void setWrap(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void setSize(int, int)"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.Dimension getMaximumSize()"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.Dimension getPreferredSize()"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getStartRange()"/>
  <method class="ptolemy.plot.PlotBox" name="void parseFile(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void read(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void setDocumentBase(java.net.URL)"/>
  <method class="ptolemy.plot.PlotBox" name="void setXLog(boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void setBounds(int, int, int, int)"/>
  <method class="ptolemy.plot.PlotBox" name="void setStartRange(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getLegend(int)"/>
  <method class="ptolemy.plot.PlotBox" name="void writeData(java.io.PrintWriter)"/>
  <method class="ptolemy.plot.PlotBox" name="void _help()"/>
  <method class="ptolemy.plot.PlotBox" name="void _drawPoint(java.awt.Graphics, int, long, long, boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void _writeOldSyntax(java.io.PrintWriter)"/>
  <method class="ptolemy.plot.PlotBox" name="boolean _parseLine(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="void addXTick(java.lang.String, double)"/>
  <method class="ptolemy.plot.PlotBox" name="void setForeground(java.awt.Color)"/>
  <method class="ptolemy.plot.PlotBox" name="double _roundUp(double)"/>
  <method class="ptolemy.plot.PlotBox" name="void read(java.io.InputStream)"/>
  <method class="ptolemy.plot.PlotBox" name="java.util.Vector[] getYTicks()"/>
  <method class="ptolemy.plot.PlotBox" name="double[] getXRange()"/>
  <method class="ptolemy.plot.PlotBox" name="void _parsePairs(java.lang.String, boolean)"/>
  <method class="ptolemy.plot.PlotBox" name="void setBackground(java.awt.Color)"/>
  <method class="ptolemy.plot.PlotBox" name="void writeFormat(java.io.PrintWriter)"/>
  <method class="ptolemy.plot.PlotBox" name="void removeLegend(int)"/>
  <method class="ptolemy.plot.PlotBox" name="void setYRange(double, double)"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getYLabel()"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.RenderingHints _defaultImageRenderingHints()"/>
  <method class="ptolemy.plot.PlotBox" name="java.awt.Color getColorByName(java.lang.String)"/>
  <method class="ptolemy.plot.PlotBox" name="java.lang.String getTitle()"/>
  <method class="ptolemy.plot.PlotBox" name="int _drawLegend(java.awt.Graphics, int, int)"/>
  <method class="ptolemy.plot.PlotBox" name="void _setXRange(double, double)"/>
  <method class="ptolemy.plot.PlotBox" name="void zoom(double, double, double, double)"/>
  <method class="ptolemy.plot.PlotBox" name="void _setPadding(double)"/>
  <method class="ptolemy.plot.PlotBox" name="void clearLegends()"/>
  <method class="ptolemy.plot.PlotBox" name="java.util.Vector _gridInit(double, double, boolean, java.util.Vector)"/>
  <method class="ptolemy.plot.PlotBox" name="void _drawPlot(java.awt.Graphics, boolean)"/>
  <field class="ptolemy.plot.Plot" name="_points"/>
  <field class="ptolemy.plot.Plot" name="xValueSet"/>
  <field class="ptolemy.plot.Plot" name="_showing"/>
  <field class="ptolemy.plot.Plot" name="_marks"/>
  <field class="ptolemy.plot.Plot" name="line"/>
  <field class="ptolemy.plot.Plot" name="_currentdataset"/>
  <field class="ptolemy.plot.Plot" name="rectVec"/>
  <method class="ptolemy.plot.Plot" name="void read(java.io.InputStream)"/>
  <method class="ptolemy.plot.Plot" name="boolean getImpulses()"/>
  <method class="ptolemy.plot.Plot" name="void _drawLine(java.awt.Graphics, int, long, long, long, long, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void addPoint(int, double, double, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void writeData(java.io.PrintWriter)"/>
  <method class="ptolemy.plot.Plot" name="void setConnected(boolean)"/>
  <method class="ptolemy.plot.Plot" name="void fillPlot()"/>
  <method class="ptolemy.plot.Plot" name="void setBars(boolean)"/>
  <method class="ptolemy.plot.Plot" name="void writeFormat(java.io.PrintWriter)"/>
  <method class="ptolemy.plot.Plot" name="void setXPersistence(double)"/>
  <method class="ptolemy.plot.Plot" name="void setMarksStyle(java.lang.String)"/>
  <method class="ptolemy.plot.Plot" name="void _writeOldSyntax(java.io.PrintWriter)"/>
  <method class="ptolemy.plot.Plot" name="void _zoom(int, int)"/>
  <method class="ptolemy.plot.Plot" name="java.util.ArrayList getGrayOutList()"/>
  <method class="ptolemy.plot.Plot" name="void _drawBar(java.awt.Graphics, int, long, long, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void setBars(double, double)"/>
  <method class="ptolemy.plot.Plot" name="void _drawErrorBar(java.awt.Graphics, int, long, long, long, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void setPointsPersistence(int)"/>
  <method class="ptolemy.plot.Plot" name="void labelClicked(java.awt.event.MouseEvent)"/>
  <method class="ptolemy.plot.Plot" name="void addPointWithErrorBars(int, double, double, double, double, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void addLegend(int, java.lang.String)"/>
  <method class="ptolemy.plot.Plot" name="void _drawPoint(java.awt.Graphics, int, long, long, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void drawAdditional(java.awt.Graphics)"/>
  <method class="ptolemy.plot.Plot" name="void _drawPlot(java.awt.Graphics, boolean, java.awt.Rectangle)"/>
  <method class="ptolemy.plot.Plot" name="void clear(int)"/>
  <method class="ptolemy.plot.Plot" name="void _checkDatasetIndex(int)"/>
  <method class="ptolemy.plot.Plot" name="void clear(boolean)"/>
  <method class="ptolemy.plot.Plot" name="void setImpulses(boolean)"/>
  <method class="ptolemy.plot.Plot" name="void _drawPeak(java.awt.Graphics)"/>
  <method class="ptolemy.plot.Plot" name="void erasePoint(int, int)"/>
  <method class="ptolemy.plot.Plot" name="java.lang.String getMarksStyle()"/>
  <method class="ptolemy.plot.Plot" name="void setMarksStyle(java.lang.String, int)"/>
  <method class="ptolemy.plot.Plot" name="void setGrayOutList(java.util.ArrayList)"/>
  <method class="ptolemy.plot.Plot" name="int getNumDataSets()"/>
  <method class="ptolemy.plot.Plot" name="void _selectEventRange(java.awt.Graphics2D, int, int, java.awt.event.MouseEvent)"/>
  <method class="ptolemy.plot.Plot" name="boolean getConnected()"/>
  <method class="ptolemy.plot.Plot" name="void _drawImpulse(java.awt.Graphics, long, long, boolean)"/>
  <method class="ptolemy.plot.Plot" name="void setNumSets(int)"/>
  <method class="ptolemy.plot.Plot" name="int getMaxDataSets()"/>
  <method class="ptolemy.plot.Plot" name="void setImpulses(boolean, int)"/>
  <method class="ptolemy.plot.Plot" name="void parseFile(java.lang.String, java.net.URL)"/>
  <method class="ptolemy.plot.Plot" name="void _drawPlotPoint(java.awt.Graphics, int, int)"/>
  <method class="ptolemy.plot.Plot" name="void setReuseDatasets(boolean)"/>
  <method class="ptolemy.plot.Plot" name="void drawLegendPanel()"/>
  <method class="ptolemy.plot.Plot" name="void setConnected(boolean, int)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getFilePath()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double getEndMassHeavy()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setIonProportion(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setBionRef(double[][])"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getCalcMHplus()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setCalcMHplus(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setScanNum(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getMhPlus()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double[][] getBionSample()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setUnique(boolean)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setFilePath(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setAvgMassLight(double)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setMhPlus(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String[] getPeptideLine()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setYionRef(double[][])"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double[][] getYionSample()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void addScore(java.lang.String, java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double getEndMassLight()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getLoScan()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setRt(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setXCorr(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getRt()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getFileName()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setChargeState(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getDeltCN()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getRedundancy()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setConf(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setRedundancy(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.util.Hashtable getScoreHt()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double getAvgMassHeavy()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getSpScore()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double[][] getBionRef()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setStartMassHeavy(double)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getChargeState()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double getStartMassHeavy()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="boolean isUnique()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getIonProportion()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setDeltCN(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setStartMassLight(double)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double getAvgMassLight()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getSpRank()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setEndMassHeavy(double)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getConf()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getXCorr()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setBionSample(double[][])"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double getStartMassLight()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getTotalIntensity()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getSequence()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setSpRank(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="java.lang.String getScanNum()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setYionSample(double[][])"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setSpScore(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setSequence(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setEndMassLight(double)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="double[][] getYionRef()"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setTotalIntensity(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setScoreHt(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void setAvgMassHeavy(double)"/>
  <class name="edu.scripps.pms.census.exception.InvalidAAException"/>
  <class name="edu.scripps.pms.census.exception.PrecursorNotFoundException"/>
  <class name="edu.scripps.pms.census.exception.CensusIndexOutOfBoundException"/>
  <class name="edu.scripps.pms.census.exception.CensusGeneralException"/>
  <class name="edu.scripps.pms.census.hash.IndexedFile"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="int getStartScanNum()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void setRtPrecursorMap(gnu.trove.TDoubleDoubleHashMap)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void close()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="double getPrecursorByScanNum(int)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void setRtArr(double[])"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void setRtScanNumMap(gnu.trove.TDoubleIntHashMap)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="int getScanNumByRtIndex(int)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="long getPosByRt(double)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void setMzreader(edu.scripps.pms.util.io.MzxmlSpectrumReader)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="edu.scripps.pms.util.io.MzxmlSpectrumReader getMzreader()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="gnu.trove.TDoubleIntHashMap getRtScanNumMap()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="int getLastScanNum()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="gnu.trove.TIntDoubleHashMap getPrecursorMap()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="int[] getKeys()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void createMzXMLScans()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="java.io.RandomAccessFile getFile()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="double[] getRtArr()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="gnu.trove.TIntLongHashMap getMsIndex()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void setRtPosMap(gnu.trove.TDoubleLongHashMap)"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="gnu.trove.TDoubleLongHashMap getRtPosMap()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="gnu.trove.TDoubleDoubleHashMap getRtPrecursorMap()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="gnu.trove.TIntArrayList getKeyIntArr()"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void setKeyIntArr(gnu.trove.TIntArrayList)"/>
  <class name="edu.scripps.pms.census.hash.MSIndexFileCreator"/>
  <method class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="void createIndexFile(java.lang.String)"/>
  <class name="edu.scripps.pms.census.hash.FileHash"/>
  <class name="edu.scripps.pms.census.hash.MSIndexBuilder"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TIntDoubleHashMap getPrecursorMap()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TIntLongHashMap readMS2SimpleIndexFile()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TDoubleDoubleHashMap getRtPrecursorMap()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TIntLongHashMap readMS1IndexFile()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="void setRtScanNumMap(gnu.trove.TDoubleIntHashMap)"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="void setRtPosMap(gnu.trove.TDoubleLongHashMap)"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="void setRtPrecursorMap(gnu.trove.TDoubleDoubleHashMap)"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TDoubleLongHashMap getRtPosMap()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TDoubleIntHashMap getRtScanNumMap()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TIntLongHashMap readMS2IndexFile()"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.hash.MSIndexBuilder" name="gnu.trove.TIntLongHashMap readIndexFile()"/>
  <class name="edu.scripps.pms.census.jtest.ChroValidate"/>
  <method class="edu.scripps.pms.census.jtest.ChroValidate" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.util.RelExFileFilter"/>
  <method class="edu.scripps.pms.census.util.RelExFileFilter" name="boolean accept(java.io.File, java.lang.String)"/>
  <class name="edu.scripps.pms.census.util.BasePeakFinder"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="weightArr"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="DERIVATIVE_ORDER"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="AVG_THRESHOLD"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="start"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="end"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="arr"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="WIDTH"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="smoothArr"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="NUM_POINT"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="size"/>
  <field class="edu.scripps.pms.census.util.BasePeakFinder" name="POLYNOMIAL_ORDER"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="double sgGramPoly(int, int, int, int)"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="double sgWeight(int, int, int, int, int)"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="int sgGenFact(int, int)"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="int getEnd()"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="int[] smoothCurve(int[])"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="void smoothCurve()"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="int getStart()"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="long[] getSmoothArr()"/>
  <method class="edu.scripps.pms.census.util.BasePeakFinder" name="void calc()"/>
  <class name="edu.scripps.pms.census.util.SpectrumUtil"/>
  <method class="edu.scripps.pms.census.util.SpectrumUtil" name="int getNumOfIsolationWindow(java.lang.String)"/>
  <method class="edu.scripps.pms.census.util.SpectrumUtil" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.util.CalcUtil$ResultList"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$ResultList" name="void addElement(int, int, double, double)"/>
  <class name="edu.scripps.pms.census.util.CalcUtil"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] intensitySum(double[], double[], double[])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int findLightKey(int[], int, int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.conf.Configuration)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateFullMS(int, edu.scripps.pms.census.hash.IndexedFile, double, double, double, double, edu.scripps.pms.census.model.SpecRange)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readSpectrum(int[], int, edu.scripps.pms.census.hash.IndexedFile, double[][], double[][])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String peakFindingMSMSMultipleSpecific(edu.scripps.pms.census.util.CalcUtil$SpectrumModel, edu.scripps.pms.census.model.SpecRange, edu.scripps.pms.census.conf.Configuration, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateMRMNoId(java.util.List, java.lang.String[], edu.scripps.pms.census.conf.Configuration, java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="void getSpectrumArr(int[], int, gnu.trove.TIntLongHashMap, java.lang.Object)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readSpectrum(int[], int, gnu.trove.TIntLongHashMap, int, java.lang.Object, double[][], double[][], double[][], double[][])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateNonlabelMS(int, java.lang.String, java.util.Hashtable, int[][][], double[], edu.scripps.pms.census.model.SpecRange, java.lang.String)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String peakFindingMRM(edu.scripps.pms.census.model.mrm.MRMPeptideModel, edu.scripps.pms.census.conf.Configuration, edu.scripps.pms.census.hash.IndexedFile)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="edu.scripps.pms.census.model.FragIonList getBestFragIons(long[][], long[][], long[][], long[][], int, int, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateFullMS(int, double, double, double, double, edu.scripps.pms.census.conf.Configuration, edu.scripps.pms.census.model.SpecRange)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String peakFindingMSMS(edu.scripps.pms.census.util.CalcUtil$SpectrumModel, edu.scripps.pms.census.model.SpecRange, edu.scripps.pms.census.conf.Configuration, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="void findMRMPeakScan(java.util.List, java.lang.String[], java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readFullSpectrum(int[], int, gnu.trove.TIntLongHashMap, java.lang.Object, double[], double[])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="edu.scripps.pms.census.model.IrisDataModel readSpectrumPeaks(edu.scripps.pms.census.hash.IndexedFile, int, int[])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String peakFinding(edu.scripps.pms.census.util.CalcUtil$SpectrumModel, edu.scripps.pms.census.model.SpecRange, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int findNextKeyIndex(int[], int, int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.conf.Configuration, double, boolean)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double calculateSNRatio(long[], long[], int, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int findHeavyKey(int[], int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.conf.Configuration, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int findMRMNextKey(int[], int, int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.conf.Configuration)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readFullSpectrumMS(int[], int, gnu.trove.TIntLongHashMap, java.io.RandomAccessFile, double, double, double, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateFullMS(int, edu.scripps.pms.census.hash.IndexedFile, double[], double[], edu.scripps.pms.census.model.SpecRange)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="void readFullSpectrumMzXml(int[], int, edu.scripps.pms.util.io.MzxmlSpectrumReader)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int findMRMNextKeyIndex(int[], int, int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.conf.Configuration)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double intensitySum(double[], double[], double, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readFullSpectrum(int[], int, gnu.trove.TIntLongHashMap, java.lang.Object, double, double, double, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int findMRMNextKeyIndexByPrecursor(double[], int, int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.conf.Configuration, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String peakFinding(edu.scripps.pms.census.util.CalcUtil$SpectrumModel, edu.scripps.pms.census.model.SpecRange, edu.scripps.pms.census.conf.Configuration, int, double[])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateNonlabelMS(int, java.lang.String, java.util.Hashtable, int[][][], double, double, edu.scripps.pms.census.model.SpecRange, java.lang.String)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readSpectrum(edu.scripps.pms.census.util.CalcUtil$SpectrumModel, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readSpectrumByRt(double[], int, edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.model.mrm.MRMPeptideModel)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateMS2Mass(edu.scripps.pms.census.hash.IndexedFile, edu.scripps.pms.census.model.SpecRange, int, double[][], double[][], double[][], double[][], edu.scripps.pms.census.conf.Configuration, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="void getPeaks(edu.scripps.pms.census.model.ChroPeptide, int, int, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double getWeightedStdev(double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readFullSpectrum(int, gnu.trove.TIntLongHashMap, java.io.RandomAccessFile, double[], edu.scripps.pms.census.model.NonLabelMappingModel, edu.scripps.pms.census.util.CalcUtil$SpectrumModel, java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readFullSpectrumMzXml(int[], int, edu.scripps.pms.util.io.MzxmlSpectrumReader, double, double, double, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="int fixIndex(int, int)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readSpectrumSpecificPeaks(int, edu.scripps.pms.census.hash.IndexedFile, java.util.List, double)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] readSimpleSpectrum(edu.scripps.pms.census.model.mrm.MRMPeptideModel, java.util.ListIterator)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String calculateNonlabelMS(int, java.lang.String, java.util.Hashtable, int[][][], double[], edu.scripps.pms.census.model.SpecRange, java.lang.String, double[][], double[][], edu.scripps.pms.census.hash.IndexedFile)"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double intensitySumForSinglePeak(double[], double[], double, double)"/>
  <class name="edu.scripps.pms.census.util.MergeUtil"/>
  <class name="edu.scripps.pms.census.util.DataIndependentPeakFinder"/>
  <method class="edu.scripps.pms.census.util.DataIndependentPeakFinder" name="void calc()"/>
  <class name="edu.scripps.pms.census.util.SpecCountUtil"/>
  <method class="edu.scripps.pms.census.util.SpecCountUtil" name="void runSpecCount()"/>
  <method class="edu.scripps.pms.census.util.SpecCountUtil" name="void addFile(java.lang.String)"/>
  <class name="edu.scripps.pms.census.util.MergeLabelFreeChro"/>
  <method class="edu.scripps.pms.census.util.MergeLabelFreeChro" name="void mergeLabelFreeChro(java.util.List, java.lang.String)"/>
  <class name="edu.scripps.pms.census.util.AllNoneUtil"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double[] getNormalize(double[])"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double getCOG(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double getCOG(long[])"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double[] getNormalDistFrequency(double[], double, double)"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="void getANScore(edu.scripps.pms.census.model.ChroPeptide, java.util.List, int, int)"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double getMax(double[])"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double[] getXArr(double[])"/>
  <method class="edu.scripps.pms.census.util.AllNoneUtil" name="double getStandardDeviationFromDist(double[], double)"/>
  <class name="edu.scripps.pms.census.util.ChroUtil"/>
  <class name="edu.scripps.pms.census.util.SimpleFileNameFilter"/>
  <method class="edu.scripps.pms.census.util.SimpleFileNameFilter" name="boolean accept(java.io.File)"/>
  <method class="edu.scripps.pms.census.util.SimpleFileNameFilter" name="java.lang.String getDescription()"/>
  <class name="edu.scripps.pms.census.util.LinearRegression"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="double getCorrWithNegative()"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="void setCorr(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="int getBestShift()"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="double getCorr()"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="void setIntercept(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="void setAreaRatio(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="void setBestShift(int)"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="void setSlope(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="double getSlope()"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="double getIntercept()"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="double getAreaRatio()"/>
  <class name="edu.scripps.pms.census.util.DataDependentPeakFinder"/>
  <method class="edu.scripps.pms.census.util.DataDependentPeakFinder" name="void calc()"/>
  <class name="edu.scripps.pms.census.util.StringUtil"/>
  <method class="edu.scripps.pms.census.util.StringUtil" name="java.lang.String removeIsoControlChar(java.lang.String)"/>
  <method class="edu.scripps.pms.census.util.StringUtil" name="boolean startsWithDigitOrUpper(java.lang.String)"/>
  <method class="edu.scripps.pms.census.util.StringUtil" name="boolean startsWithDigit(java.lang.String)"/>
  <class name="edu.scripps.pms.census.util.PostCalculation"/>
  <class name="edu.scripps.pms.census.util.ReportGenerator"/>
  <method class="edu.scripps.pms.census.util.ReportGenerator" name="void exportITRAQMultipleReport(java.lang.String, java.io.File, javax.swing.JFrame)"/>
  <method class="edu.scripps.pms.census.util.ReportGenerator" name="void exportITRAQMultipleReport(java.lang.String, java.io.File)"/>
  <class name="edu.scripps.pms.census.util.LinearRegressionDouble"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="void setCorr(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="int getBestShift()"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="double getCorr()"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="void setIntercept(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="void setAreaRatio(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="void setBestShift(int)"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="void setSlope(double)"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="double getSlope()"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="double getIntercept()"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="double getAreaRatio()"/>
  <class name="edu.scripps.pms.census.util.Dom4jUtil"/>
  <method class="edu.scripps.pms.census.util.Dom4jUtil" name="org.dom4j.Element getRootEle(java.io.File)"/>
  <method class="edu.scripps.pms.census.util.Dom4jUtil" name="org.dom4j.Document getDocument(java.io.File)"/>
  <class name="edu.scripps.pms.census.util.CensusHelper"/>
  <field class="edu.scripps.pms.census.util.CensusHelper" name="scientificFormat"/>
  <field class="edu.scripps.pms.census.util.CensusHelper" name="format"/>
  <class name="edu.scripps.pms.census.util.GenericPeakFinder"/>
  <method class="edu.scripps.pms.census.util.GenericPeakFinder" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.util.GenericPeakFinder" name="void calc()"/>
  <class name="edu.scripps.pms.census.util.IsotopeDist"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="double[] getHighMassList()"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="double[] getMasslist()"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="double getStartMass()"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="double getEachAbund(int, int)"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="double getEndMass()"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="double getAvgMass()"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="void setEnrichment(double)"/>
  <class name="edu.scripps.pms.census.model.mrm.MRMPeptideGroup"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideGroup" name="void addPeptide(edu.scripps.pms.census.model.mrm.MRMPeptideModel)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideGroup" name="void setPeptideList(java.util.List)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideGroup" name="java.util.List getPeptideList()"/>
  <class name="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter" name="void setRt(double)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter" name="double getMass()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter" name="double getRt()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter" name="void setMass(double)"/>
  <class name="edu.scripps.pms.census.model.mrm.MRMPeptideModel"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setSequence(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="double getParentMass()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="double[][] getBionArr()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="java.lang.String getDesc()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setBionArr(double[][])"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setParentMass(double)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setYionArr(double[][])"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="double getStartRt()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="java.lang.String getSequence()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setDesc(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="double[][] getYionArr()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setSnTolerance(double)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="java.util.List getDaughters()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="java.lang.String getName()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setLabeled(boolean)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="java.lang.String getFileName()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="double getSnTolerance()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="boolean isLabeled()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="double getRtTolerance()"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setRtTolerance(double)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setKeyIndex(int)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void addDaughter(double, double)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setDaughters(java.util.List)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="void setStartRt(double)"/>
  <method class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="int getKeyIndex()"/>
  <class name="edu.scripps.pms.census.model.FilterModel"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="boolean isRemoveNegative()"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setRemoveNegative(boolean)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="boolean isFilterFragmentIons()"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="double getPValue()"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="boolean isPValueSelect()"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setDetSelect(boolean)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setDetValue(double)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setPValueSelect(boolean)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setUniquePeptide(boolean)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="boolean isUniquePeptide()"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setPValue(double)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="double getDetValue()"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="void setFilterFragmentIons(boolean)"/>
  <method class="edu.scripps.pms.census.model.FilterModel" name="boolean isDetSelect()"/>
  <class name="edu.scripps.pms.census.model.SelectFileModel"/>
  <method class="edu.scripps.pms.census.model.SelectFileModel" name="java.lang.String getSpectraFileName()"/>
  <method class="edu.scripps.pms.census.model.SelectFileModel" name="java.lang.String toString()"/>
  <method class="edu.scripps.pms.census.model.SelectFileModel" name="void setSpectraFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.SelectFileModel" name="java.lang.String getSampleName()"/>
  <method class="edu.scripps.pms.census.model.SelectFileModel" name="void setSampleName(java.lang.String)"/>
  <class name="edu.scripps.pms.census.model.IrisDataModel"/>
  <method class="edu.scripps.pms.census.model.IrisDataModel" name="double[] getIntensity()"/>
  <method class="edu.scripps.pms.census.model.IrisDataModel" name="void setMass(double[])"/>
  <method class="edu.scripps.pms.census.model.IrisDataModel" name="double[] getMass()"/>
  <method class="edu.scripps.pms.census.model.IrisDataModel" name="void setIntensity(double[])"/>
  <class name="edu.scripps.pms.census.model.SpecRange"/>
  <method class="edu.scripps.pms.census.model.SpecRange" name="int getMax()"/>
  <method class="edu.scripps.pms.census.model.SpecRange" name="int getMin()"/>
  <method class="edu.scripps.pms.census.model.SpecRange" name="void setMin(int)"/>
  <method class="edu.scripps.pms.census.model.SpecRange" name="void setMax(int)"/>
  <class name="edu.scripps.pms.census.model.AlignNode"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int[] rotateOrigin(int, int, int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="boolean checkWithinBound(int, int, int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int[] rotateNew(int, int, int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setPathIndex(int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="double getLocalScore()"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setY(int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setX(int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int getPathIndex()"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="double getCumScore()"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int getJ()"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setLocalScore(double)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setJ(int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int getY()"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setCumScore(double)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="void setI(int)"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int getI()"/>
  <method class="edu.scripps.pms.census.model.AlignNode" name="int getX()"/>
  <class name="edu.scripps.pms.census.model.ChroNonLabelMSMSData"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="long[] getTotalIntArr()"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="void setTandemData(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="void setScanArr(int[])"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="java.util.ArrayList getBList()"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="java.util.ArrayList getYList()"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="void addYList(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="void setTotalIntArr(long[])"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="int[] getScanArr()"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="void addBList(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.model.PepXMLProteinModel"/>
  <class name="edu.scripps.pms.census.model.ChroData"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setBrIntensity(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="double[] getYsStartMass()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setBsStartMass(double[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setMassToleranceHeavy(double)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setBsIntensity(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long[] getIntensityArr()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYsStartMass(double[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setFullScanData(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="java.lang.String getBsIntensityString()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYrIntensity(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long getRefIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="int getFoundIsoPeaksSam()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYsIntensityReverse(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="java.lang.String getYrIntensityString()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setMassToleranceLight(double)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setSampleIntensity(long)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setScanNum(int)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setTotalIsoPeaksRef(int)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setTotalIsoPeaksSam(int)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="double getMassToleranceHeavy()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYsEndMass(double[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="int getTotalIsoPeaksRef()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setIntensityArr(long[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setRefIntensity(long)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="java.lang.String getBrIntensityString()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="double[] getBsEndMass()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long[] getBsIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="double getMassToleranceLight()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setTandemData(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long[] getYsIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setBsIntensity(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setBsEndMass(double[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="double[] getYsEndMass()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long getSampleIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="int getScanNum()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYrIntensity(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="int getFoundIsoPeaksRef()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long[] getBrIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYsIntensity(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setBrIntensity(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long[] getYrIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="int getTotalIsoPeaksSam()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="java.lang.String getYsIntensityString()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setFoundIsoPeaksRef(int)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setFoundIsoPeaksSam(int)"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="double[] getBsStartMass()"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="void setYsIntensity(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="int getResidueLength()"/>
  <class name="edu.scripps.pms.census.model.ChroiTRAQLabelData"/>
  <method class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="void setScanNum(int)"/>
  <method class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="int getScanNum()"/>
  <method class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="void setFullScanData(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="long[] getIntensityArr()"/>
  <method class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="void setIntensityArr(long[])"/>
  <class name="edu.scripps.pms.census.model.SampleModel"/>
  <method class="edu.scripps.pms.census.model.SampleModel" name="java.util.Set getPathSet()"/>
  <method class="edu.scripps.pms.census.model.SampleModel" name="void setPathSet(java.util.Set)"/>
  <method class="edu.scripps.pms.census.model.SampleModel" name="void addPath(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.SampleModel" name="java.lang.String getSampleName()"/>
  <method class="edu.scripps.pms.census.model.SampleModel" name="void setSampleName(java.lang.String)"/>
  <class name="edu.scripps.pms.census.model.IsotopeTable"/>
  <class name="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel"/>
  <method class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel" name="void setProteinList(java.util.List)"/>
  <method class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel" name="java.util.List getProteinList()"/>
  <method class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel" name="void setPeptideList(java.util.List)"/>
  <method class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel" name="java.util.List getPeptideList()"/>
  <class name="edu.scripps.pms.census.model.ChroPeptide"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getPeptideLine()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getTotalIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setCalcMHplus(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setChroCenter(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getAnCompositeScore()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setRatio(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getAreaRatio()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setBionSample(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setOutlierPValue(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getDataSize()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String[] getLabelFreePeptideData()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getMhPlus()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setMassMonitorArr(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setLightMass(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getScanNum()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getRedundancy()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getLightMass()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setUnique(boolean)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getCorrToNorm()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setChargeState(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double[][] getYionSample()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getCalcMHplus()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getZscore()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getOutlierPValue()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setEndRange(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getIonProportion()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getChargeState()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="long[] getTotalIntArr()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setTotalIntArr(long[])"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setAnCompositeScore(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getRatio()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSpectraDataPoints(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getHeavyMass()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setMassMonitorArr(double[])"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSamIntensity(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double[][] getYionRef()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setChargeState(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setDtaEndRange(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSnRatio(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setIonProportion(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setDeltCN(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="boolean isFilterOut()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getSpectraDataPoints()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setMassTolerance(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double[][] getBionSample()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setTotalIntensity(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSpScore(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String[] getPeptideData()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setScanNum(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.util.List getDataList()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getSlope()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSlope(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void addData(edu.scripps.pms.census.model.ChroData)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="boolean isUnique()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setScoreHt(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getXCorr()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.util.Hashtable getScoreHt()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getLoScan()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="edu.scripps.pms.census.model.ChroData getData(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getDtaStartRange()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getEndRange()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getSpRank()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getCorr()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getRefIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getSpScore()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSpecCount(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getAverageIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getStartRange()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setProbability(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setMhPlus(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setStartRange(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getMassTolerance()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setPeptideLine(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setAverageIntensity(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setCorr(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setRefIntensity(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getFragIonNumFoundRatio()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getFileName()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getSamIntensity()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setDtaStartRange(int)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setCorrToNorm(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getDtaEndRange()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="int getChroCenter()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getDeltCN()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getSpecCount()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setZscore(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getDetValue()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void addScore(java.lang.String, java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="java.lang.String getSequence()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double[] getMassMonitorArr()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double[][] getBionRef()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setFilterOut(boolean)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getProbability()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="double getSnRatio()"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSpRank(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setRedundancy(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setFragIonNumFoundRatio(double)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setSequence(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setXCorr(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void setHeavyMass(double)"/>
  <class name="edu.scripps.pms.census.model.BestFragIon"/>
  <method class="edu.scripps.pms.census.model.BestFragIon" name="long[] getRArr()"/>
  <method class="edu.scripps.pms.census.model.BestFragIon" name="long[] getSArr()"/>
  <method class="edu.scripps.pms.census.model.BestFragIon" name="void setIndex(int)"/>
  <method class="edu.scripps.pms.census.model.BestFragIon" name="void setSArr(long[])"/>
  <method class="edu.scripps.pms.census.model.BestFragIon" name="void setRArr(long[])"/>
  <method class="edu.scripps.pms.census.model.BestFragIon" name="int getIndex()"/>
  <class name="edu.scripps.pms.census.model.NonLabelMappingModel"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="void setPathArray(int[][][])"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Hashtable getChildHashtable(java.lang.String, int)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Hashtable getParentHt(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="int getMaxScanIndex(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="void setMsmsMap(java.util.Hashtable, java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="void reinitializeMaxIndexByRet()"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="void setRefIndex(int)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="int getRefIndex()"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="void setPathFileNameList(java.util.Vector)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="int[][][] getPathArray()"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Vector getPathFileNameList()"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Hashtable getFileNameHt()"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Hashtable getMs2ms1Ht()"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.lang.Integer getMs2Index(java.lang.String, int, double, double, edu.scripps.pms.census.hash.IndexedFile)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Hashtable getChildHashtable(java.lang.String, java.lang.Integer)"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="java.util.Hashtable getChildHashtableByMS2(java.lang.String, java.lang.Integer)"/>
  <class name="edu.scripps.pms.census.model.MergeProteinModel$Peptide"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getProfileScore()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="boolean isUnique()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setSequence(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getSamIntensity()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setRatio(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setUniqueIdentifier(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getRegFactor()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setRefIntensity(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getRefIntensity()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setFilterOut(boolean)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="java.lang.String getPeptideLine()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getRatio()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setSamIntensity(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getAreaRatio()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="java.lang.String getSequence()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setRegFactor(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setAreaRatio(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="java.lang.String getNoModSequence()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="java.lang.String getUniqueIdentifier()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="java.lang.String getFileName()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setProbability(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="boolean isFilterOut()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setProfileScore(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="double getProbability()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setUnique(boolean)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="void setPeptideLine(java.lang.String)"/>
  <class name="edu.scripps.pms.census.model.MergeProteinModel"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="java.lang.String getProteinDesc(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="double getAverageRatio()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="boolean isPeptideContain(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="void addPeptide(boolean, java.lang.String, double, double, double, double, double, double, java.lang.String, java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="boolean isContain(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="java.util.Set getProteinNames()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="void addPeptideList(java.util.List)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="java.util.List getDescList()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="void addProteinInfo(java.lang.String, java.lang.String, java.lang.String, boolean)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="double getStdev()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="void removeOutlier(double)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="java.util.List getPeptides()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="boolean isMergeable(edu.scripps.pms.census.model.MergeProteinModel, java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="void addPeptide(boolean, java.lang.String, double, double, double, double, double, double, java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="java.util.Hashtable getProteinDescHt()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="java.util.List getProteins()"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="void addProteinList(java.util.List)"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="int getTotalSpecCount()"/>
  <class name="edu.scripps.pms.census.model.FragIonList"/>
  <method class="edu.scripps.pms.census.model.FragIonList" name="int getBestIndex()"/>
  <method class="edu.scripps.pms.census.model.FragIonList" name="void setBestIndex(int)"/>
  <class name="edu.scripps.pms.census.model.ChroProtein"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getSeqCoverage()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="edu.scripps.pms.census.model.ChroProtein convertProtein(edu.scripps.pms.util.dtaselect.Protein)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getPI()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setSpectrumCount(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getValidation()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setSeqCount(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void deletePeptides()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setLength(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="boolean addPeptide(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setProteinLine(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="boolean isRedundant()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getLocus()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setDescription(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setPI(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setSeqCoverage(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setMolWt(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setLocus(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getLength()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getDescription()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String[] getProteinData()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setValidation(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setRedundant(boolean)"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getMolWt()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getProteinLine()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getSpectrumCount()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.lang.String getSeqCount()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="java.util.List getPeptideList()"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void setPeptideList(java.util.List)"/>
  <class name="edu.scripps.pms.census.model.WeightedProtein$ProteinModel"/>
  <method class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="double getStandardWeightedAverage()"/>
  <method class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="void add(double, long)"/>
  <method class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="void add(double, double)"/>
  <method class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="double getWeightedAverage()"/>
  <class name="edu.scripps.pms.census.model.WeightedProtein"/>
  <method class="edu.scripps.pms.census.model.WeightedProtein" name="double getWeightedAverage(java.lang.String)"/>
  <method class="edu.scripps.pms.census.model.WeightedProtein" name="void add(double, long, java.lang.String)"/>
  <class name="edu.scripps.pms.census.model.Spectrum"/>
  <method class="edu.scripps.pms.census.model.Spectrum" name="void setMassList(double[])"/>
  <method class="edu.scripps.pms.census.model.Spectrum" name="int binarySearch(double)"/>
  <method class="edu.scripps.pms.census.model.Spectrum" name="double[] getMassIntensityList()"/>
  <method class="edu.scripps.pms.census.model.Spectrum" name="void add(double, int)"/>
  <method class="edu.scripps.pms.census.model.Spectrum" name="int getIntensity(int)"/>
  <class name="edu.scripps.pms.census.model.ChroNonLabelData"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelData" name="void setScanNumArr(int[])"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelData" name="int[] getScanNumArr()"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelData" name="void setFullScanData(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelData" name="long[] getIntensityArr()"/>
  <method class="edu.scripps.pms.census.model.ChroNonLabelData" name="void setIntensityArr(long[])"/>
  <class name="edu.scripps.pms.census.model.FragIon"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="void setIndex(int)"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="int getIndex()"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="double getRegScore()"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="void setIsBion(boolean)"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="void setRArr(long[])"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="long[] getSArr()"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="void setRegScore(double)"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="long[] getRArr()"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="boolean isBion()"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="int compareTo(java.lang.Object)"/>
  <method class="edu.scripps.pms.census.model.FragIon" name="void setSArr(long[])"/>
  <class name="edu.scripps.pms.census.tools.Formatter"/>
  <method class="edu.scripps.pms.census.tools.Formatter" name="java.lang.String formatDecimal(double)"/>
  <class name="edu.scripps.pms.census.plot.SimplePlot"/>
  <method class="edu.scripps.pms.census.plot.SimplePlot" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.plot.SimplePlot" name="void Go(java.lang.String)"/>
  <class name="edu.scripps.pms.census.plot.DataDependentPlot"/>
  <method class="edu.scripps.pms.census.plot.DataDependentPlot" name="void _drawPeak(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.plot.DataIndependentPlot"/>
  <method class="edu.scripps.pms.census.plot.DataIndependentPlot" name="void _drawPeak(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.plot.ChromatographPlot"/>
  <method class="edu.scripps.pms.census.plot.ChromatographPlot" name="void _drawPeak(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.plot.chroGUI"/>
  <method class="edu.scripps.pms.census.plot.chroGUI" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.plot.HeatMap"/>
  <method class="edu.scripps.pms.census.plot.HeatMap" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.plot.HeatMap" name="void paint(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.plot.AlignPlot"/>
  <method class="edu.scripps.pms.census.plot.AlignPlot" name="void Go(java.lang.String)"/>
  <class name="edu.scripps.pms.census.plot.AlignHeatmap$myPan"/>
  <method class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" name="void repaint(long, int, int, int, int)"/>
  <method class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" name="void paint(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.plot.AlignHeatmap"/>
  <method class="edu.scripps.pms.census.plot.AlignHeatmap" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.plot.SigNoisePlot"/>
  <method class="edu.scripps.pms.census.plot.SigNoisePlot" name="void paint(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.plot.QualFragPlot"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="void setDtaStartRange(int)"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="void _drawPlot(java.awt.Graphics, boolean, java.awt.Rectangle)"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="void setDtaEndRange(int)"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="int getDtaStartRange()"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="int getDtaEndRange()"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="double getXcorr()"/>
  <method class="edu.scripps.pms.census.plot.QualFragPlot" name="void setXcorr(double)"/>
  <class name="edu.scripps.pms.census.plot.BaseChroPlot"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="void setDtaStartRange(int)"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="void _drawPlot(java.awt.Graphics, boolean, java.awt.Rectangle)"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="void setDtaEndRange(int)"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="int getDtaStartRange()"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="void drawDTASelect(java.awt.Graphics)"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="int getDtaEndRange()"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="double getXcorr()"/>
  <method class="edu.scripps.pms.census.plot.BaseChroPlot" name="void setXcorr(double)"/>
  <class name="edu.scripps.pms.census.plot.HeatmapUtil"/>
  <method class="edu.scripps.pms.census.plot.HeatmapUtil" name="java.lang.String getHeatColor(double, double, double)"/>
  <class name="edu.scripps.pms.census.plot.IrisPlot"/>
  <class name="edu.scripps.pms.census.plot.CorrelationPlot"/>
  <method class="edu.scripps.pms.census.plot.CorrelationPlot" name="void _drawPlot(java.awt.Graphics, boolean, java.awt.Rectangle)"/>
  <method class="edu.scripps.pms.census.plot.CorrelationPlot" name="void addMouseListener(java.awt.event.MouseListener)"/>
  <method class="edu.scripps.pms.census.plot.CorrelationPlot" name="void setData(long[], long[], int, int, double, double, int)"/>
  <class name="edu.scripps.pms.census.plot.PeptideDistPlot$Data"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="double getY()"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="void setY(double)"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="double getX()"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="void setX(double)"/>
  <class name="edu.scripps.pms.census.plot.PeptideDistPlot"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot" name="void drawAdditional(java.awt.Graphics)"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot" name="void addData(double, double)"/>
  <method class="edu.scripps.pms.census.plot.PeptideDistPlot" name="void clearData()"/>
  <class name="edu.scripps.pms.census.plot.FragIonPlot"/>
  <method class="edu.scripps.pms.census.plot.FragIonPlot" name="void paint(java.awt.Graphics)"/>
  <class name="edu.scripps.pms.census.chroalign.AlignPeak"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="double getIntensity()"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="int compareTo(edu.scripps.pms.census.chroalign.AlignPeak)"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="double getMz()"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="void setRefSpectrum(boolean)"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="boolean getRefSpectrum()"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="void setIntensity(double)"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="void setMz(double)"/>
  <method class="edu.scripps.pms.census.chroalign.AlignPeak" name="int compareTo(java.lang.Object)"/>
  <class name="edu.scripps.pms.census.chroalign.chroalign"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="org.jdom.Element createChrodata(org.jdom.Element, float[][][], java.lang.Object[], int, boolean)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void findPath(int, int, int, int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void setTargetMS1Files(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="java.lang.String getWorkFolder()"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="boolean getAlignType()"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void writeOutputLine(java.lang.String, java.lang.StringBuffer, boolean)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="java.lang.String[] getTargetMS1Files()"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void setWorkFolder(java.lang.String)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="org.jdom.Element createPathdata(org.jdom.Element, float[][][], java.lang.Object[], int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void usage()"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void populateNoAlignDataArray(java.util.ArrayList, int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="int[][][] alignChro(edu.scripps.pms.census.ChroProgressDialog, java.lang.Object[], java.lang.Object[], int, boolean, int, java.lang.String)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void setMasterFile(int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="java.lang.String getReferenceMS1File()"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="float[] getSpectrumInfo(float[])"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="int[][][] noAlignChro(edu.scripps.pms.census.ChroProgressDialog, java.lang.Object[], java.lang.Object[], java.lang.String)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="int getConstraint()"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void setAlignType(boolean)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void populateDataArray(java.util.ArrayList, int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="float euclidianDis(float, float)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void setConstraint(int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="boolean checkConstraint(int, int, int, int)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="edu.scripps.pms.util.spectrum.Peak basePeak(java.util.Iterator)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void writeOutputFile(org.jdom.Element, java.lang.String)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void genCostMatrix(edu.scripps.pms.util.io.SpectrumReader, edu.scripps.pms.util.io.SpectrumReader, int, int, int, boolean)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="void setReferenceMS1File(java.lang.String)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="float spectrumDis(float[], float[], float[], float[], boolean)"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="int getMasterFile()"/>
  <class name="edu.scripps.pms.census.chroalign.Elements"/>
  <field class="edu.scripps.pms.census.chroalign.Elements" name="index"/>
  <field class="edu.scripps.pms.census.chroalign.Elements" name="score"/>
  <method class="edu.scripps.pms.census.chroalign.Elements" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.junit.TestConstants"/>
  <field class="edu.scripps.pms.census.junit.TestConstants" name="CENSUS_PARAM_FILE"/>
  <field class="edu.scripps.pms.census.junit.TestConstants" name="TEST_DATA_HOME"/>
  <class name="edu.scripps.pms.census.junit.ChroValidate"/>
  <method class="edu.scripps.pms.census.junit.ChroValidate" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.junit.ParamTestCase"/>
  <method class="edu.scripps.pms.census.junit.ParamTestCase" name="void tearDown()"/>
  <method class="edu.scripps.pms.census.junit.ParamTestCase" name="void setUp()"/>
  <method class="edu.scripps.pms.census.junit.ParamTestCase" name="void paramTest()"/>
  <class name="edu.scripps.pms.census.junit.IndexTestCase"/>
  <method class="edu.scripps.pms.census.junit.IndexTestCase" name="void indexValidate()"/>
  <method class="edu.scripps.pms.census.junit.IndexTestCase" name="void tearDown()"/>
  <method class="edu.scripps.pms.census.junit.IndexTestCase" name="void indexTest(java.lang.String)"/>
  <method class="edu.scripps.pms.census.junit.IndexTestCase" name="void setUp()"/>
  <method class="edu.scripps.pms.census.junit.IndexTestCase" name="java.util.Iterator getAllFiles(java.lang.String)"/>
  <method class="edu.scripps.pms.census.junit.IndexTestCase" name="java.util.Hashtable getIndexData(java.lang.String)"/>
  <class name="edu.scripps.pms.census.junit.CensusUnitTest"/>
  <method class="edu.scripps.pms.census.junit.CensusUnitTest" name="junit.framework.Test suite()"/>
  <class name="edu.scripps.pms.census.junit.IndexTest"/>
  <method class="edu.scripps.pms.census.junit.IndexTest" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.junit.IndexTest" name="java.util.Iterator getAllFiles(java.lang.String)"/>
  <class name="edu.scripps.pms.census.junit.ChroXmlValidate"/>
  <method class="edu.scripps.pms.census.junit.ChroXmlValidate" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.conf.PostOptions"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="edu.scripps.pms.census.conf.PostOptions getInstance()"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="double getBestFragIonTolerance()"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="boolean isDisplayFragmentIons()"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="boolean isFilterFragmentIons()"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="void setBestFragIonTolerance(double)"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="void setDisplayFragmentIons(boolean)"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="void setDetFactorValue(float)"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="void setDetFactorCheck(boolean)"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="float getDetFactorValue()"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="boolean isDetFactorCheck()"/>
  <method class="edu.scripps.pms.census.conf.PostOptions" name="void setFilterFragmentIons(boolean)"/>
  <class name="edu.scripps.pms.census.conf.Configuration$Sample"/>
  <method class="edu.scripps.pms.census.conf.Configuration$Sample" name="void setMsFileList(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.conf.Configuration$Sample" name="java.util.ArrayList getMsFileList()"/>
  <method class="edu.scripps.pms.census.conf.Configuration$Sample" name="void setName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration$Sample" name="java.lang.String getName()"/>
  <method class="edu.scripps.pms.census.conf.Configuration$Sample" name="void addFile(java.lang.String)"/>
  <class name="edu.scripps.pms.census.conf.Configuration"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MRM_WITHOUT_ID"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MRM_PRECURSOR_TOLERANCE"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="expType"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MS_FILE_FORMAT"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="AUTOMATIC_FRAGMENT_ION"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MZXML_FILE_FORMAT"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="HIGH_RES_THRESHOLD"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="PROLINE_SHIFT"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="SPEC_COUNT_NO_NORMALIZATION"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MSMS_MULTIPLE_SPECTRA"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="SPEC_COUNT_NORMALIZATION1"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="SPECIFIC_FRAGMENT_ION"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MSMS_SINGLE_SPECTRUM"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="PEPXML"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="MS2_FILE_FORMAT"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="DTASELECT"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.ArrayList getScoreList()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isLabeling()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getMrmPeptideSize()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.List getMrmPeptideGroupList()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setScoreType(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setNumFileSize(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setOutlierPValue(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getExtMethod()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setExpType(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setWindowArr(double[])"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getRunningTime()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setIsolationWindow(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isSimpleIndexGenerator()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="org.jdom.Element getRootConfEle()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setQuantLevel(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getOutlierPValue()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getErrorMessage()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMapModel(edu.scripps.pms.census.model.NonLabelMappingModel)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getStartMassRange()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setFilePath(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getMsmsSpecificTolerance()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getDatabaseFile()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void addScoreName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setRetArr(double[][])"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getCalcRefAvgMass()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double[] getWindowArr()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setNonlabelFilePaths(java.util.Set)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="edu.scripps.pms.census.ChroProgressDialog getProgressDialog()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getMassRange()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="float getSteepRatioThreshold()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMsmsMassArr(java.util.List)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getIsolationWindow()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getEndMassRange()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setAlign(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMzXMLFilePath(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="edu.scripps.pms.census.model.NonLabelMappingModel getMapModel()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="long getStartTime()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMsmsSpecificTolerance(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void readSimpleXml(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isBasedOnId()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMrmPeptideSize(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setErrorMessage(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setIsDataIndependent(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setChargeColumn(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isXmlConf()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMassTolerance(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSampleList(java.util.List)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getCalcSamAvgMass()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getNumOfIsolationWindow()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setCalcSamAvgMass(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.List getNonlabelFilenameList()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getFilePath()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getColNum()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setStartTime()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void addSample(edu.scripps.pms.census.model.SampleModel)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.Hashtable getSpHt()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSpectrumFormat(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getVersion()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getRefFileName()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.List getMsmsMassArr()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setEnrichment(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getQuantLevel()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setStartMassRange(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void addExp(edu.scripps.pms.census.conf.Configuration$Sample)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getMaxWindow()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getResolution()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void readParam(java.lang.String, java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getEnrichment()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSpHt(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setCalcRefAvgMass(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setResolution(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMaxWindow(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMrmPeptideGroupList(java.util.List)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setXmlConf(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMsmsSpectrumNum(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void readXMLParam(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setPrecursorArr(double[])"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getMsmsSpectrumNum()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setExtMethod(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getExpType()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setProgressDialog(edu.scripps.pms.census.ChroProgressDialog)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getMassTolerance()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getElementCompFile()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSteepRatioThreshold(float)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getMargin()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isHighRes()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSimpleIndexGenerator(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getMaxSpectrumShift()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMsmsFragType(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double getPrecursor(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setEndMassRange(double)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMargin(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setColNum(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getSpecCountNormal()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getSteepArea()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setMaxSpectrumShift(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double[][] getRetArr()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getNumFileSize()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getMsmsFragType()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setVersion(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="edu.scripps.pms.census.conf.Configuration getInstance()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.List getSampleList()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSteepArea(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getMzXMLFilePath()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isChargeColumn()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void calculateWindowArr()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setRefFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setRootConfEle(org.jdom.Element)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setSpecCountNormal(int)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.lang.String getIdFileName()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.Set getNonlabelFilePaths()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setDatabaseFile(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isDataIndependent()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setIdFileName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setIsHighRes(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void readMRMParams(org.jdom.Element)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setNonlabelFilenameList(java.util.List)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isAlign()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setLabeling(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setBasedOnId(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="boolean isUseProline()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setScoreList(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getScoreType()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="int getSpectrumFormat()"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setUseProline(boolean)"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="double[] getPrecursorArr()"/>
  <class name="edu.scripps.pms.census.io.parse.ChroXMLParser"/>
  <method class="edu.scripps.pms.census.io.parse.ChroXMLParser" name="void endElement(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.parse.ChroXMLParser" name="void startElement(java.lang.String)"/>
  <class name="edu.scripps.pms.census.io.ChroXmlReader$Sample"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="java.util.ArrayList getIntensityArr()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="void addNormalizedSpecC(double)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="long getSumIntensity()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="void addExperiment(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="void setIntensityArr(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="double getNormalizedSpecC()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="java.lang.String getSampleName()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="void setSampleName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="long getAverage()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="java.util.ArrayList getExpList()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="void addIntensity(long)"/>
  <class name="edu.scripps.pms.census.io.ChroXmlReader"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void addScores(edu.scripps.pms.census.model.ChroPeptide, org.jdom.Element)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.ArrayList getMrmCrvProteinList()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setQuantLevel(int)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setSampleExpList(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setFileList(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setExpType(int)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="int getQuantLevel()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.ArrayList getFileList()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setSampleObjList(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.lang.String getFileName(int)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.ArrayList getProteinList()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setLabeled(boolean)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void setSampleList(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.ArrayList getSampleList()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="boolean isLabeled()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="boolean isDataDependent()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="int getExpType()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.lang.String getSampleName(int)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.ArrayList getProteinList(edu.scripps.pms.census.ProgressTask, int)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.Hashtable getSampleObjList()"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.lang.String getSampleName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="edu.scripps.pms.census.io.ChroXmlReader$Sample getSampleObj(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void addSampleObj(edu.scripps.pms.census.io.ChroXmlReader$Sample)"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="java.util.ArrayList getSampleExpList()"/>
  <class name="edu.scripps.pms.census.io.CenSusReportReader"/>
  <method class="edu.scripps.pms.census.io.CenSusReportReader" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.io.CenSusReportReader" name="java.util.List read(java.lang.String, edu.scripps.pms.census.model.FilterModel, double)"/>
  <method class="edu.scripps.pms.census.io.CenSusReportReader" name="void setTotalPeptideCount(int)"/>
  <method class="edu.scripps.pms.census.io.CenSusReportReader" name="int getTotalPeptideCount()"/>
  <method class="edu.scripps.pms.census.io.CenSusReportReader" name="java.util.List merge(java.lang.Object[], javax.swing.JProgressBar, java.lang.String, edu.scripps.pms.census.model.FilterModel, double)"/>
  <class name="edu.scripps.pms.census.io.SpecRangeGenerator"/>
  <method class="edu.scripps.pms.census.io.SpecRangeGenerator" name="void setIsVersion2(boolean)"/>
  <method class="edu.scripps.pms.census.io.SpecRangeGenerator" name="edu.scripps.pms.census.io.SpecRangeGenerator getSpecRangeGenerator(edu.scripps.pms.util.io.IdentificationReader)"/>
  <method class="edu.scripps.pms.census.io.SpecRangeGenerator" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.io.SpecRangeGenerator" name="void createIndex()"/>
  <method class="edu.scripps.pms.census.io.SpecRangeGenerator" name="edu.scripps.pms.census.model.SpecRange getSpecRange(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.SpecRangeGenerator" name="java.util.Hashtable getTable()"/>
  <class name="edu.scripps.pms.census.io.IsotopeReader"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="void test(edu.scripps.pms.census.model.IsotopeTable)"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="double getAAMonoMass(java.lang.String)"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="java.util.Hashtable getAaHt()"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="double getAAMonoMass(char)"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="void setAaHt(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="edu.scripps.pms.census.model.IsotopeTable getIsotope()"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="void setIsotope(edu.scripps.pms.census.model.IsotopeTable)"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="edu.scripps.pms.census.model.IsotopeTable getStandardIsotopeTable()"/>
  <class name="edu.scripps.pms.census.io.ChroReader"/>
  <field class="edu.scripps.pms.census.io.ChroReader" name="lastLine"/>
  <field class="edu.scripps.pms.census.io.ChroReader" name="br"/>
  <field class="edu.scripps.pms.census.io.ChroReader" name="file"/>
  <field class="edu.scripps.pms.census.io.ChroReader" name="data"/>
  <field class="edu.scripps.pms.census.io.ChroReader" name="list"/>
  <field class="edu.scripps.pms.census.io.ChroReader" name="dataDependency"/>
  <method class="edu.scripps.pms.census.io.ChroReader" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.io.ChroReader" name="int getDataDependency()"/>
  <method class="edu.scripps.pms.census.io.ChroReader" name="java.util.Iterator getProteins()"/>
  <method class="edu.scripps.pms.census.io.ChroReader" name="java.util.ArrayList getProteinList()"/>
  <method class="edu.scripps.pms.census.io.ChroReader" name="void init()"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void runLabeledAnalysis(edu.scripps.pms.census.ChroGenerator, edu.scripps.pms.census.conf.Configuration)"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void runMRMWithoutId(edu.scripps.pms.census.ChroGenerator)"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void propertyChange(java.beans.PropertyChangeEvent)"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void runLabeledAnalysis(edu.scripps.pms.census.ChroGenerator, edu.scripps.pms.census.ChroProgressDialog, edu.scripps.pms.census.conf.Configuration)"/>
  <class name="edu.scripps.pms.census.OptionsDialog"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="RET_CANCEL"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="RET_OK"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="int getReturnStatus()"/>
  <class name="edu.scripps.pms.census.ChroProgressDialog"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void addMessageOffset(java.lang.String)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void addMessage(java.lang.String)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void updateProgress(edu.scripps.pms.census.ChroProgressDialog, int)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void addMessage(edu.scripps.pms.census.ChroProgressDialog, java.lang.String)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void setProgress(int)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void addMessageWithLine(java.lang.String)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void addMessageWithLine(edu.scripps.pms.census.ChroProgressDialog, java.lang.String)"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="javax.swing.JProgressBar getProgressBar()"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void addMessage(int)"/>
  <class name="edu.scripps.pms.census.Test"/>
  <method class="edu.scripps.pms.census.Test" name="double getTwoPValue()"/>
  <method class="edu.scripps.pms.census.Test" name="void setTwoPValue(double)"/>
  <method class="edu.scripps.pms.census.Test" name="void setRightPValue(double)"/>
  <method class="edu.scripps.pms.census.Test" name="double getRightPValue()"/>
  <class name="edu.scripps.pms.census.ConfigDialog"/>
  <method class="edu.scripps.pms.census.ConfigDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.ElementComposition"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="AMINO_ACIDS"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void lightCalculate()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void calculate()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void setModShift(double)"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void printComposition()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="double getModShift()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="boolean isQuantifiable()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="int[] getElementRefArr()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void calculateBion()"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="int[] getElementSampleArr()"/>
  <class name="edu.scripps.pms.census.IrisPanel"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="void setPeptide(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="void setHt(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="java.util.Hashtable getHt()"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="edu.scripps.pms.census.model.ChroPeptide getPeptide()"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="void drawPlot(java.util.Hashtable, edu.scripps.pms.census.model.ChroPeptide)"/>
  <class name="edu.scripps.pms.census.QualificationPanel"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="edu.scripps.pms.census.model.ChroPeptide getCurrentPeptide()"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="java.lang.String getCurrentDirectory()"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void setCurrentPeptide(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void setCurrentProtein(edu.scripps.pms.census.model.ChroProtein)"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="java.util.Hashtable getHt()"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="edu.scripps.pms.census.model.ChroProtein getChroProtein()"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void setChroProtein(edu.scripps.pms.census.model.ChroProtein)"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="javax.swing.JFrame getMFrame()"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void setCurrentDirectory(java.lang.String)"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void setHt(java.util.Hashtable)"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void setMFrame(javax.swing.JFrame)"/>
  <class name="edu.scripps.pms.census.ProgressMzxml2MS"/>
  <method class="edu.scripps.pms.census.ProgressMzxml2MS" name="void done()"/>
  <method class="edu.scripps.pms.census.ProgressMzxml2MS" name="void updateProgress(int)"/>
  <method class="edu.scripps.pms.census.ProgressMzxml2MS" name="java.lang.Void doInBackground()"/>
  <method class="edu.scripps.pms.census.ProgressMzxml2MS" name="java.lang.Object doInBackground()"/>
  <class name="edu.scripps.pms.census.NewBean"/>
  <field class="edu.scripps.pms.census.NewBean" name="PROP_SAMPLE_PROPERTY"/>
  <method class="edu.scripps.pms.census.NewBean" name="java.lang.String getSampleProperty()"/>
  <method class="edu.scripps.pms.census.NewBean" name="void addPropertyChangeListener(java.beans.PropertyChangeListener)"/>
  <method class="edu.scripps.pms.census.NewBean" name="void setSampleProperty(java.lang.String)"/>
  <method class="edu.scripps.pms.census.NewBean" name="void removePropertyChangeListener(java.beans.PropertyChangeListener)"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" name="void setListModel(javax.swing.DefaultListModel)"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" name="void setName(java.lang.String)"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" name="java.lang.String getName()"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" name="javax.swing.DefaultListModel getListModel()"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void updateDataSet(javax.swing.DefaultListModel, java.lang.String)"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.ChroGenerator"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="CENSUS_CONFIG"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createMsmsXmlChro()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createLabelFreeBasedOnDirectId()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createFullscanXmlChro()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createNonlabelXmlChro()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createMsmsSpecificChro()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createMsmsSpecificChro(edu.scripps.pms.census.ChroProgressDialog)"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createMRMFragmentIons(edu.scripps.pms.census.ChroProgressDialog)"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void runMRMWithoutId()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createMsmsXmlChro(edu.scripps.pms.census.ChroProgressDialog)"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="void createFullscanXmlChro_old()"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="java.util.Hashtable createIndexedFiles(java.lang.String, java.lang.String)"/>
  <class name="edu.scripps.pms.census.ColorTable"/>
  <method class="edu.scripps.pms.census.ColorTable" name="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int)"/>
  <class name="edu.scripps.pms.census.Relex"/>
  <method class="edu.scripps.pms.census.Relex" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.Census"/>
  <method class="edu.scripps.pms.census.Census" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.Census" name="void printHelp()"/>
  <method class="edu.scripps.pms.census.Census" name="void init(org.apache.commons.cli.CommandLine)"/>
  <class name="edu.scripps.pms.census.RelExMainFrame"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chroFile"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="searchIndex"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="quantLevel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonlabelSummaryTable"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="qualPanel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="specFile"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonlabelTable"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="version"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonlabelScrollPane"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chroFileOpen"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonlabelSummaryTableModel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="isChroFile"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="ht"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonLabelSummaryPanel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="irisPanel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="currentPeptide"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="isDataDependent"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonLabelPanel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="labeled"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="experimentType"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="dtaReader"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonlabelTableModel"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="nonlabelSummaryScrollPane"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinRatioDistPanel"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportITRAQReport()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JTabbedPane getPepTabbedPanel()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void toggleFilterIcon(boolean)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void preProcessChroOpen()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportDummy()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void generateNonLabelData(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="java.lang.String getCurrentDirectory()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setLabeled(boolean)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void generateNonLabelData(edu.scripps.pms.census.model.ChroPeptide, int)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void dummyOpenChroFile()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setParamPanel(javax.swing.JPanel)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void generateInDepFragData(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void generateInDepData(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setCurrentDirectory(java.io.File)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void changePeakArea(int, int)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setPepTabbedPanel(javax.swing.JTabbedPane)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void openSpecFile(java.lang.String)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updateiTRAQpeptideInfo(javax.swing.JTable, int, int)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="java.lang.String getPlotHeader()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void runtest()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JScrollPane getFragIonScrollPanel()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="java.util.ArrayList getProteinList()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportReport()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void mergeFiles(java.lang.Object[], java.io.File, java.lang.String, edu.scripps.pms.census.model.FilterModel, double)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void openMRMCrvFile(java.lang.String)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void generateDepData(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void mrmCsvTest(java.awt.event.ActionEvent)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setCurrentDirectory(java.lang.String)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JPanel getCorrelationPanel()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void printHeader(java.io.PrintStream)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void openChroFile(java.lang.String)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JPanel getProteinPanel()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="java.lang.String chromXMLHeader(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportReportANGUI(boolean, boolean, boolean, boolean, double, double, double, boolean, boolean, boolean, double, double, double, int, boolean)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setCorrelationPanel(javax.swing.JPanel)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void generateITRAQData(edu.scripps.pms.census.model.ChroPeptide)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void postProcessOpenChroFile(edu.scripps.pms.census.io.ChroXmlReader, java.util.ArrayList, javax.swing.JDialog)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JPanel getParamPanel()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void propertyChange(java.beans.PropertyChangeEvent)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setFragIonScrollPanel(javax.swing.JScrollPane)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="boolean isLabeled()"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportITRAQMultipleReport(java.io.File)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportReportANGUI(boolean, boolean, boolean, boolean, double, double, double, boolean, boolean, boolean, double, double, double, int, boolean, boolean)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void setProteinList(java.util.ArrayList)"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void runNonLabelActionPerformed(java.awt.event.ActionEvent)"/>
  <class name="edu.scripps.pms.census.ExportDialog"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.CensusConstants"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MSMS_DATA_INDEPENDENT"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="PROTEIN_SIMPLE_COLUMNS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="WINDOW_MARGIN"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="DATA_TYPE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="ELEMENT_COMPOSITION_FILE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MS1_FILE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MZXML"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="NONLABEL_COLUMNS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MS2_FILE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MRM_EXPERIMENT"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MAX_WINDOW"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="END_RANGE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="BASIC_PEPTIDE_COLUMN_SIZE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="PEPTIDE_COLUMNS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="START_RANGE"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MASS_ACCURACY"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MSMS_SPECIFIC_MULTIPLE_MASS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="SEARCH_OUTPUT"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="PROTEIN_MRM_FRAG_COLUMNS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="PEPTIDE_LABEL_FREE_COLUMNS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="NONLABEL_SUMMARY_COLUMNS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="RESOLUTION"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="MSMS_SPECIFIC_SINGLE_MASS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="ENRICHMENT"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="ISOLATION_WINDOW"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="PROTON_MASS"/>
  <field class="edu.scripps.pms.census.CensusConstants" name="PROTEIN_COLUMNS"/>
  <method class="edu.scripps.pms.census.CensusConstants" name="java.lang.String[] getBasicColumn(int)"/>
  <class name="edu.scripps.pms.census.CensusTest"/>
  <method class="edu.scripps.pms.census.CensusTest" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.MergeDialog"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.TestPanel"/>
  <method class="edu.scripps.pms.census.TestPanel" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.SelectConfDialog"/>
  <method class="edu.scripps.pms.census.SelectConfDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.ExportNonlabelDialog"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.MRMFragPanel"/>
  <method class="edu.scripps.pms.census.MRMFragPanel" name="void initAdditional()"/>
  <class name="edu.scripps.pms.census.TestJFrame"/>
  <method class="edu.scripps.pms.census.TestJFrame" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.TextAreaRenderer"/>
  <method class="edu.scripps.pms.census.TextAreaRenderer" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)"/>
  <class name="edu.scripps.pms.census.SVMTest"/>
  <method class="edu.scripps.pms.census.SVMTest" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.SVMTest" name="void readInput(java.util.Vector, java.util.Vector)"/>
  <method class="edu.scripps.pms.census.SVMTest" name="libsvm.svm_parameter generateParam()"/>
  <class name="edu.scripps.pms.census.ProgressTask"/>
  <method class="edu.scripps.pms.census.ProgressTask" name="void done()"/>
  <method class="edu.scripps.pms.census.ProgressTask" name="void updateProgress(int)"/>
  <method class="edu.scripps.pms.census.ProgressTask" name="java.lang.Void doInBackground()"/>
  <method class="edu.scripps.pms.census.ProgressTask" name="java.lang.Object doInBackground()"/>
  <class name="edu.scripps.pms.census.RelexStand"/>
  <method class="edu.scripps.pms.census.RelexStand" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.RelexStand" name="void init()"/>
  <class name="edu.scripps.pms.census.LabelFreeDataSetDialog"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void updateDialog(edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel)"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.SelectRefMSDialog"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void main(java.lang.String[])"/>
  <class name="edu.scripps.pms.census.MyTest"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModX()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModG()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModS(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModH(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModL()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModQ()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModZ(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModO(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModD(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModV()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModE()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModV(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModK(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModO()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModR(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModG(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModT()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModC()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModY(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModY()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModN(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModH()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModC(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModM()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModR()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModA()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModW()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModQ(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModF(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModF()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModK()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModX(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModM(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModB(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModP()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModT(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModI(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModD()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModZ()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModI()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void main(java.lang.String[])"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModP(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModE(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModN()"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModS()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModW(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="double getModB()"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModL(double)"/>
  <method class="edu.scripps.pms.census.MyTest" name="void setModA(double)"/>
</expose>
<map>
  <package name="scripts" map="A"/>
  <package name="scripts.ident_quant" map="A"/>
  <class name="scripts.ident_quant.PeptideRedundance" map="A"/>
  <method class="scripts.ident_quant.PeptideRedundance" name="void main(java.lang.String[])" map="A"/>
  <package name="scripts.mzxml" map="B"/>
  <class name="scripts.mzxml.XMLRead64" map="A"/>
  <method class="scripts.mzxml.XMLRead64" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.mzxml.XMLRead64" name="byte[] floatTobyte(float)" map="A"/>
  <class name="scripts.mzxml.XMLRead" map="B"/>
  <method class="scripts.mzxml.XMLRead" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.mzxml.XMLRead" name="byte[] floatTobyte(float)" map="A"/>
  <package name="scripts.singleton" map="C"/>
  <class name="scripts.singleton.HistogramGenerator" map="A"/>
  <method class="scripts.singleton.HistogramGenerator" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.singleton.HistogramGenerator" name="java.util.Set getList(java.lang.String, double)" map="A"/>
  <method class="scripts.singleton.HistogramGenerator" name="double round(double, int)" map="A"/>
  <package name="scripts.contrast" map="D"/>
  <class name="scripts.contrast.CensusContrast2" map="A"/>
  <field class="scripts.contrast.CensusContrast2" name="descHt" map="A"/>
  <method class="scripts.contrast.CensusContrast2" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.contrast.CensusContrast2" name="java.util.Hashtable readFile(java.lang.String, java.util.Hashtable)" map="A"/>
  <class name="scripts.contrast.CensusProteinContrast" map="B"/>
  <field class="scripts.contrast.CensusProteinContrast" name="descHt" map="A"/>
  <method class="scripts.contrast.CensusProteinContrast" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.contrast.CensusProteinContrast" name="java.util.Hashtable readFile(java.lang.String)" map="A"/>
  <package name="scripts.global_scoring" map="E"/>
  <class name="scripts.global_scoring.GlobalScoring" map="A"/>
  <field class="scripts.global_scoring.GlobalScoring" name="svmTestFileName" map="A"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pScanNum" map="B"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nScanNum" map="C"/>
  <field class="scripts.global_scoring.GlobalScoring" name="falseSet" map="D"/>
  <field class="scripts.global_scoring.GlobalScoring" name="tmpC" map="E"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pSpC" map="F"/>
  <field class="scripts.global_scoring.GlobalScoring" name="param" map="G"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nIntensity" map="H"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nXcorrArray" map="I"/>
  <field class="scripts.global_scoring.GlobalScoring" name="modelFileName" map="J"/>
  <field class="scripts.global_scoring.GlobalScoring" name="falseHtPeptide" map="K"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nCorrAN" map="L"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pMassDiff" map="M"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nFragNumFoundRatio" map="N"/>
  <field class="scripts.global_scoring.GlobalScoring" name="prob" map="O"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nMassDiff" map="P"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pDcnArray" map="Q"/>
  <field class="scripts.global_scoring.GlobalScoring" name="cross_validation" map="R"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nDcnArray" map="S"/>
  <field class="scripts.global_scoring.GlobalScoring" name="trueSet" map="T"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nCorr" map="U"/>
  <field class="scripts.global_scoring.GlobalScoring" name="tmpCount" map="V"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nr_fold" map="W"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pFragNumFoundRatio" map="X"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pIntensity" map="Y"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pXcorrArray" map="Z"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pCorrAN" map="_"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pCorr" map="a"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nHt" map="b"/>
  <field class="scripts.global_scoring.GlobalScoring" name="outFileName" map="c"/>
  <field class="scripts.global_scoring.GlobalScoring" name="trueHt" map="d"/>
  <field class="scripts.global_scoring.GlobalScoring" name="trueHtPeptide" map="e"/>
  <field class="scripts.global_scoring.GlobalScoring" name="nSpC" map="f"/>
  <field class="scripts.global_scoring.GlobalScoring" name="pHt" map="g"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void runTrain()" map="A"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void generatePostFilteringData()" map="B"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void do_cross_validation()" map="C"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void runSVM(java.lang.String)" map="A"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void generateTestData()" map="D"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void runPredict()" map="E"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void readDTASelect(java.lang.String)" map="B"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void populateHt(java.lang.String)" map="C"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void printFile(java.util.List, java.lang.String)" map="A"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void generateFreqFile(java.util.List, java.lang.String, int, double, double)" map="A"/>
  <method class="scripts.global_scoring.GlobalScoring" name="void printTestFile(int, edu.scripps.pms.census.model.ChroPeptide, java.io.PrintStream)" map="A"/>
  <method class="scripts.global_scoring.GlobalScoring" name="edu.scripps.pms.census.model.ChroPeptide getPeptide(org.jdom.Element)" map="A"/>
  <class name="scripts.global_scoring.SVMParamUtil" map="B"/>
  <field class="scripts.global_scoring.SVMParamUtil" name="vy" map="A"/>
  <field class="scripts.global_scoring.SVMParamUtil" name="vx" map="B"/>
  <method class="scripts.global_scoring.SVMParamUtil" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.global_scoring.SVMParamUtil" name="void readInput(java.util.Vector, java.util.Vector)" map="A"/>
  <method class="scripts.global_scoring.SVMParamUtil" name="libsvm.svm_parameter generateParam(int, int)" map="A"/>
  <class name="scripts.global_scoring.Separator$Predict" map="_A"/>
  <field class="scripts.global_scoring.Separator$Predict" name="positive" map="A"/>
  <field class="scripts.global_scoring.Separator$Predict" name="prob" map="B"/>
  <class name="scripts.global_scoring.Separator$PeptideModel" map="_B"/>
  <field class="scripts.global_scoring.Separator$PeptideModel" name="seq" map="A"/>
  <field class="scripts.global_scoring.Separator$PeptideModel" name="charge" map="B"/>
  <class name="scripts.global_scoring.Separator" map="C"/>
  <field class="scripts.global_scoring.Separator" name="file3" map="A"/>
  <field class="scripts.global_scoring.Separator" name="fastaFile" map="B"/>
  <field class="scripts.global_scoring.Separator" name="file2" map="C"/>
  <field class="scripts.global_scoring.Separator" name="file1" map="D"/>
  <method class="scripts.global_scoring.Separator" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.global_scoring.Separator" name="void calculateFP(java.util.ArrayList, java.util.ArrayList, double, java.util.ArrayList)" map="A"/>
  <class name="scripts.global_scoring.Histogram" map="D"/>
  <field class="scripts.global_scoring.Histogram" name="overFlows" map="A"/>
  <field class="scripts.global_scoring.Histogram" name="nBins" map="B"/>
  <field class="scripts.global_scoring.Histogram" name="dataString" map="C"/>
  <field class="scripts.global_scoring.Histogram" name="underFlows" map="D"/>
  <field class="scripts.global_scoring.Histogram" name="delBin" map="E"/>
  <field class="scripts.global_scoring.Histogram" name="xHigh" map="F"/>
  <field class="scripts.global_scoring.Histogram" name="xLow" map="G"/>
  <field class="scripts.global_scoring.Histogram" name="freqArr" map="H"/>
  <method class="scripts.global_scoring.Histogram" name="void graphIt()" map="A"/>
  <method class="scripts.global_scoring.Histogram" name="double getDelBin()" map="B"/>
  <method class="scripts.global_scoring.Histogram" name="java.lang.String getResult()" map="C"/>
  <method class="scripts.global_scoring.Histogram" name="void loadData(java.util.List)" map="A"/>
  <method class="scripts.global_scoring.Histogram" name="void setData(double)" map="A"/>
  <method class="scripts.global_scoring.Histogram" name="double[] getBins()" map="D"/>
  <method class="scripts.global_scoring.Histogram" name="int getUnderFlows()" map="E"/>
  <method class="scripts.global_scoring.Histogram" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.global_scoring.Histogram" name="int[] getFreqArr()" map="F"/>
  <method class="scripts.global_scoring.Histogram" name="int getOverFlows()" map="G"/>
  <method class="scripts.global_scoring.Histogram" name="void print()" map="H"/>
  <package name="scripts.fft" map="F"/>
  <class name="scripts.fft.Complex" map="A"/>
  <field class="scripts.fft.Complex" name="im" map="A"/>
  <field class="scripts.fft.Complex" name="re" map="B"/>
  <method class="scripts.fft.Complex" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.fft.Complex" name="scripts.fft.Complex minus(scripts.fft.Complex)" map="A"/>
  <method class="scripts.fft.Complex" name="double abs()" map="A"/>
  <method class="scripts.fft.Complex" name="scripts.fft.Complex times(double)" map="A"/>
  <method class="scripts.fft.Complex" name="scripts.fft.Complex times(scripts.fft.Complex)" map="B"/>
  <method class="scripts.fft.Complex" name="scripts.fft.Complex plus(scripts.fft.Complex)" map="C"/>
  <method class="scripts.fft.Complex" name="java.lang.String toString()" map="toString"/>
  <method class="scripts.fft.Complex" name="scripts.fft.Complex conjugate()" map="B"/>
  <class name="scripts.fft.FFT" map="B"/>
  <method class="scripts.fft.FFT" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.fft.FFT" name="scripts.fft.Complex[] fft(scripts.fft.Complex[])" map="A"/>
  <method class="scripts.fft.FFT" name="scripts.fft.Complex[] convolve(scripts.fft.Complex[], scripts.fft.Complex[])" map="A"/>
  <method class="scripts.fft.FFT" name="scripts.fft.Complex[] cconvolve(scripts.fft.Complex[], scripts.fft.Complex[])" map="B"/>
  <method class="scripts.fft.FFT" name="scripts.fft.Complex[] ifft(scripts.fft.Complex[])" map="B"/>
  <package name="scripts.lliao" map="G"/>
  <package name="scripts.lliao.phospho_proteome" map="A"/>
  <class name="scripts.lliao.phospho_proteome.CensusReportDebunkerMerge" map="A"/>
  <field class="scripts.lliao.phospho_proteome.CensusReportDebunkerMerge" name="threshold" map="A"/>
  <field class="scripts.lliao.phospho_proteome.CensusReportDebunkerMerge" name="totalPeptideCount" map="B"/>
  <method class="scripts.lliao.phospho_proteome.CensusReportDebunkerMerge" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.lliao.phospho_proteome.CensusReportDebunkerMerge" name="java.util.Hashtable getDebunkerOutput(java.lang.String)" map="A"/>
  <class name="scripts.lliao.CensusReportReaderModified" map="A"/>
  <field class="scripts.lliao.CensusReportReaderModified" name="totalPeptideCount" map="A"/>
  <method class="scripts.lliao.CensusReportReaderModified" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.lliao.CensusReportReaderModified" name="void setTotalPeptideCount(int)" map="A"/>
  <method class="scripts.lliao.CensusReportReaderModified" name="java.util.List read(java.lang.String)" map="A"/>
  <method class="scripts.lliao.CensusReportReaderModified" name="int getTotalPeptideCount()" map="A"/>
  <class name="scripts.lliao.SilacEnrichRatio" map="B"/>
  <field class="scripts.lliao.SilacEnrichRatio" name="format" map="A"/>
  <method class="scripts.lliao.SilacEnrichRatio" name="void main(java.lang.String[])" map="A"/>
  <package name="scripts.emily" map="H"/>
  <package name="scripts.emily.transmembrane" map="A"/>
  <class name="scripts.emily.transmembrane.FindTransMembraneProteins" map="A"/>
  <method class="scripts.emily.transmembrane.FindTransMembraneProteins" name="void main(java.lang.String[])" map="A"/>
  <package name="scripts.mqdong" map="I"/>
  <class name="scripts.mqdong.FilterRedundantPeptides" map="A"/>
  <method class="scripts.mqdong.FilterRedundantPeptides" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.PepXMLProteinConverter" map="A"/>
  <method class="scripts.PepXMLProteinConverter" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.SimpleXMLValidator" map="B"/>
  <method class="scripts.SimpleXMLValidator" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.NRUtils" map="C"/>
  <method class="scripts.NRUtils" name="double GaussJordan(double[][], int)" map="A"/>
  <method class="scripts.NRUtils" name="void PrintSymmetricMatrix(double[][], int)" map="B"/>
  <method class="scripts.NRUtils" name="void QuickSortIndex(double[], int[], int, int)" map="A"/>
  <method class="scripts.NRUtils" name="void DiscriminantAnalysis(double[][], double[], int, int, byte[])" map="A"/>
  <method class="scripts.NRUtils" name="void QuickSortIndex(double[], int[])" map="A"/>
  <class name="scripts.XMLValidator" map="D"/>
  <method class="scripts.XMLValidator" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.MZXMLRead" map="E"/>
  <method class="scripts.MZXMLRead" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.MZXMLRead" name="byte[] floatTobyte(float)" map="A"/>
  <class name="scripts.SpecCount" map="F"/>
  <method class="scripts.SpecCount" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.CensusDB" map="G"/>
  <method class="scripts.CensusDB" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.DTASelectProtXMLConvert" map="H"/>
  <method class="scripts.DTASelectProtXMLConvert" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.CensusReportReader" map="I"/>
  <field class="scripts.CensusReportReader" name="totalPeptideCount" map="A"/>
  <method class="scripts.CensusReportReader" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.CensusReportReader" name="void setTotalPeptideCount(int)" map="A"/>
  <method class="scripts.CensusReportReader" name="java.util.List read(java.lang.String)" map="A"/>
  <method class="scripts.CensusReportReader" name="int getTotalPeptideCount()" map="A"/>
  <class name="scripts.XMLTest" map="J"/>
  <method class="scripts.XMLTest" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.XMLTest" name="byte[] floatTobyte(float)" map="A"/>
  <class name="scripts.MergeTest" map="K"/>
  <method class="scripts.MergeTest" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.DTASelectPepXMLConvert" map="L"/>
  <method class="scripts.DTASelectPepXMLConvert" name="void main(java.lang.String[])" map="A"/>
  <class name="scripts.XMLRead1" map="M"/>
  <method class="scripts.XMLRead1" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.XMLRead1" name="byte[] floatTobyte(float)" map="A"/>
  <class name="scripts.Test" map="N"/>
  <method class="scripts.Test" name="boolean checkWithinBound(int, int, int)" map="A"/>
  <method class="scripts.Test" name="void main(java.lang.String[])" map="A"/>
  <method class="scripts.Test" name="void rotateNew(int, int, int)" map="B"/>
  <method class="scripts.Test" name="void rotateOrigin(int, int, int)" map="C"/>
  <method class="scripts.Test" name="void test()" map="A"/>
  <package name="com" map="B"/>
  <package name="com.microstar" map="A"/>
  <package name="com.microstar.xml" map="A"/>
  <package name="com.microstar.xml.driver" map="A"/>
  <class name="com.microstar.xml.driver.SAXDriver" map="A"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="parser" map="D"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="base" map="E"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="attributeNames" map="F"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="seenDTDEvents" map="G"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="documentHandler" map="H"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="errorHandler" map="I"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="entityStack" map="J"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="entityResolver" map="K"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="dtdHandler" map="L"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="attributeValues" map="M"/>
  <field class="com.microstar.xml.driver.SAXDriver" name="elementName" map="N"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void endElement(java.lang.String)" map="endElement"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void setDocumentHandler(org.xml.sax.DocumentHandler)" map="setDocumentHandler"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.Object resolveEntity(java.lang.String, java.lang.String)" map="resolveEntity"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="int getLength()" map="getLength"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void parse(org.xml.sax.InputSource)" map="parse"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="int getLineNumber()" map="getLineNumber"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getType(java.lang.String)" map="getType"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void doctypeDecl(java.lang.String, java.lang.String, java.lang.String)" map="doctypeDecl"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void error(java.lang.String, java.lang.String, int, int)" map="error"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void startElement(java.lang.String)" map="startElement"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getType(int)" map="getType"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void startDocument()" map="startDocument"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void setEntityResolver(org.xml.sax.EntityResolver)" map="setEntityResolver"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void processingInstruction(java.lang.String, java.lang.String)" map="processingInstruction"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getName(int)" map="getName"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void closeStreams(org.xml.sax.InputSource)" map="A"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void setDTDHandler(org.xml.sax.DTDHandler)" map="setDTDHandler"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void endExternalEntity(java.lang.String)" map="endExternalEntity"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getValue(int)" map="getValue"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void deliverDTDEvents()" map="A"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void startExternalEntity(java.lang.String)" map="startExternalEntity"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="int getColumnNumber()" map="getColumnNumber"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void ignorableWhitespace(char[], int, int)" map="ignorableWhitespace"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getPublicId()" map="getPublicId"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void parse(java.lang.String)" map="parse"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void charData(char[], int, int)" map="charData"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void attribute(java.lang.String, java.lang.String, boolean)" map="attribute"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void setErrorHandler(org.xml.sax.ErrorHandler)" map="setErrorHandler"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void setLocale(java.util.Locale)" map="setLocale"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getValue(java.lang.String)" map="getValue"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="java.lang.String getSystemId()" map="getSystemId"/>
  <method class="com.microstar.xml.driver.SAXDriver" name="void endDocument()" map="endDocument"/>
  <class name="com.microstar.xml.HandlerBase" map="A"/>
  <class name="com.microstar.xml.XmlHandler" map="B"/>
  <class name="com.microstar.xml.XmlException" map="C"/>
  <field class="com.microstar.xml.XmlException" name="_systemId" map="A"/>
  <field class="com.microstar.xml.XmlException" name="_cause" map="B"/>
  <field class="com.microstar.xml.XmlException" name="_message" map="C"/>
  <field class="com.microstar.xml.XmlException" name="_column" map="D"/>
  <field class="com.microstar.xml.XmlException" name="_line" map="E"/>
  <method class="com.microstar.xml.XmlException" name="void printStackTrace(java.io.PrintStream)" map="printStackTrace"/>
  <method class="com.microstar.xml.XmlException" name="void printStackTrace(java.io.PrintWriter)" map="printStackTrace"/>
  <method class="com.microstar.xml.XmlException" name="java.lang.Throwable getCause()" map="getCause"/>
  <method class="com.microstar.xml.XmlException" name="java.lang.String stackTraceToString(java.lang.Throwable)" map="A"/>
  <method class="com.microstar.xml.XmlException" name="java.lang.String getMessage()" map="getMessage"/>
  <method class="com.microstar.xml.XmlException" name="java.lang.String getSystemId()" map="A"/>
  <method class="com.microstar.xml.XmlException" name="int getColumn()" map="B"/>
  <method class="com.microstar.xml.XmlException" name="void printStackTrace()" map="printStackTrace"/>
  <method class="com.microstar.xml.XmlException" name="int getLine()" map="C"/>
  <class name="com.microstar.xml.XmlParser" map="D"/>
  <field class="com.microstar.xml.XmlParser" name="INPUT_INTERNAL" map="A"/>
  <field class="com.microstar.xml.XmlParser" name="handler" map="B"/>
  <field class="com.microstar.xml.XmlParser" name="attributeTypeHash" map="C"/>
  <field class="com.microstar.xml.XmlParser" name="ENTITY_NDATA" map="D"/>
  <field class="com.microstar.xml.XmlParser" name="CONTEXT_NONE" map="E"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_ENTITY" map="F"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_CDATA" map="G"/>
  <field class="com.microstar.xml.XmlParser" name="baseReader" map="H"/>
  <field class="com.microstar.xml.XmlParser" name="INPUT_NONE" map="I"/>
  <field class="com.microstar.xml.XmlParser" name="line" map="J"/>
  <field class="com.microstar.xml.XmlParser" name="rawReadBuffer" map="K"/>
  <field class="com.microstar.xml.XmlParser" name="reader" map="L"/>
  <field class="com.microstar.xml.XmlParser" name="tagAttributePos" map="M"/>
  <field class="com.microstar.xml.XmlParser" name="CONTENT_UNDECLARED" map="N"/>
  <field class="com.microstar.xml.XmlParser" name="nameBufferPos" map="O"/>
  <field class="com.microstar.xml.XmlParser" name="errorCount" map="P"/>
  <field class="com.microstar.xml.XmlParser" name="sourceType" map="Q"/>
  <field class="com.microstar.xml.XmlParser" name="LIT_ENTITY_REF" map="R"/>
  <field class="com.microstar.xml.XmlParser" name="nameBuffer" map="S"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_NMTOKEN" map="T"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UTF_8" map="U"/>
  <field class="com.microstar.xml.XmlParser" name="notationInfo" map="V"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_NMTOKENS" map="W"/>
  <field class="com.microstar.xml.XmlParser" name="ENTITY_TEXT" map="X"/>
  <field class="com.microstar.xml.XmlParser" name="NAME_BUFFER_INITIAL" map="Y"/>
  <field class="com.microstar.xml.XmlParser" name="baseURI" map="Z"/>
  <field class="com.microstar.xml.XmlParser" name="inputStack" map="_"/>
  <field class="com.microstar.xml.XmlParser" name="entityStack" map="a"/>
  <field class="com.microstar.xml.XmlParser" name="baseInputBufferLength" map="b"/>
  <field class="com.microstar.xml.XmlParser" name="is" map="c"/>
  <field class="com.microstar.xml.XmlParser" name="INPUT_EXTERNAL" map="d"/>
  <field class="com.microstar.xml.XmlParser" name="ENTITY_INTERNAL" map="e"/>
  <field class="com.microstar.xml.XmlParser" name="ENTITY_UNDECLARED" map="f"/>
  <field class="com.microstar.xml.XmlParser" name="CONTENT_ANY" map="g"/>
  <field class="com.microstar.xml.XmlParser" name="column" map="h"/>
  <field class="com.microstar.xml.XmlParser" name="readBufferLength" map="i"/>
  <field class="com.microstar.xml.XmlParser" name="INPUT_READER" map="j"/>
  <field class="com.microstar.xml.XmlParser" name="DATA_BUFFER_INITIAL" map="k"/>
  <field class="com.microstar.xml.XmlParser" name="LIT_PE_REF" map="l"/>
  <field class="com.microstar.xml.XmlParser" name="baseInputBufferStart" map="m"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_DEFAULT_REQUIRED" map="n"/>
  <field class="com.microstar.xml.XmlParser" name="LIT_CHAR_REF" map="o"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_ENTITIES" map="p"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_NOTATION" map="q"/>
  <field class="com.microstar.xml.XmlParser" name="readBufferOverflow" map="r"/>
  <field class="com.microstar.xml.XmlParser" name="readBufferPos" map="s"/>
  <field class="com.microstar.xml.XmlParser" name="SYMBOL_TABLE_LENGTH" map="t"/>
  <field class="com.microstar.xml.XmlParser" name="CONTENT_MIXED" map="u"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UCS_4_2143" map="v"/>
  <field class="com.microstar.xml.XmlParser" name="CONTEXT_ENTITYVALUE" map="w"/>
  <field class="com.microstar.xml.XmlParser" name="externalEntity" map="x"/>
  <field class="com.microstar.xml.XmlParser" name="CONTENT_ELEMENTS" map="y"/>
  <field class="com.microstar.xml.XmlParser" name="CONTEXT_ATTRIBUTEVALUE" map="z"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_ISO_8859_1" map="&#x00a2;"/>
  <field class="com.microstar.xml.XmlParser" name="basePublicId" map="&#x00a3;"/>
  <field class="com.microstar.xml.XmlParser" name="READ_BUFFER_MAX" map="&#x00a4;"/>
  <field class="com.microstar.xml.XmlParser" name="LIT_NORMALIZE" map="&#x00a5;"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UCS_4_1234" map="&#x00aa;"/>
  <field class="com.microstar.xml.XmlParser" name="baseInputStream" map="&#x00b5;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_UNDECLARED" map="&#x00ba;"/>
  <field class="com.microstar.xml.XmlParser" name="currentElementContent" map="&#x00c0;"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UCS_2_21" map="&#x00c1;"/>
  <field class="com.microstar.xml.XmlParser" name="context" map="&#x00c2;"/>
  <field class="com.microstar.xml.XmlParser" name="dataBufferPos" map="&#x00c3;"/>
  <field class="com.microstar.xml.XmlParser" name="USE_CHEATS" map="&#x00c4;"/>
  <field class="com.microstar.xml.XmlParser" name="baseInputBuffer" map="&#x00c5;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_ENUMERATED" map="&#x00c6;"/>
  <field class="com.microstar.xml.XmlParser" name="tagAttributes" map="&#x00c7;"/>
  <field class="com.microstar.xml.XmlParser" name="elementInfo" map="&#x00c8;"/>
  <field class="com.microstar.xml.XmlParser" name="readBuffer" map="&#x00c9;"/>
  <field class="com.microstar.xml.XmlParser" name="currentByteCount" map="&#x00ca;"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UCS_2_12" map="&#x00cb;"/>
  <field class="com.microstar.xml.XmlParser" name="sawCR" map="&#x00cc;"/>
  <field class="com.microstar.xml.XmlParser" name="INPUT_STREAM" map="&#x00cd;"/>
  <field class="com.microstar.xml.XmlParser" name="CONTENT_EMPTY" map="&#x00ce;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_DEFAULT_IMPLIED" map="&#x00cf;"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UCS_4_4321" map="&#x00d0;"/>
  <field class="com.microstar.xml.XmlParser" name="baseEncoding" map="&#x00d1;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_IDREF" map="&#x00d2;"/>
  <field class="com.microstar.xml.XmlParser" name="symbolTable" map="&#x00d3;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_DEFAULT_SPECIFIED" map="&#x00d4;"/>
  <field class="com.microstar.xml.XmlParser" name="dataBuffer" map="&#x00d5;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_DEFAULT_UNDECLARED" map="&#x00d6;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_ID" map="&#x00d8;"/>
  <field class="com.microstar.xml.XmlParser" name="entityInfo" map="&#x00d9;"/>
  <field class="com.microstar.xml.XmlParser" name="ENCODING_UCS_4_3412" map="&#x00da;"/>
  <field class="com.microstar.xml.XmlParser" name="currentElement" map="&#x00db;"/>
  <field class="com.microstar.xml.XmlParser" name="INPUT_BUFFER" map="&#x00dc;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_DEFAULT_FIXED" map="&#x00dd;"/>
  <field class="com.microstar.xml.XmlParser" name="ATTRIBUTE_IDREFS" map="&#x00de;"/>
  <field class="com.microstar.xml.XmlParser" name="encoding" map="&#x00df;"/>
  <field class="com.microstar.xml.XmlParser" name="CONTEXT_DTD" map="&#x00e0;"/>
  <method class="com.microstar.xml.XmlParser" name="void skipUntil(java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String readLiteral(int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getElementContentModel(java.lang.String)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void pushString(java.lang.String, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String intern(char[], int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void copyUtf8ReadBuffer(int)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void setEntity(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void parseCp()" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void parseElement()" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void parse(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="boolean tryRead(char)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String readNmtoken(boolean)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="int getElementContentType(java.lang.String)" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="boolean tryRead(java.lang.String)" map="D"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getEntitySystemId(java.lang.String)" map="E"/>
  <method class="com.microstar.xml.XmlParser" name="void require(java.lang.String)" map="F"/>
  <method class="com.microstar.xml.XmlParser" name="void doParse(java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void requireWhitespace()" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="void parseComment()" map="D"/>
  <method class="com.microstar.xml.XmlParser" name="void parseDocument()" map="E"/>
  <method class="com.microstar.xml.XmlParser" name="int getAttributeDefaultValueType(java.lang.String, java.lang.String)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void parseDoctypedecl()" map="F"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getEntityNotationName(java.lang.String)" map="G"/>
  <method class="com.microstar.xml.XmlParser" name="void parse(java.lang.String, java.lang.String, java.io.InputStream, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String dataBufferToString()" map="G"/>
  <method class="com.microstar.xml.XmlParser" name="void copyUcs4ReadBuffer(int, int, int, int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void setInternalEntity(java.lang.String, java.lang.String)" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="int getAttributeType(java.lang.String, java.lang.String)" map="D"/>
  <method class="com.microstar.xml.XmlParser" name="void parseEnumeration()" map="H"/>
  <method class="com.microstar.xml.XmlParser" name="void copyUcs2ReadBuffer(int, int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void pushURL(java.lang.String, java.lang.String, java.lang.String, java.io.Reader, java.io.InputStream, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void setAttribute(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="int readAttType()" map="I"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String[] readExternalIds(boolean)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void checkEncoding(java.lang.String, boolean)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void setElement(java.lang.String, int, java.lang.String, java.util.Hashtable)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void parseMarkupdecl()" map="J"/>
  <method class="com.microstar.xml.XmlParser" name="void parseEntityDecl()" map="K"/>
  <method class="com.microstar.xml.XmlParser" name="boolean isWhitespace(char)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void parseETag()" map="L"/>
  <method class="com.microstar.xml.XmlParser" name="void read8bitEncodingDeclaration()" map="M"/>
  <method class="com.microstar.xml.XmlParser" name="void parseAttlistDecl()" map="N"/>
  <method class="com.microstar.xml.XmlParser" name="java.util.Enumeration declaredNotations()" map="O"/>
  <method class="com.microstar.xml.XmlParser" name="void parseWhitespace()" map="P"/>
  <method class="com.microstar.xml.XmlParser" name="java.util.Enumeration declaredEntities()" map="Q"/>
  <method class="com.microstar.xml.XmlParser" name="void parsePEReference(boolean)" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="void parseDefault(java.lang.String, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String intern(java.lang.String)" map="H"/>
  <method class="com.microstar.xml.XmlParser" name="void parseContent()" map="R"/>
  <method class="com.microstar.xml.XmlParser" name="void tryEncodingDecl(boolean)" map="D"/>
  <method class="com.microstar.xml.XmlParser" name="void dataBufferAppend(java.lang.String)" map="I"/>
  <method class="com.microstar.xml.XmlParser" name="void detectEncoding()" map="S"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getCurrentElement()" map="T"/>
  <method class="com.microstar.xml.XmlParser" name="void parsePCData()" map="U"/>
  <method class="com.microstar.xml.XmlParser" name="void skipWhitespace()" map="V"/>
  <method class="com.microstar.xml.XmlParser" name="void copyIso8859_1ReadBuffer(int)" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="void parseCDSect()" map="W"/>
  <method class="com.microstar.xml.XmlParser" name="void cleanupVariables()" map="X"/>
  <method class="com.microstar.xml.XmlParser" name="void pushCharArray(java.lang.String, char[], int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="int getEntityType(java.lang.String)" map="J"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getAttributeExpandedValue(java.lang.String, java.lang.String)" map="E"/>
  <method class="com.microstar.xml.XmlParser" name="void parseUntil(java.lang.String)" map="K"/>
  <method class="com.microstar.xml.XmlParser" name="void parseXMLDecl(boolean)" map="E"/>
  <method class="com.microstar.xml.XmlParser" name="java.util.Hashtable getElementAttributes(java.lang.String)" map="L"/>
  <method class="com.microstar.xml.XmlParser" name="void filterCR()" map="Y"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getAttributeDefaultValue(java.lang.String, java.lang.String)" map="F"/>
  <method class="com.microstar.xml.XmlParser" name="void parse(java.lang.String, java.lang.String, java.io.Reader)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void parseProlog()" map="Z"/>
  <method class="com.microstar.xml.XmlParser" name="void dataBufferNormalize()" map="_"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getEntityValue(java.lang.String)" map="M"/>
  <method class="com.microstar.xml.XmlParser" name="void dataBufferAppend(char[], int, int)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getEntityPublicId(java.lang.String)" map="N"/>
  <method class="com.microstar.xml.XmlParser" name="void parseAttDef(java.lang.String)" map="O"/>
  <method class="com.microstar.xml.XmlParser" name="void parseNotationType()" map="a"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getNotationSystemId(java.lang.String)" map="P"/>
  <method class="com.microstar.xml.XmlParser" name="void parseMisc()" map="b"/>
  <method class="com.microstar.xml.XmlParser" name="void parsePI()" map="c"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.Object[] getAttribute(java.lang.String, java.lang.String)" map="G"/>
  <method class="com.microstar.xml.XmlParser" name="char readCh()" map="d"/>
  <method class="com.microstar.xml.XmlParser" name="void unread(char)" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.Object extendArray(java.lang.Object, int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void error(java.lang.String, java.lang.String, java.lang.String)" map="B"/>
  <method class="com.microstar.xml.XmlParser" name="void parseEq()" map="e"/>
  <method class="com.microstar.xml.XmlParser" name="void setExternalTextEntity(java.lang.String, java.lang.String, java.lang.String)" map="C"/>
  <method class="com.microstar.xml.XmlParser" name="int getNextUtf8Byte(int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void parseTextDecl(boolean)" map="F"/>
  <method class="com.microstar.xml.XmlParser" name="java.util.Enumeration declaredElements()" map="f"/>
  <method class="com.microstar.xml.XmlParser" name="void setNotation(java.lang.String, java.lang.String, java.lang.String)" map="D"/>
  <method class="com.microstar.xml.XmlParser" name="void parseMixed()" map="g"/>
  <method class="com.microstar.xml.XmlParser" name="void parseCharRef()" map="h"/>
  <method class="com.microstar.xml.XmlParser" name="int getColumnNumber()" map="i"/>
  <method class="com.microstar.xml.XmlParser" name="void require(char)" map="D"/>
  <method class="com.microstar.xml.XmlParser" name="void pushInput(java.lang.String)" map="Q"/>
  <method class="com.microstar.xml.XmlParser" name="java.util.Enumeration declaredAttributes(java.lang.String)" map="R"/>
  <method class="com.microstar.xml.XmlParser" name="void setHandler(com.microstar.xml.XmlHandler)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="boolean tryEncoding(byte[], byte, byte)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void initializeVariables()" map="j"/>
  <method class="com.microstar.xml.XmlParser" name="void parseAttribute(java.lang.String)" map="S"/>
  <method class="com.microstar.xml.XmlParser" name="void dataBufferAppend(char)" map="E"/>
  <method class="com.microstar.xml.XmlParser" name="void parseEntityRef(boolean)" map="G"/>
  <method class="com.microstar.xml.XmlParser" name="void encodingError(java.lang.String, int, int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void parseElements()" map="k"/>
  <method class="com.microstar.xml.XmlParser" name="void readDataChunk()" map="l"/>
  <method class="com.microstar.xml.XmlParser" name="void popInput()" map="m"/>
  <method class="com.microstar.xml.XmlParser" name="void unread(char[], int)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void dataBufferFlush()" map="n"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getNotationPublicId(java.lang.String)" map="T"/>
  <method class="com.microstar.xml.XmlParser" name="void setExternalDataEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="void error(java.lang.String, char, java.lang.String)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="int getLineNumber()" map="o"/>
  <method class="com.microstar.xml.XmlParser" name="boolean tryWhitespace()" map="p"/>
  <method class="com.microstar.xml.XmlParser" name="boolean tryEncoding(byte[], byte, byte, byte, byte)" map="A"/>
  <method class="com.microstar.xml.XmlParser" name="java.lang.String getAttributeEnumeration(java.lang.String, java.lang.String)" map="H"/>
  <method class="com.microstar.xml.XmlParser" name="void parseContentspec(java.lang.String)" map="U"/>
  <method class="com.microstar.xml.XmlParser" name="void parseElementdecl()" map="q"/>
  <method class="com.microstar.xml.XmlParser" name="void parseConditionalSect()" map="r"/>
  <method class="com.microstar.xml.XmlParser" name="void parseNotationDecl()" map="s"/>
  <package name="ptolemy" map="C"/>
  <package name="ptolemy.gui" map="A"/>
  <class name="ptolemy.gui.ComponentDialog$2" map="2"/>
  <field class="ptolemy.gui.ComponentDialog$2" name="this$0" map="A"/>
  <method class="ptolemy.gui.ComponentDialog$2" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="ptolemy.gui.ComponentDialog$1" map="1"/>
  <field class="ptolemy.gui.ComponentDialog$1" name="this$0" map="A"/>
  <method class="ptolemy.gui.ComponentDialog$1" name="void propertyChange(java.beans.PropertyChangeEvent)" map="propertyChange"/>
  <class name="ptolemy.gui.ComponentDialog" map="A"/>
  <field class="ptolemy.gui.ComponentDialog" name="_messageArea" map="A"/>
  <field class="ptolemy.gui.ComponentDialog" name="_defaultButtons" map="B"/>
  <field class="ptolemy.gui.ComponentDialog" name="_buttons" map="C"/>
  <field class="ptolemy.gui.ComponentDialog" name="_buttonPressed" map="D"/>
  <field class="ptolemy.gui.ComponentDialog" name="_doneHandleClosing" map="E"/>
  <field class="ptolemy.gui.ComponentDialog" name="contents" map="F"/>
  <field class="ptolemy.gui.ComponentDialog" name="_optionPane" map="G"/>
  <method class="ptolemy.gui.ComponentDialog" name="void setMessage(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.ComponentDialog" name="void _handleClosing()" map="A"/>
  <method class="ptolemy.gui.ComponentDialog" name="javax.swing.JOptionPane access$000(ptolemy.gui.ComponentDialog)" map="A"/>
  <method class="ptolemy.gui.ComponentDialog" name="java.lang.String buttonPressed()" map="B"/>
  <class name="ptolemy.gui.QueryListener" map="B"/>
  <method class="ptolemy.gui.QueryListener" name="void changed(java.lang.String)" map="A"/>
  <class name="ptolemy.gui.CloseListener" map="C"/>
  <method class="ptolemy.gui.CloseListener" name="void windowClosed(java.awt.Window, java.lang.String)" map="A"/>
  <class name="ptolemy.gui.SwingWorker$ThreadVar" map="_A"/>
  <field class="ptolemy.gui.SwingWorker$ThreadVar" name="_thread" map="A"/>
  <method class="ptolemy.gui.SwingWorker$ThreadVar" name="void clear()" map="A"/>
  <method class="ptolemy.gui.SwingWorker$ThreadVar" name="java.lang.Thread get()" map="B"/>
  <class name="ptolemy.gui.SwingWorker$2" map="2"/>
  <field class="ptolemy.gui.SwingWorker$2" name="this$0" map="A"/>
  <field class="ptolemy.gui.SwingWorker$2" name="val$doFinished" map="B"/>
  <method class="ptolemy.gui.SwingWorker$2" name="void run()" map="run"/>
  <class name="ptolemy.gui.SwingWorker$1" map="1"/>
  <field class="ptolemy.gui.SwingWorker$1" name="this$0" map="A"/>
  <method class="ptolemy.gui.SwingWorker$1" name="void run()" map="run"/>
  <class name="ptolemy.gui.SwingWorker" map="D"/>
  <field class="ptolemy.gui.SwingWorker" name="_threadVar" map="A"/>
  <field class="ptolemy.gui.SwingWorker" name="_value" map="B"/>
  <method class="ptolemy.gui.SwingWorker" name="java.lang.Object construct()" map="A"/>
  <method class="ptolemy.gui.SwingWorker" name="void finished()" map="B"/>
  <method class="ptolemy.gui.SwingWorker" name="void interrupt()" map="C"/>
  <method class="ptolemy.gui.SwingWorker" name="void setValue(java.lang.Object)" map="A"/>
  <method class="ptolemy.gui.SwingWorker" name="void start()" map="D"/>
  <method class="ptolemy.gui.SwingWorker" name="java.lang.Object get()" map="E"/>
  <method class="ptolemy.gui.SwingWorker" name="ptolemy.gui.SwingWorker$ThreadVar access$100(ptolemy.gui.SwingWorker)" map="A"/>
  <method class="ptolemy.gui.SwingWorker" name="void access$000(ptolemy.gui.SwingWorker, java.lang.Object)" map="A"/>
  <method class="ptolemy.gui.SwingWorker" name="java.lang.Object getValue()" map="F"/>
  <class name="ptolemy.gui.Query$QueryFocusListener" map="_A"/>
  <field class="ptolemy.gui.Query$QueryFocusListener" name="this$0" map="A"/>
  <field class="ptolemy.gui.Query$QueryFocusListener" name="_name" map="B"/>
  <method class="ptolemy.gui.Query$QueryFocusListener" name="void focusGained(java.awt.event.FocusEvent)" map="focusGained"/>
  <method class="ptolemy.gui.Query$QueryFocusListener" name="void focusLost(java.awt.event.FocusEvent)" map="focusLost"/>
  <class name="ptolemy.gui.Query$QueryScrollPane" map="_B"/>
  <field class="ptolemy.gui.Query$QueryScrollPane" name="this$0" map="A"/>
  <field class="ptolemy.gui.Query$QueryScrollPane" name="textArea" map="B"/>
  <method class="ptolemy.gui.Query$QueryScrollPane" name="java.lang.String getText()" map="A"/>
  <method class="ptolemy.gui.Query$QueryScrollPane" name="void setText(java.lang.String)" map="A"/>
  <class name="ptolemy.gui.Query$SliderListener" map="_C"/>
  <field class="ptolemy.gui.Query$SliderListener" name="this$0" map="A"/>
  <field class="ptolemy.gui.Query$SliderListener" name="_name" map="B"/>
  <method class="ptolemy.gui.Query$SliderListener" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="ptolemy.gui.Query$QueryActionListener" map="_D"/>
  <field class="ptolemy.gui.Query$QueryActionListener" name="this$0" map="A"/>
  <field class="ptolemy.gui.Query$QueryActionListener" name="_name" map="B"/>
  <method class="ptolemy.gui.Query$QueryActionListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.gui.Query$QueryItemListener" map="_E"/>
  <field class="ptolemy.gui.Query$QueryItemListener" name="this$0" map="A"/>
  <field class="ptolemy.gui.Query$QueryItemListener" name="_name" map="B"/>
  <method class="ptolemy.gui.Query$QueryItemListener" name="void itemStateChanged(java.awt.event.ItemEvent)" map="itemStateChanged"/>
  <class name="ptolemy.gui.Query" map="E"/>
  <field class="ptolemy.gui.Query" name="_listeners" map="A"/>
  <field class="ptolemy.gui.Query" name="_leftPadding" map="B"/>
  <field class="ptolemy.gui.Query" name="_messageArea" map="C"/>
  <field class="ptolemy.gui.Query" name="_constraints" map="D"/>
  <field class="ptolemy.gui.Query" name="_width" map="E"/>
  <field class="ptolemy.gui.Query" name="_messageScrollPane" map="F"/>
  <field class="ptolemy.gui.Query" name="_labels" map="G"/>
  <field class="ptolemy.gui.Query" name="_noPadding" map="H"/>
  <field class="ptolemy.gui.Query" name="_entryPanel" map="I"/>
  <field class="ptolemy.gui.Query" name="_previous" map="J"/>
  <field class="ptolemy.gui.Query" name="_widgetsHeight" map="K"/>
  <field class="ptolemy.gui.Query" name="DEFAULT_ENTRY_HEIGHT" map="L"/>
  <field class="ptolemy.gui.Query" name="_columns" map="M"/>
  <field class="ptolemy.gui.Query" name="_grid" map="N"/>
  <field class="ptolemy.gui.Query" name="_background" map="O"/>
  <field class="ptolemy.gui.Query" name="_messageScrollPaneAdded" map="P"/>
  <field class="ptolemy.gui.Query" name="DEFAULT_ENTRY_WIDTH" map="Q"/>
  <field class="ptolemy.gui.Query" name="_entryScrollPane" map="R"/>
  <field class="ptolemy.gui.Query" name="_entries" map="S"/>
  <field class="ptolemy.gui.Query" name="_height" map="T"/>
  <method class="ptolemy.gui.Query" name="void setBoolean(java.lang.String, boolean)" map="A"/>
  <method class="ptolemy.gui.Query" name="void setAndNotify(java.lang.String, java.lang.String)" map="A"/>
  <method class="ptolemy.gui.Query" name="int getIntValue(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.Query" name="void notifyListeners()" map="A"/>
  <method class="ptolemy.gui.Query" name="void addFileChooser(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="ptolemy.gui.Query" name="void setTextHeight(int)" map="A"/>
  <method class="ptolemy.gui.Query" name="void removeQueryListener(ptolemy.gui.QueryListener)" map="A"/>
  <method class="ptolemy.gui.Query" name="boolean booleanValue(java.lang.String)" map="B"/>
  <method class="ptolemy.gui.Query" name="void addTextArea(java.lang.String, java.lang.String, java.lang.String)" map="B"/>
  <method class="ptolemy.gui.Query" name="void addDisplay(java.lang.String, java.lang.String, java.lang.String)" map="C"/>
  <method class="ptolemy.gui.Query" name="void setSlider(java.lang.String, int)" map="A"/>
  <method class="ptolemy.gui.Query" name="boolean getBooleanValue(java.lang.String)" map="C"/>
  <method class="ptolemy.gui.Query" name="void setTextWidth(int)" map="B"/>
  <method class="ptolemy.gui.Query" name="void setLine(java.lang.String, java.lang.String)" map="B"/>
  <method class="ptolemy.gui.Query" name="void addQueryListener(ptolemy.gui.QueryListener)" map="B"/>
  <method class="ptolemy.gui.Query" name="java.awt.Dimension getMaximumSize()" map="getMaximumSize"/>
  <method class="ptolemy.gui.Query" name="void setToolTip(java.lang.String, java.lang.String)" map="C"/>
  <method class="ptolemy.gui.Query" name="java.lang.String stringValue(java.lang.String)" map="D"/>
  <method class="ptolemy.gui.Query" name="double getDoubleValue(java.lang.String)" map="E"/>
  <method class="ptolemy.gui.Query" name="int getTextWidth()" map="B"/>
  <method class="ptolemy.gui.Query" name="int getTextHeight()" map="C"/>
  <method class="ptolemy.gui.Query" name="void addLine(java.lang.String, java.lang.String, java.lang.String)" map="D"/>
  <method class="ptolemy.gui.Query" name="void setDisplay(java.lang.String, java.lang.String)" map="D"/>
  <method class="ptolemy.gui.Query" name="void addSelectButtons(java.lang.String, java.lang.String, java.lang.String[], java.util.Set)" map="A"/>
  <method class="ptolemy.gui.Query" name="void _notifyListeners(java.lang.String)" map="F"/>
  <method class="ptolemy.gui.Query" name="java.lang.String getStringValue(java.lang.String)" map="G"/>
  <method class="ptolemy.gui.Query" name="void setBackground(java.awt.Color)" map="setBackground"/>
  <method class="ptolemy.gui.Query" name="void addChoice(java.lang.String, java.lang.String, java.lang.String[], java.lang.String)" map="A"/>
  <method class="ptolemy.gui.Query" name="double doubleValue(java.lang.String)" map="H"/>
  <method class="ptolemy.gui.Query" name="void addCheckBox(java.lang.String, java.lang.String, boolean)" map="A"/>
  <method class="ptolemy.gui.Query" name="void _addPair(java.lang.String, javax.swing.JLabel, java.awt.Component, java.lang.Object)" map="A"/>
  <method class="ptolemy.gui.Query" name="void set(java.lang.String, java.lang.String)" map="E"/>
  <method class="ptolemy.gui.Query" name="void setMessage(java.lang.String)" map="I"/>
  <method class="ptolemy.gui.Query" name="int intValue(java.lang.String)" map="J"/>
  <method class="ptolemy.gui.Query" name="void addRadioButtons(java.lang.String, java.lang.String, java.lang.String[], java.lang.String)" map="B"/>
  <method class="ptolemy.gui.Query" name="void setColumns(int)" map="C"/>
  <method class="ptolemy.gui.Query" name="void setEnabled(java.lang.String, boolean)" map="B"/>
  <method class="ptolemy.gui.Query" name="void addSlider(java.lang.String, java.lang.String, int, int, int)" map="A"/>
  <method class="ptolemy.gui.Query" name="void addChoice(java.lang.String, java.lang.String, java.lang.String[], java.lang.String, boolean)" map="A"/>
  <class name="ptolemy.gui.GraphicalMessageHandler" map="F"/>
  <field class="ptolemy.gui.GraphicalMessageHandler" name="_context" map="B"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void _error(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="java.lang.String _ellipsis(java.lang.String, int)" map="A"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void _message(java.lang.String)" map="B"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="java.awt.Component getContext()" map="B"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void _error(java.lang.String, java.lang.Exception)" map="C"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void _warning(java.lang.String, java.lang.Exception)" map="B"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void setContext(java.awt.Component)" map="A"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void _showStackTrace(java.lang.Exception, java.lang.String)" map="A"/>
  <method class="ptolemy.gui.GraphicalMessageHandler" name="void _warning(java.lang.String)" map="E"/>
  <class name="ptolemy.gui.CancelException" map="G"/>
  <class name="ptolemy.gui.StatusBar" map="H"/>
  <field class="ptolemy.gui.StatusBar" name="_message" map="A"/>
  <field class="ptolemy.gui.StatusBar" name="_progress" map="B"/>
  <field class="ptolemy.gui.StatusBar" name="_progressPanel" map="C"/>
  <method class="ptolemy.gui.StatusBar" name="void setMessage(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.StatusBar" name="void setBackground(java.awt.Color)" map="setBackground"/>
  <method class="ptolemy.gui.StatusBar" name="javax.swing.JProgressBar progressBar()" map="A"/>
  <class name="ptolemy.gui.JTextAreaExec$_StreamReaderThread" map="_A"/>
  <field class="ptolemy.gui.JTextAreaExec$_StreamReaderThread" name="this$0" map="A"/>
  <field class="ptolemy.gui.JTextAreaExec$_StreamReaderThread" name="_streamType" map="B"/>
  <field class="ptolemy.gui.JTextAreaExec$_StreamReaderThread" name="_inputStream" map="C"/>
  <field class="ptolemy.gui.JTextAreaExec$_StreamReaderThread" name="_jTextAreaExec" map="D"/>
  <method class="ptolemy.gui.JTextAreaExec$_StreamReaderThread" name="void run()" map="run"/>
  <class name="ptolemy.gui.JTextAreaExec$8" map="8"/>
  <field class="ptolemy.gui.JTextAreaExec$8" name="this$0" map="A"/>
  <field class="ptolemy.gui.JTextAreaExec$8" name="val$i" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec$8" name="void run()" map="run"/>
  <class name="ptolemy.gui.JTextAreaExec$7$1" map="1"/>
  <field class="ptolemy.gui.JTextAreaExec$7$1" name="this$1" map="C"/>
  <method class="ptolemy.gui.JTextAreaExec$7$1" name="void finished()" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec$7$1" name="java.lang.Object construct()" map="A"/>
  <class name="ptolemy.gui.JTextAreaExec$7" map="7"/>
  <field class="ptolemy.gui.JTextAreaExec$7" name="this$0" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.gui.JTextAreaExec$6" map="6"/>
  <field class="ptolemy.gui.JTextAreaExec$6" name="this$0" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.gui.JTextAreaExec$5$1" map="1"/>
  <field class="ptolemy.gui.JTextAreaExec$5$1" name="this$1" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec$5$1" name="void run()" map="run"/>
  <class name="ptolemy.gui.JTextAreaExec$5" map="5"/>
  <field class="ptolemy.gui.JTextAreaExec$5" name="this$0" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.gui.JTextAreaExec$4" map="4"/>
  <field class="ptolemy.gui.JTextAreaExec$4" name="this$0" map="A"/>
  <field class="ptolemy.gui.JTextAreaExec$4" name="val$text" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec$4" name="void run()" map="run"/>
  <class name="ptolemy.gui.JTextAreaExec$3" map="3"/>
  <field class="ptolemy.gui.JTextAreaExec$3" name="val$exec" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec$3" name="void run()" map="run"/>
  <class name="ptolemy.gui.JTextAreaExec$2" map="2"/>
  <method class="ptolemy.gui.JTextAreaExec$2" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="ptolemy.gui.JTextAreaExec$1" map="1"/>
  <field class="ptolemy.gui.JTextAreaExec$1" name="this$0" map="A"/>
  <field class="ptolemy.gui.JTextAreaExec$1" name="val$text" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec$1" name="void run()" map="run"/>
  <class name="ptolemy.gui.JTextAreaExec" map="I"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_process" map="A"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_clearButton" map="B"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_cancelButton" map="C"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_commands" map="D"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_interruptListener" map="E"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_clearListener" map="F"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_startButton" map="G"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_statusBar" map="H"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_progressBar" map="I"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_worker" map="J"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_jTextArea" map="K"/>
  <field class="ptolemy.gui.JTextAreaExec" name="_startListener" map="L"/>
  <method class="ptolemy.gui.JTextAreaExec" name="javax.swing.JButton access$600(ptolemy.gui.JTextAreaExec)" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="javax.swing.JProgressBar access$900(ptolemy.gui.JTextAreaExec)" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec" name="java.lang.Process access$400(ptolemy.gui.JTextAreaExec)" map="C"/>
  <method class="ptolemy.gui.JTextAreaExec" name="ptolemy.gui.SwingWorker access$302(ptolemy.gui.JTextAreaExec, ptolemy.gui.SwingWorker)" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void updateStatusBar(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void cancel()" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void setCommands(java.util.List)" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="java.lang.Object access$700(ptolemy.gui.JTextAreaExec)" map="D"/>
  <method class="ptolemy.gui.JTextAreaExec" name="javax.swing.JButton access$200(ptolemy.gui.JTextAreaExec)" map="E"/>
  <method class="ptolemy.gui.JTextAreaExec" name="javax.swing.JLabel access$100(ptolemy.gui.JTextAreaExec)" map="F"/>
  <method class="ptolemy.gui.JTextAreaExec" name="ptolemy.gui.SwingWorker access$300(ptolemy.gui.JTextAreaExec)" map="G"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void appendJTextArea(java.lang.String)" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec" name="java.lang.Object _executeCommands()" map="B"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void start()" map="C"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void access$500(ptolemy.gui.JTextAreaExec)" map="H"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void main(java.lang.String[])" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void _updateProgressBar(int)" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void _enableStartButton()" map="D"/>
  <method class="ptolemy.gui.JTextAreaExec" name="javax.swing.JButton getStartButton()" map="E"/>
  <method class="ptolemy.gui.JTextAreaExec" name="javax.swing.JTextArea access$000(ptolemy.gui.JTextAreaExec)" map="I"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void access$800(ptolemy.gui.JTextAreaExec, int)" map="A"/>
  <method class="ptolemy.gui.JTextAreaExec" name="void clear()" map="F"/>
  <class name="ptolemy.gui.Top$HelpMenuListener" map="_A"/>
  <field class="ptolemy.gui.Top$HelpMenuListener" name="this$0" map="A"/>
  <method class="ptolemy.gui.Top$HelpMenuListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.gui.Top$1" map="1"/>
  <field class="ptolemy.gui.Top$1" name="this$0" map="A"/>
  <method class="ptolemy.gui.Top$1" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="ptolemy.gui.Top$FileMenuListener" map="_B"/>
  <field class="ptolemy.gui.Top$FileMenuListener" name="this$0" map="A"/>
  <method class="ptolemy.gui.Top$FileMenuListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.gui.Top" map="J"/>
  <field class="ptolemy.gui.Top" name="_helpMenu" map="A"/>
  <field class="ptolemy.gui.Top" name="_lastOverallURL" map="B"/>
  <field class="ptolemy.gui.Top" name="_fileFilter" map="C"/>
  <field class="ptolemy.gui.Top" name="_directory" map="D"/>
  <field class="ptolemy.gui.Top" name="_fileMenu" map="E"/>
  <field class="ptolemy.gui.Top" name="_menubar" map="F"/>
  <field class="ptolemy.gui.Top" name="_statusBar" map="G"/>
  <field class="ptolemy.gui.Top" name="_menuPopulated" map="H"/>
  <field class="ptolemy.gui.Top" name="_lastURL" map="I"/>
  <field class="ptolemy.gui.Top" name="_modified" map="J"/>
  <field class="ptolemy.gui.Top" name="_file" map="K"/>
  <field class="ptolemy.gui.Top" name="_helpMenuItems" map="L"/>
  <field class="ptolemy.gui.Top" name="_fileMenuItems" map="M"/>
  <method class="ptolemy.gui.Top" name="void _print()" map="A"/>
  <method class="ptolemy.gui.Top" name="void setLastOverallURL(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.Top" name="boolean isModified()" map="B"/>
  <method class="ptolemy.gui.Top" name="void _addMenus()" map="C"/>
  <method class="ptolemy.gui.Top" name="void _help()" map="D"/>
  <method class="ptolemy.gui.Top" name="java.lang.String _getName()" map="E"/>
  <method class="ptolemy.gui.Top" name="boolean _save()" map="F"/>
  <method class="ptolemy.gui.Top" name="void _writeFile(java.io.File)" map="A"/>
  <method class="ptolemy.gui.Top" name="void report(java.lang.Exception)" map="A"/>
  <method class="ptolemy.gui.Top" name="boolean _close()" map="G"/>
  <method class="ptolemy.gui.Top" name="void _read(java.net.URL)" map="A"/>
  <method class="ptolemy.gui.Top" name="void setModified(boolean)" map="A"/>
  <method class="ptolemy.gui.Top" name="void _about()" map="H"/>
  <method class="ptolemy.gui.Top" name="void centerOnScreen()" map="I"/>
  <method class="ptolemy.gui.Top" name="boolean _saveAs()" map="J"/>
  <method class="ptolemy.gui.Top" name="void report(java.lang.String)" map="B"/>
  <method class="ptolemy.gui.Top" name="boolean _queryForSave()" map="K"/>
  <method class="ptolemy.gui.Top" name="void pack()" map="pack"/>
  <method class="ptolemy.gui.Top" name="void report(java.lang.String, java.lang.Exception)" map="A"/>
  <method class="ptolemy.gui.Top" name="void _openURL()" map="L"/>
  <method class="ptolemy.gui.Top" name="void _open()" map="M"/>
  <method class="ptolemy.gui.Top" name="void setBackground(java.awt.Color)" map="setBackground"/>
  <method class="ptolemy.gui.Top" name="void _exit()" map="N"/>
  <method class="ptolemy.gui.Top" name="java.lang.String getLastOverallURL()" map="O"/>
  <method class="ptolemy.gui.Top" name="boolean _clear()" map="P"/>
  <class name="ptolemy.gui.MessageHandler" map="K"/>
  <field class="ptolemy.gui.MessageHandler" name="_handler" map="A"/>
  <method class="ptolemy.gui.MessageHandler" name="void _error(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.MessageHandler" name="void _message(java.lang.String)" map="B"/>
  <method class="ptolemy.gui.MessageHandler" name="void message(java.lang.String)" map="C"/>
  <method class="ptolemy.gui.MessageHandler" name="void error(java.lang.String, java.lang.Exception)" map="A"/>
  <method class="ptolemy.gui.MessageHandler" name="void error(java.lang.String)" map="D"/>
  <method class="ptolemy.gui.MessageHandler" name="void _warning(java.lang.String, java.lang.Exception)" map="B"/>
  <method class="ptolemy.gui.MessageHandler" name="void _error(java.lang.String, java.lang.Exception)" map="C"/>
  <method class="ptolemy.gui.MessageHandler" name="void warning(java.lang.String, java.lang.Exception)" map="D"/>
  <method class="ptolemy.gui.MessageHandler" name="void _warning(java.lang.String)" map="E"/>
  <method class="ptolemy.gui.MessageHandler" name="ptolemy.gui.MessageHandler getMessageHandler()" map="A"/>
  <method class="ptolemy.gui.MessageHandler" name="void warning(java.lang.String)" map="F"/>
  <method class="ptolemy.gui.MessageHandler" name="void setMessageHandler(ptolemy.gui.MessageHandler)" map="A"/>
  <class name="ptolemy.gui.GUIStringUtilities" map="L"/>
  <method class="ptolemy.gui.GUIStringUtilities" name="java.lang.String[] tokenizeForExec(java.lang.String)" map="A"/>
  <method class="ptolemy.gui.GUIStringUtilities" name="java.lang.String abbreviate(java.lang.String)" map="B"/>
  <method class="ptolemy.gui.GUIStringUtilities" name="java.lang.String split(java.lang.String)" map="C"/>
  <package name="ptolemy.plot" map="B"/>
  <package name="ptolemy.plot.compat" map="A"/>
  <class name="ptolemy.plot.compat.PxgraphParser" map="A"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_endian" map="A"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_debug" map="B"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_plot" map="C"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_NATIVE_ENDIAN" map="D"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_sawFirstDataset" map="E"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_connected" map="F"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_LITTLE_ENDIAN" map="G"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_currentdataset" map="H"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_firstInSet" map="I"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_binary" map="J"/>
  <field class="ptolemy.plot.compat.PxgraphParser" name="_BIG_ENDIAN" map="K"/>
  <method class="ptolemy.plot.compat.PxgraphParser" name="int parseArgs(java.lang.String[], java.net.URL)" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphParser" name="double[] _parseDoubles(java.lang.String)" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphParser" name="int parseArgs(java.lang.String[])" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphParser" name="boolean _addLegendIfNecessary(boolean)" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphParser" name="void read(java.io.InputStream)" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphParser" name="int parsePxgraphargs(java.lang.String, java.net.URL)" map="A"/>
  <class name="ptolemy.plot.compat.PxgraphApplication" map="B"/>
  <field class="ptolemy.plot.compat.PxgraphApplication" name="_parser" map="I"/>
  <method class="ptolemy.plot.compat.PxgraphApplication" name="void main(java.lang.String[])" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphApplication" name="java.lang.String _usage()" map="K"/>
  <method class="ptolemy.plot.compat.PxgraphApplication" name="void _about()" map="B"/>
  <method class="ptolemy.plot.compat.PxgraphApplication" name="void _read(java.net.URL, java.io.InputStream)" map="A"/>
  <method class="ptolemy.plot.compat.PxgraphApplication" name="int _parseArgs(java.lang.String[])" map="B"/>
  <package name="ptolemy.plot.plotml" map="B"/>
  <class name="ptolemy.plot.plotml.PlotBoxMLParser" map="A"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_xtick" map="A"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_externalEntities" map="B"/>
  <field class="ptolemy.plot.plotml.PlotBoxMLParser" name="_base" map="C"/>
  <class name="ptolemy.plot.plotml.EditablePlotMLApplication$SelectListener" map="_A"/>
  <field class="ptolemy.plot.plotml.EditablePlotMLApplication$SelectListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.plotml.EditablePlotMLApplication$SelectListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.plotml.EditablePlotMLApplication" map="B"/>
  <method class="ptolemy.plot.plotml.EditablePlotMLApplication" name="void main(java.lang.String[])" map="A"/>
  <method class="ptolemy.plot.plotml.EditablePlotMLApplication" name="void _selectDataset()" map="M"/>
  <method class="ptolemy.plot.plotml.EditablePlotMLApplication" name="void _about()" map="B"/>
  <method class="ptolemy.plot.plotml.EditablePlotMLApplication" name="void _help()" map="F"/>
  <class name="ptolemy.plot.plotml.PlotMLParser" map="C"/>
  <class name="ptolemy.plot.plotml.HistogramMLApplication" map="D"/>
  <method class="ptolemy.plot.plotml.HistogramMLApplication" name="void main(java.lang.String[])" map="A"/>
  <method class="ptolemy.plot.plotml.HistogramMLApplication" name="void _about()" map="B"/>
  <method class="ptolemy.plot.plotml.HistogramMLApplication" name="ptolemy.plot.plotml.PlotBoxMLParser _newParser()" map="L"/>
  <method class="ptolemy.plot.plotml.HistogramMLApplication" name="void _help()" map="F"/>
  <class name="ptolemy.plot.plotml.PlotMLFrame" map="E"/>
  <method class="ptolemy.plot.plotml.PlotMLFrame" name="void _about()" map="B"/>
  <method class="ptolemy.plot.plotml.PlotMLFrame" name="void _read(java.net.URL, java.io.InputStream)" map="A"/>
  <class name="ptolemy.plot.plotml.PlotMLApplication" map="F"/>
  <method class="ptolemy.plot.plotml.PlotMLApplication" name="void main(java.lang.String[])" map="A"/>
  <method class="ptolemy.plot.plotml.PlotMLApplication" name="void _about()" map="B"/>
  <method class="ptolemy.plot.plotml.PlotMLApplication" name="void _read(java.net.URL, java.io.InputStream)" map="A"/>
  <method class="ptolemy.plot.plotml.PlotMLApplication" name="ptolemy.plot.plotml.PlotBoxMLParser _newParser()" map="L"/>
  <method class="ptolemy.plot.plotml.PlotMLApplication" name="void _help()" map="F"/>
  <class name="ptolemy.plot.plotml.HistogramMLParser" map="G"/>
  <method class="ptolemy.plot.plotml.HistogramMLParser" name="void _addPoint(boolean, java.lang.String)" map="_addPoint"/>
  <method class="ptolemy.plot.plotml.HistogramMLParser" name="void endElement(java.lang.String)" map="endElement"/>
  <method class="ptolemy.plot.plotml.HistogramMLParser" name="void startElement(java.lang.String)" map="startElement"/>
  <class name="ptolemy.plot.EditListener" map="A"/>
  <method class="ptolemy.plot.EditListener" name="void editDataModified(ptolemy.plot.EditablePlot, int)" map="A"/>
  <class name="ptolemy.plot.PlotBox$1" map="1"/>
  <field class="ptolemy.plot.PlotBox$1" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotBox$1" name="void run()" map="run"/>
  <class name="ptolemy.plot.PlotBox$ButtonListener" map="_A"/>
  <field class="ptolemy.plot.PlotBox$ButtonListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotBox$ButtonListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.PlotBox$DragListener" map="_B"/>
  <field class="ptolemy.plot.PlotBox$DragListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotBox$DragListener" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="ptolemy.plot.PlotBox$DragListener" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <class name="ptolemy.plot.PlotBox$ZoomListener" map="_C"/>
  <field class="ptolemy.plot.PlotBox$ZoomListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotBox$ZoomListener" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="ptolemy.plot.PlotBox$ZoomListener" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="ptolemy.plot.PlotBox$ZoomListener" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="ptolemy.plot.PlotBox$ZoomListener" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="ptolemy.plot.PlotBox$ZoomListener" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="ptolemy.plot.PlotBox$CommandListener" map="_D"/>
  <field class="ptolemy.plot.PlotBox$CommandListener" name="this$0" map="A"/>
  <field class="ptolemy.plot.PlotBox$CommandListener" name="_control" map="B"/>
  <field class="ptolemy.plot.PlotBox$CommandListener" name="_shift" map="C"/>
  <method class="ptolemy.plot.PlotBox$CommandListener" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="ptolemy.plot.PlotBox$CommandListener" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="ptolemy.plot.PlotBox$CommandListener" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="ptolemy.plot.PlotBox" map="B"/>
  <field class="ptolemy.plot.PlotBox" name="_originalXlow" map="A"/>
  <field class="ptolemy.plot.PlotBox" name="_originalYlow" map="B"/>
  <field class="ptolemy.plot.PlotBox" name="_originalXRangeGiven" map="C"/>
  <field class="ptolemy.plot.PlotBox" name="_originalYhigh" map="D"/>
  <field class="ptolemy.plot.PlotBox" name="_originalYRangeGiven" map="E"/>
  <field class="ptolemy.plot.PlotBox" name="_originalXhigh" map="F"/>
  <method class="ptolemy.plot.PlotBox" name="void _peakStart(int, int)" map="A"/>
  <method class="ptolemy.plot.PlotBox" name="void _panLine(int, int)" map="B"/>
  <method class="ptolemy.plot.PlotBox" name="void _zoom(int, int)" map="_zoom"/>
  <method class="ptolemy.plot.PlotBox" name="void _panStart(int, int)" map="C"/>
  <method class="ptolemy.plot.PlotBox" name="void _pan(int, int)" map="D"/>
  <method class="ptolemy.plot.PlotBox" name="void _zoomStart(int, int)" map="E"/>
  <method class="ptolemy.plot.PlotBox" name="void _zoomBox(int, int)" map="F"/>
  <class name="ptolemy.plot.EPSGraphics" map="C"/>
  <field class="ptolemy.plot.EPSGraphics" name="_linepattern" map="A"/>
  <field class="ptolemy.plot.EPSGraphics" name="_patterns" map="B"/>
  <field class="ptolemy.plot.EPSGraphics" name="_width" map="C"/>
  <field class="ptolemy.plot.EPSGraphics" name="_patternIndex" map="D"/>
  <field class="ptolemy.plot.EPSGraphics" name="_clipboard" map="E"/>
  <field class="ptolemy.plot.EPSGraphics" name="_height" map="F"/>
  <field class="ptolemy.plot.EPSGraphics" name="_currentColor" map="G"/>
  <field class="ptolemy.plot.EPSGraphics" name="_out" map="H"/>
  <field class="ptolemy.plot.EPSGraphics" name="_buffer" map="I"/>
  <field class="ptolemy.plot.EPSGraphics" name="_currentFont" map="J"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)" map="drawImage"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.Color getColor()" map="getColor"/>
  <method class="ptolemy.plot.EPSGraphics" name="void showpage()" map="A"/>
  <method class="ptolemy.plot.EPSGraphics" name="void dispose()" map="dispose"/>
  <method class="ptolemy.plot.EPSGraphics" name="void setColor(java.awt.Color)" map="setColor"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawLine(int, int, int, int)" map="drawLine"/>
  <method class="ptolemy.plot.EPSGraphics" name="void setPaintMode()" map="setPaintMode"/>
  <method class="ptolemy.plot.EPSGraphics" name="void setFont(java.awt.Font)" map="setFont"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawArc(int, int, int, int, int, int)" map="drawArc"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawOval(int, int, int, int)" map="drawOval"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawRoundRect(int, int, int, int, int, int)" map="drawRoundRect"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawString(java.text.AttributedCharacterIterator, int, int)" map="drawString"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)" map="drawImage"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.FontMetrics getFontMetrics(java.awt.Font)" map="getFontMetrics"/>
  <method class="ptolemy.plot.EPSGraphics" name="void clipRect(int, int, int, int)" map="clipRect"/>
  <method class="ptolemy.plot.EPSGraphics" name="void clearRect(int, int, int, int)" map="clearRect"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawString(java.lang.String, int, int)" map="drawString"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)" map="drawImage"/>
  <method class="ptolemy.plot.EPSGraphics" name="void setXORMode(java.awt.Color)" map="setXORMode"/>
  <method class="ptolemy.plot.EPSGraphics" name="void setClip(int, int, int, int)" map="setClip"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.Font getFont()" map="getFont"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)" map="drawImage"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawRect(int, int, int, int)" map="drawRect"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawPolygon(int[], int[], int)" map="drawPolygon"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.Shape getClip()" map="getClip"/>
  <method class="ptolemy.plot.EPSGraphics" name="void copyArea(int, int, int, int, int, int)" map="copyArea"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.Graphics create()" map="create"/>
  <method class="ptolemy.plot.EPSGraphics" name="void drawPolyline(int[], int[], int)" map="drawPolyline"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)" map="drawImage"/>
  <method class="ptolemy.plot.EPSGraphics" name="void fillOval(int, int, int, int)" map="fillOval"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver)" map="drawImage"/>
  <method class="ptolemy.plot.EPSGraphics" name="void fillPolygon(int[], int[], int)" map="fillPolygon"/>
  <method class="ptolemy.plot.EPSGraphics" name="boolean _polygon(int[], int[], int)" map="A"/>
  <method class="ptolemy.plot.EPSGraphics" name="void fillRoundRect(int, int, int, int, int, int)" map="fillRoundRect"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.Rectangle getClipBounds()" map="getClipBounds"/>
  <method class="ptolemy.plot.EPSGraphics" name="void _fillPattern()" map="B"/>
  <method class="ptolemy.plot.EPSGraphics" name="java.awt.Point _convert(int, int)" map="A"/>
  <method class="ptolemy.plot.EPSGraphics" name="void fillRect(int, int, int, int)" map="fillRect"/>
  <method class="ptolemy.plot.EPSGraphics" name="void fillArc(int, int, int, int, int, int)" map="fillArc"/>
  <method class="ptolemy.plot.EPSGraphics" name="void setClip(java.awt.Shape)" map="setClip"/>
  <method class="ptolemy.plot.EPSGraphics" name="void translate(int, int)" map="translate"/>
  <class name="ptolemy.plot.EditablePlot$EditMouseListener" map="_A"/>
  <field class="ptolemy.plot.EditablePlot$EditMouseListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.EditablePlot$EditMouseListener" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="ptolemy.plot.EditablePlot$EditMouseListener" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="ptolemy.plot.EditablePlot$EditMouseListener" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="ptolemy.plot.EditablePlot$EditMouseListener" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="ptolemy.plot.EditablePlot$EditMouseListener" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="ptolemy.plot.EditablePlot$UndoListener" map="_B"/>
  <field class="ptolemy.plot.EditablePlot$UndoListener" name="this$0" map="A"/>
  <field class="ptolemy.plot.EditablePlot$UndoListener" name="_control" map="B"/>
  <method class="ptolemy.plot.EditablePlot$UndoListener" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="ptolemy.plot.EditablePlot$UndoListener" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="ptolemy.plot.EditablePlot$UndoListener" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="ptolemy.plot.EditablePlot$ModifyListener" map="_C"/>
  <field class="ptolemy.plot.EditablePlot$ModifyListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.EditablePlot$ModifyListener" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="ptolemy.plot.EditablePlot$ModifyListener" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <class name="ptolemy.plot.EditablePlot" map="D"/>
  <field class="ptolemy.plot.EditablePlot" name="_redoStack" map="p"/>
  <field class="ptolemy.plot.EditablePlot" name="_dataset" map="q"/>
  <field class="ptolemy.plot.EditablePlot" name="_editColor" map="r"/>
  <field class="ptolemy.plot.EditablePlot" name="_editSpecY" map="s"/>
  <field class="ptolemy.plot.EditablePlot" name="_editSpecX" map="t"/>
  <field class="ptolemy.plot.EditablePlot" name="_undoStack" map="u"/>
  <field class="ptolemy.plot.EditablePlot" name="_editListeners" map="v"/>
  <field class="ptolemy.plot.EditablePlot" name="_currentEditY" map="w"/>
  <field class="ptolemy.plot.EditablePlot" name="_currentEditX" map="z"/>
  <field class="ptolemy.plot.EditablePlot" name="_editSpecSet" map="&#x00a2;"/>
  <method class="ptolemy.plot.EditablePlot" name="void access$000(ptolemy.plot.EditablePlot, int, int)" map="A"/>
  <method class="ptolemy.plot.EditablePlot" name="void _editPoint(int, int)" map="K"/>
  <method class="ptolemy.plot.EditablePlot" name="void setEditable(int)" map="C"/>
  <method class="ptolemy.plot.EditablePlot" name="void undo()" map="H"/>
  <method class="ptolemy.plot.EditablePlot" name="void access$200(ptolemy.plot.EditablePlot, int, int)" map="B"/>
  <method class="ptolemy.plot.EditablePlot" name="void _setData(int, double[][])" map="A"/>
  <method class="ptolemy.plot.EditablePlot" name="void _editStart(int, int)" map="L"/>
  <method class="ptolemy.plot.EditablePlot" name="void removeEditListener(ptolemy.plot.EditListener)" map="A"/>
  <method class="ptolemy.plot.EditablePlot" name="void access$100(ptolemy.plot.EditablePlot, int, int)" map="C"/>
  <method class="ptolemy.plot.EditablePlot" name="double[][] getData(int)" map="D"/>
  <method class="ptolemy.plot.EditablePlot" name="void _edit(int, int)" map="M"/>
  <method class="ptolemy.plot.EditablePlot" name="void _notifyListeners(int)" map="E"/>
  <method class="ptolemy.plot.EditablePlot" name="void addEditListener(ptolemy.plot.EditListener)" map="B"/>
  <method class="ptolemy.plot.EditablePlot" name="void redo()" map="I"/>
  <class name="ptolemy.plot.PlotDataException" map="E"/>
  <class name="ptolemy.plot.CmdLineArgException" map="F"/>
  <class name="ptolemy.plot.Render$1" map="1"/>
  <field class="ptolemy.plot.Render$1" name="this$0" map="A"/>
  <method class="ptolemy.plot.Render$1" name="void run()" map="run"/>
  <class name="ptolemy.plot.Render" map="G"/>
  <field class="ptolemy.plot.Render" name="_yOffset" map="G"/>
  <field class="ptolemy.plot.Render" name="_colormap" map="H"/>
  <field class="ptolemy.plot.Render" name="_xIncrement" map="I"/>
  <field class="ptolemy.plot.Render" name="_xOffset" map="J"/>
  <field class="ptolemy.plot.Render" name="_yIncrement" map="K"/>
  <field class="ptolemy.plot.Render" name="_showing" map="L"/>
  <field class="ptolemy.plot.Render" name="_HIGHCOLOR" map="M"/>
  <field class="ptolemy.plot.Render" name="_NOTVISIBLE" map="N"/>
  <field class="ptolemy.plot.Render" name="_imageData" map="O"/>
  <field class="ptolemy.plot.Render" name="_LOWCOLOR" map="P"/>
  <method class="ptolemy.plot.Render" name="double getXOffset()" map="A"/>
  <method class="ptolemy.plot.Render" name="void setXIncrement(double)" map="A"/>
  <method class="ptolemy.plot.Render" name="void _drawStripe(java.awt.Graphics, int[], double, double)" map="A"/>
  <method class="ptolemy.plot.Render" name="void samplePlot()" map="samplePlot"/>
  <method class="ptolemy.plot.Render" name="void addStripe(int[])" map="A"/>
  <method class="ptolemy.plot.Render" name="void setColormap(int[][])" map="A"/>
  <method class="ptolemy.plot.Render" name="double getXIncrement()" map="B"/>
  <method class="ptolemy.plot.Render" name="int[] _clipYHeight(int, int)" map="G"/>
  <method class="ptolemy.plot.Render" name="int[][] getColormap()" map="C"/>
  <method class="ptolemy.plot.Render" name="double getYOffset()" map="D"/>
  <method class="ptolemy.plot.Render" name="void _drawPlot(java.awt.Graphics, boolean)" map="_drawPlot"/>
  <method class="ptolemy.plot.Render" name="double getYIncrement()" map="E"/>
  <method class="ptolemy.plot.Render" name="void setXOffset(double)" map="B"/>
  <method class="ptolemy.plot.Render" name="int[] _clipXWidth(int, int)" map="H"/>
  <method class="ptolemy.plot.Render" name="void setYIncrement(double)" map="C"/>
  <method class="ptolemy.plot.Render" name="void setYOffset(double)" map="D"/>
  <method class="ptolemy.plot.Render" name="void clearData()" map="F"/>
  <method class="ptolemy.plot.Render" name="void _drawPatch(java.awt.Graphics, int, int, int, int, int)" map="A"/>
  <class name="ptolemy.plot.PlotApplication$2" map="2"/>
  <field class="ptolemy.plot.PlotApplication$2" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotApplication$2" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="ptolemy.plot.PlotApplication$1" map="1"/>
  <field class="ptolemy.plot.PlotApplication$1" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotApplication$1" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="ptolemy.plot.PlotApplication" map="H"/>
  <field class="ptolemy.plot.PlotApplication" name="_test" map="H"/>
  <method class="ptolemy.plot.PlotApplication" name="void main(java.lang.String[])" map="A"/>
  <method class="ptolemy.plot.PlotApplication" name="java.lang.String _usage()" map="K"/>
  <method class="ptolemy.plot.PlotApplication" name="void _about()" map="B"/>
  <method class="ptolemy.plot.PlotApplication" name="void _close()" map="D"/>
  <method class="ptolemy.plot.PlotApplication" name="int _parseArgs(java.lang.String[])" map="B"/>
  <method class="ptolemy.plot.PlotApplication" name="void _help()" map="F"/>
  <class name="ptolemy.plot.PlotPoint" map="I"/>
  <field class="ptolemy.plot.PlotPoint" name="x" map="A"/>
  <field class="ptolemy.plot.PlotPoint" name="errorBar" map="B"/>
  <field class="ptolemy.plot.PlotPoint" name="yHighEB" map="C"/>
  <field class="ptolemy.plot.PlotPoint" name="yLowEB" map="D"/>
  <field class="ptolemy.plot.PlotPoint" name="originalx" map="E"/>
  <field class="ptolemy.plot.PlotPoint" name="connected" map="F"/>
  <field class="ptolemy.plot.PlotPoint" name="y" map="G"/>
  <class name="ptolemy.plot.PlotFormatter$2" map="2"/>
  <field class="ptolemy.plot.PlotFormatter$2" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotFormatter$2" name="void changed(java.lang.String)" map="A"/>
  <class name="ptolemy.plot.PlotFormatter$1" map="1"/>
  <field class="ptolemy.plot.PlotFormatter$1" name="this$0" map="B"/>
  <method class="ptolemy.plot.PlotFormatter$1" name="void changed(java.lang.String)" map="A"/>
  <class name="ptolemy.plot.PlotFormatter" map="J"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalXLabel" map="A"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalYTicksSpec" map="B"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalYLabel" map="C"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalXRange" map="D"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalGrid" map="E"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalYRange" map="F"/>
  <field class="ptolemy.plot.PlotFormatter" name="_plot" map="G"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalPoints" map="H"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalConnected" map="I"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalXTicks" map="J"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalColor" map="K"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalXTicksSpec" map="L"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalMarks" map="M"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalStems" map="N"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalYTicks" map="O"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalXLog" map="P"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalYLog" map="Q"/>
  <field class="ptolemy.plot.PlotFormatter" name="_wideQuery" map="R"/>
  <field class="ptolemy.plot.PlotFormatter" name="_originalTitle" map="S"/>
  <field class="ptolemy.plot.PlotFormatter" name="_narrowQuery" map="T"/>
  <method class="ptolemy.plot.PlotFormatter" name="void access$200(ptolemy.plot.PlotFormatter, boolean)" map="A"/>
  <method class="ptolemy.plot.PlotFormatter" name="void openModal()" map="A"/>
  <method class="ptolemy.plot.PlotFormatter" name="ptolemy.gui.Query access$000(ptolemy.plot.PlotFormatter)" map="A"/>
  <method class="ptolemy.plot.PlotFormatter" name="void _restoreConnected()" map="B"/>
  <method class="ptolemy.plot.PlotFormatter" name="void restore()" map="C"/>
  <method class="ptolemy.plot.PlotFormatter" name="void apply()" map="D"/>
  <method class="ptolemy.plot.PlotFormatter" name="ptolemy.gui.Query access$100(ptolemy.plot.PlotFormatter)" map="B"/>
  <method class="ptolemy.plot.PlotFormatter" name="void _setConnected(boolean)" map="A"/>
  <method class="ptolemy.plot.PlotFormatter" name="void _saveConnected()" map="E"/>
  <class name="ptolemy.plot.PlotLive$StopButtonListener" map="_A"/>
  <field class="ptolemy.plot.PlotLive$StopButtonListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotLive$StopButtonListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.PlotLive$StartButtonListener" map="_B"/>
  <field class="ptolemy.plot.PlotLive$StartButtonListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotLive$StartButtonListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.PlotLive" map="K"/>
  <field class="ptolemy.plot.PlotLive" name="_startButton" map="&#x00a3;"/>
  <field class="ptolemy.plot.PlotLive" name="_stopButton" map="&#x00a4;"/>
  <field class="ptolemy.plot.PlotLive" name="_plotting" map="&#x00a5;"/>
  <field class="ptolemy.plot.PlotLive" name="_paused" map="&#x00aa;"/>
  <field class="ptolemy.plot.PlotLive" name="_plotLiveThread" map="&#x00b5;"/>
  <method class="ptolemy.plot.PlotLive" name="void setButtons(boolean)" map="setButtons"/>
  <method class="ptolemy.plot.PlotLive" name="void stop()" map="J"/>
  <method class="ptolemy.plot.PlotLive" name="void addPoints()" map="K"/>
  <method class="ptolemy.plot.PlotLive" name="void makeButtons()" map="L"/>
  <method class="ptolemy.plot.PlotLive" name="void run()" map="run"/>
  <method class="ptolemy.plot.PlotLive" name="void start()" map="M"/>
  <method class="ptolemy.plot.PlotLive" name="void pause()" map="N"/>
  <class name="ptolemy.plot.PlotFrame$FormatListener" map="_A"/>
  <field class="ptolemy.plot.PlotFrame$FormatListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotFrame$FormatListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.PlotFrame$EPSFileFilter" map="_B"/>
  <field class="ptolemy.plot.PlotFrame$EPSFileFilter" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotFrame$EPSFileFilter" name="boolean accept(java.io.File)" map="accept"/>
  <method class="ptolemy.plot.PlotFrame$EPSFileFilter" name="java.lang.String getDescription()" map="getDescription"/>
  <class name="ptolemy.plot.PlotFrame$FileMenuListener" map="_C"/>
  <field class="ptolemy.plot.PlotFrame$FileMenuListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotFrame$FileMenuListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.PlotFrame$PLTOrXMLFileFilter" map="_D"/>
  <field class="ptolemy.plot.PlotFrame$PLTOrXMLFileFilter" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotFrame$PLTOrXMLFileFilter" name="boolean accept(java.io.File)" map="accept"/>
  <method class="ptolemy.plot.PlotFrame$PLTOrXMLFileFilter" name="java.lang.String getDescription()" map="getDescription"/>
  <class name="ptolemy.plot.PlotFrame$SpecialMenuListener" map="_E"/>
  <field class="ptolemy.plot.PlotFrame$SpecialMenuListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.PlotFrame$SpecialMenuListener" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="ptolemy.plot.PlotFrame" map="L"/>
  <field class="ptolemy.plot.PlotFrame" name="_directory" map="A"/>
  <field class="ptolemy.plot.PlotFrame" name="_file" map="B"/>
  <field class="ptolemy.plot.PlotFrame" name="_menubar" map="C"/>
  <field class="ptolemy.plot.PlotFrame" name="_fileMenu" map="D"/>
  <field class="ptolemy.plot.PlotFrame" name="_editMenu" map="E"/>
  <field class="ptolemy.plot.PlotFrame" name="plot" map="F"/>
  <field class="ptolemy.plot.PlotFrame" name="_specialMenu" map="G"/>
  <method class="ptolemy.plot.PlotFrame" name="void _save()" map="A"/>
  <method class="ptolemy.plot.PlotFrame" name="void _about()" map="B"/>
  <method class="ptolemy.plot.PlotFrame" name="void samplePlot()" map="C"/>
  <method class="ptolemy.plot.PlotFrame" name="void _close()" map="D"/>
  <method class="ptolemy.plot.PlotFrame" name="void _saveAs()" map="E"/>
  <method class="ptolemy.plot.PlotFrame" name="void _help()" map="F"/>
  <method class="ptolemy.plot.PlotFrame" name="void _export()" map="G"/>
  <method class="ptolemy.plot.PlotFrame" name="void _read(java.net.URL, java.io.InputStream)" map="A"/>
  <method class="ptolemy.plot.PlotFrame" name="void _editFormat()" map="H"/>
  <method class="ptolemy.plot.PlotFrame" name="void _open()" map="I"/>
  <method class="ptolemy.plot.PlotFrame" name="void _print()" map="J"/>
  <class name="ptolemy.plot.Plot$7" map="7"/>
  <field class="ptolemy.plot.Plot$7" name="this$0" map="A"/>
  <method class="ptolemy.plot.Plot$7" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <class name="ptolemy.plot.Plot$6" map="6"/>
  <field class="ptolemy.plot.Plot$6" name="this$0" map="A"/>
  <method class="ptolemy.plot.Plot$6" name="void run()" map="run"/>
  <class name="ptolemy.plot.Plot$DragListener" map="_A"/>
  <field class="ptolemy.plot.Plot$DragListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.Plot$DragListener" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="ptolemy.plot.Plot$DragListener" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <class name="ptolemy.plot.Plot$5" map="5"/>
  <field class="ptolemy.plot.Plot$5" name="this$0" map="A"/>
  <field class="ptolemy.plot.Plot$5" name="val$index" map="B"/>
  <field class="ptolemy.plot.Plot$5" name="val$dataset" map="C"/>
  <method class="ptolemy.plot.Plot$5" name="void run()" map="run"/>
  <class name="ptolemy.plot.Plot$4" map="4"/>
  <field class="ptolemy.plot.Plot$4" name="this$0" map="A"/>
  <field class="ptolemy.plot.Plot$4" name="val$dataset" map="B"/>
  <method class="ptolemy.plot.Plot$4" name="void run()" map="run"/>
  <class name="ptolemy.plot.Plot$3" map="3"/>
  <field class="ptolemy.plot.Plot$3" name="this$0" map="A"/>
  <field class="ptolemy.plot.Plot$3" name="val$format" map="B"/>
  <method class="ptolemy.plot.Plot$3" name="void run()" map="run"/>
  <class name="ptolemy.plot.Plot$Format" map="_B"/>
  <field class="ptolemy.plot.Plot$Format" name="this$0" map="A"/>
  <field class="ptolemy.plot.Plot$Format" name="connectedUseDefault" map="B"/>
  <field class="ptolemy.plot.Plot$Format" name="marks" map="C"/>
  <field class="ptolemy.plot.Plot$Format" name="connected" map="D"/>
  <field class="ptolemy.plot.Plot$Format" name="marksUseDefault" map="E"/>
  <field class="ptolemy.plot.Plot$Format" name="impulses" map="F"/>
  <field class="ptolemy.plot.Plot$Format" name="impulsesUseDefault" map="G"/>
  <class name="ptolemy.plot.Plot$2" map="2"/>
  <field class="ptolemy.plot.Plot$2" name="this$0" map="A"/>
  <field class="ptolemy.plot.Plot$2" name="val$y" map="B"/>
  <field class="ptolemy.plot.Plot$2" name="val$x" map="C"/>
  <field class="ptolemy.plot.Plot$2" name="val$connected" map="D"/>
  <field class="ptolemy.plot.Plot$2" name="val$yHighEB" map="E"/>
  <field class="ptolemy.plot.Plot$2" name="val$dataset" map="F"/>
  <field class="ptolemy.plot.Plot$2" name="val$yLowEB" map="G"/>
  <method class="ptolemy.plot.Plot$2" name="void run()" map="run"/>
  <class name="ptolemy.plot.Plot$1" map="1"/>
  <field class="ptolemy.plot.Plot$1" name="this$0" map="A"/>
  <field class="ptolemy.plot.Plot$1" name="val$y" map="B"/>
  <field class="ptolemy.plot.Plot$1" name="val$x" map="C"/>
  <field class="ptolemy.plot.Plot$1" name="val$connected" map="D"/>
  <field class="ptolemy.plot.Plot$1" name="val$dataset" map="E"/>
  <method class="ptolemy.plot.Plot$1" name="void run()" map="run"/>
  <class name="ptolemy.plot.Plot$MousePressListener" map="_C"/>
  <field class="ptolemy.plot.Plot$MousePressListener" name="this$0" map="A"/>
  <method class="ptolemy.plot.Plot$MousePressListener" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="ptolemy.plot.Plot$MousePressListener" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="ptolemy.plot.Plot$MousePressListener" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="ptolemy.plot.Plot$MousePressListener" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="ptolemy.plot.Plot$MousePressListener" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="ptolemy.plot.Plot" map="M"/>
  <field class="ptolemy.plot.Plot" name="testStr" map="Q"/>
  <field class="ptolemy.plot.Plot" name="_MAX_MARKS" map="R"/>
  <field class="ptolemy.plot.Plot" name="_firstInSet" map="S"/>
  <field class="ptolemy.plot.Plot" name="_prevy" map="T"/>
  <field class="ptolemy.plot.Plot" name="_prevx" map="U"/>
  <field class="ptolemy.plot.Plot" name="_bars" map="V"/>
  <field class="ptolemy.plot.Plot" name="_ERRORBAR_LEG_LENGTH" map="W"/>
  <field class="ptolemy.plot.Plot" name="_xyInvalid" map="X"/>
  <field class="ptolemy.plot.Plot" name="grayOutList" map="Y"/>
  <field class="ptolemy.plot.Plot" name="_xPersistence" map="Z"/>
  <field class="ptolemy.plot.Plot" name="polygon" map="_"/>
  <field class="ptolemy.plot.Plot" name="prevHighlight" map="a"/>
  <field class="ptolemy.plot.Plot" name="_maxDataset" map="b"/>
  <field class="ptolemy.plot.Plot" name="barWidth" map="c"/>
  <field class="ptolemy.plot.Plot" name="_radius" map="d"/>
  <field class="ptolemy.plot.Plot" name="_sawFirstDataSet" map="e"/>
  <field class="ptolemy.plot.Plot" name="_diameter" map="f"/>
  <field class="ptolemy.plot.Plot" name="_reuseDatasets" map="g"/>
  <field class="ptolemy.plot.Plot" name="_impulses" map="h"/>
  <field class="ptolemy.plot.Plot" name="_formats" map="i"/>
  <field class="ptolemy.plot.Plot" name="_connected" map="j"/>
  <field class="ptolemy.plot.Plot" name="isIn" map="k"/>
  <field class="ptolemy.plot.Plot" name="_barOffset" map="l"/>
  <field class="ptolemy.plot.Plot" name="_filename" map="m"/>
  <field class="ptolemy.plot.Plot" name="_pointsPersistence" map="n"/>
  <field class="ptolemy.plot.Plot" name="wasIn" map="o"/>
  <method class="ptolemy.plot.Plot" name="void access$100(ptolemy.plot.Plot, boolean)" map="A"/>
  <method class="ptolemy.plot.Plot" name="javax.swing.JPanel getLegendPanel(java.util.Vector)" map="A"/>
  <method class="ptolemy.plot.Plot" name="void access$400(ptolemy.plot.Plot)" map="A"/>
  <method class="ptolemy.plot.Plot" name="void _clear(int)" map="A"/>
  <method class="ptolemy.plot.Plot" name="void _clear(boolean)" map="A"/>
  <method class="ptolemy.plot.Plot" name="void drawTooltip(int, int)" map="I"/>
  <method class="ptolemy.plot.Plot" name="void _fillPlot()" map="G"/>
  <method class="ptolemy.plot.Plot" name="void _addPoint(int, double, double, double, double, boolean, boolean)" map="A"/>
  <method class="ptolemy.plot.Plot" name="boolean _isConnected(int)" map="B"/>
  <method class="ptolemy.plot.Plot" name="void _pan(int, int)" map="D"/>
  <method class="ptolemy.plot.Plot" name="void access$300(ptolemy.plot.Plot, int, int)" map="A"/>
  <method class="ptolemy.plot.Plot" name="void drawHighlight(java.awt.Graphics2D, java.util.Vector)" map="A"/>
  <method class="ptolemy.plot.Plot" name="void access$200(ptolemy.plot.Plot, int)" map="A"/>
  <method class="ptolemy.plot.Plot" name="boolean _addLegendIfNecessary(boolean)" map="B"/>
  <method class="ptolemy.plot.Plot" name="void _erasePoint(int, int)" map="J"/>
  <method class="ptolemy.plot.Plot" name="void access$000(ptolemy.plot.Plot, int, double, double, double, double, boolean, boolean)" map="A"/>
  <class name="ptolemy.plot.Histogram$3" map="3"/>
  <field class="ptolemy.plot.Histogram$3" name="this$0" map="A"/>
  <method class="ptolemy.plot.Histogram$3" name="void run()" map="run"/>
  <class name="ptolemy.plot.Histogram$2" map="2"/>
  <field class="ptolemy.plot.Histogram$2" name="this$0" map="A"/>
  <field class="ptolemy.plot.Histogram$2" name="val$format" map="B"/>
  <method class="ptolemy.plot.Histogram$2" name="void run()" map="run"/>
  <class name="ptolemy.plot.Histogram$1" map="1"/>
  <field class="ptolemy.plot.Histogram$1" name="this$0" map="A"/>
  <field class="ptolemy.plot.Histogram$1" name="val$value" map="B"/>
  <field class="ptolemy.plot.Histogram$1" name="val$dataset" map="C"/>
  <method class="ptolemy.plot.Histogram$1" name="void run()" map="run"/>
  <class name="ptolemy.plot.Histogram" map="N"/>
  <field class="ptolemy.plot.Histogram" name="_histogram" map="&#x00d3;"/>
  <field class="ptolemy.plot.Histogram" name="_binWidth" map="&#x00d4;"/>
  <field class="ptolemy.plot.Histogram" name="_filename" map="&#x00d5;"/>
  <field class="ptolemy.plot.Histogram" name="_barwidth" map="&#x00d6;"/>
  <field class="ptolemy.plot.Histogram" name="_points" map="&#x00d8;"/>
  <field class="ptolemy.plot.Histogram" name="_baroffset" map="&#x00d9;"/>
  <field class="ptolemy.plot.Histogram" name="_showing" map="&#x00da;"/>
  <field class="ptolemy.plot.Histogram" name="_currentdataset" map="&#x00db;"/>
  <field class="ptolemy.plot.Histogram" name="_binOffset" map="&#x00dc;"/>
  <method class="ptolemy.plot.Histogram" name="void fillPlot()" map="fillPlot"/>
  <method class="ptolemy.plot.Histogram" name="void _checkDatasetIndex(int)" map="F"/>
  <method class="ptolemy.plot.Histogram" name="void access$000(ptolemy.plot.Histogram, int, double)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void addLegend(int, java.lang.String)" map="addLegend"/>
  <method class="ptolemy.plot.Histogram" name="void access$200(ptolemy.plot.Histogram)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void samplePlot()" map="samplePlot"/>
  <method class="ptolemy.plot.Histogram" name="void _addPoint(int, double)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void access$100(ptolemy.plot.Histogram, boolean)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void _drawPlot(java.awt.Graphics, boolean)" map="_drawPlot"/>
  <method class="ptolemy.plot.Histogram" name="boolean _parseLine(java.lang.String)" map="_parseLine"/>
  <method class="ptolemy.plot.Histogram" name="void writeData(java.io.PrintWriter)" map="writeData"/>
  <method class="ptolemy.plot.Histogram" name="void writeFormat(java.io.PrintWriter)" map="writeFormat"/>
  <method class="ptolemy.plot.Histogram" name="void clear(boolean)" map="clear"/>
  <method class="ptolemy.plot.Histogram" name="void setBars(double, double)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void setBinWidth(double)" map="E"/>
  <method class="ptolemy.plot.Histogram" name="void _drawBar(java.awt.Graphics, int, long, long, boolean)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void setBinOffset(double)" map="F"/>
  <method class="ptolemy.plot.Histogram" name="void addPoint(int, double)" map="B"/>
  <method class="ptolemy.plot.Histogram" name="void addPoint(int, double, double, boolean)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void _drawPlotPoint(java.awt.Graphics, int, int, int)" map="A"/>
  <method class="ptolemy.plot.Histogram" name="void _fillPlot()" map="P"/>
  <method class="ptolemy.plot.Histogram" name="void _clear(boolean)" map="C"/>
  <package name="libsvm" map="D"/>
  <class name="libsvm.Solver_NU" map="A"/>
  <field class="libsvm.Solver_NU" name="si" map="T"/>
  <method class="libsvm.Solver_NU" name="double calculate_rho()" map="A"/>
  <method class="libsvm.Solver_NU" name="void do_shrinking()" map="C"/>
  <method class="libsvm.Solver_NU" name="boolean be_shrunken(int, double, double, double, double)" map="A"/>
  <method class="libsvm.Solver_NU" name="void Solve(int, libsvm.QMatrix, double[], byte[], double[], double, double, double, libsvm.Solver$SolutionInfo, int)" map="A"/>
  <method class="libsvm.Solver_NU" name="int select_working_set(int[])" map="A"/>
  <class name="libsvm.svm$decision_function" map="_A"/>
  <field class="libsvm.svm$decision_function" name="rho" map="A"/>
  <field class="libsvm.svm$decision_function" name="alpha" map="B"/>
  <class name="libsvm.svm" map="B"/>
  <field class="libsvm.svm" name="svm_type_table" map="A"/>
  <field class="libsvm.svm" name="kernel_type_table" map="B"/>
  <method class="libsvm.svm" name="void svm_get_labels(libsvm.svm_model, int[])" map="A"/>
  <method class="libsvm.svm" name="double sigmoid_predict(double, double, double)" map="A"/>
  <method class="libsvm.svm" name="double svm_predict_probability(libsvm.svm_model, libsvm.svm_node[], double[])" map="A"/>
  <method class="libsvm.svm" name="void svm_predict_values(libsvm.svm_model, libsvm.svm_node[], double[])" map="B"/>
  <method class="libsvm.svm" name="java.lang.String svm_check_parameter(libsvm.svm_problem, libsvm.svm_parameter)" map="A"/>
  <method class="libsvm.svm" name="void solve_nu_svr(libsvm.svm_problem, libsvm.svm_parameter, double[], libsvm.Solver$SolutionInfo)" map="A"/>
  <method class="libsvm.svm" name="libsvm.svm_model svm_train(libsvm.svm_problem, libsvm.svm_parameter)" map="B"/>
  <method class="libsvm.svm" name="libsvm.svm_model svm_load_model(java.lang.String)" map="A"/>
  <method class="libsvm.svm" name="int svm_get_nr_class(libsvm.svm_model)" map="A"/>
  <method class="libsvm.svm" name="int atoi(java.lang.String)" map="B"/>
  <method class="libsvm.svm" name="void svm_group_classes(libsvm.svm_problem, int[], int[][], int[][], int[][], int[])" map="A"/>
  <method class="libsvm.svm" name="void solve_c_svc(libsvm.svm_problem, libsvm.svm_parameter, double[], libsvm.Solver$SolutionInfo, double, double)" map="A"/>
  <method class="libsvm.svm" name="double atof(java.lang.String)" map="C"/>
  <method class="libsvm.svm" name="void svm_binary_svc_probability(libsvm.svm_problem, libsvm.svm_parameter, double, double, double[])" map="A"/>
  <method class="libsvm.svm" name="void svm_save_model(java.lang.String, libsvm.svm_model)" map="A"/>
  <method class="libsvm.svm" name="void svm_cross_validation(libsvm.svm_problem, libsvm.svm_parameter, int, double[])" map="A"/>
  <method class="libsvm.svm" name="double svm_svr_probability(libsvm.svm_problem, libsvm.svm_parameter)" map="C"/>
  <method class="libsvm.svm" name="libsvm.svm$decision_function svm_train_one(libsvm.svm_problem, libsvm.svm_parameter, double, double)" map="A"/>
  <method class="libsvm.svm" name="int svm_check_probability_model(libsvm.svm_model)" map="B"/>
  <method class="libsvm.svm" name="double svm_predict(libsvm.svm_model, libsvm.svm_node[])" map="A"/>
  <method class="libsvm.svm" name="void solve_nu_svc(libsvm.svm_problem, libsvm.svm_parameter, double[], libsvm.Solver$SolutionInfo)" map="B"/>
  <method class="libsvm.svm" name="int svm_get_svm_type(libsvm.svm_model)" map="C"/>
  <method class="libsvm.svm" name="double svm_get_svr_probability(libsvm.svm_model)" map="D"/>
  <method class="libsvm.svm" name="void multiclass_probability(int, double[][], double[])" map="A"/>
  <method class="libsvm.svm" name="void sigmoid_train(int, double[], double[], double[])" map="A"/>
  <method class="libsvm.svm" name="void solve_epsilon_svr(libsvm.svm_problem, libsvm.svm_parameter, double[], libsvm.Solver$SolutionInfo)" map="C"/>
  <method class="libsvm.svm" name="void solve_one_class(libsvm.svm_problem, libsvm.svm_parameter, double[], libsvm.Solver$SolutionInfo)" map="D"/>
  <class name="libsvm.Solver$SolutionInfo" map="_A"/>
  <field class="libsvm.Solver$SolutionInfo" name="upper_bound_p" map="A"/>
  <field class="libsvm.Solver$SolutionInfo" name="rho" map="B"/>
  <field class="libsvm.Solver$SolutionInfo" name="upper_bound_n" map="C"/>
  <field class="libsvm.Solver$SolutionInfo" name="r" map="D"/>
  <field class="libsvm.Solver$SolutionInfo" name="obj" map="E"/>
  <class name="libsvm.Solver" map="C"/>
  <field class="libsvm.Solver" name="unshrinked" map="A"/>
  <field class="libsvm.Solver" name="UPPER_BOUND" map="B"/>
  <field class="libsvm.Solver" name="QD" map="C"/>
  <field class="libsvm.Solver" name="alpha" map="D"/>
  <field class="libsvm.Solver" name="Q" map="E"/>
  <field class="libsvm.Solver" name="alpha_status" map="F"/>
  <field class="libsvm.Solver" name="LOWER_BOUND" map="G"/>
  <field class="libsvm.Solver" name="active_size" map="H"/>
  <field class="libsvm.Solver" name="Cp" map="I"/>
  <field class="libsvm.Solver" name="y" map="J"/>
  <field class="libsvm.Solver" name="INF" map="K"/>
  <field class="libsvm.Solver" name="Cn" map="L"/>
  <field class="libsvm.Solver" name="G" map="M"/>
  <field class="libsvm.Solver" name="eps" map="N"/>
  <field class="libsvm.Solver" name="p" map="O"/>
  <field class="libsvm.Solver" name="l" map="P"/>
  <field class="libsvm.Solver" name="G_bar" map="Q"/>
  <field class="libsvm.Solver" name="FREE" map="R"/>
  <field class="libsvm.Solver" name="active_set" map="S"/>
  <method class="libsvm.Solver" name="boolean is_upper_bound(int)" map="A"/>
  <method class="libsvm.Solver" name="void update_alpha_status(int)" map="B"/>
  <method class="libsvm.Solver" name="boolean is_lower_bound(int)" map="C"/>
  <method class="libsvm.Solver" name="double calculate_rho()" map="A"/>
  <method class="libsvm.Solver" name="void reconstruct_gradient()" map="B"/>
  <method class="libsvm.Solver" name="void do_shrinking()" map="C"/>
  <method class="libsvm.Solver" name="boolean be_shrunken(int, double, double)" map="A"/>
  <method class="libsvm.Solver" name="boolean is_free(int)" map="D"/>
  <method class="libsvm.Solver" name="int select_working_set(int[])" map="A"/>
  <method class="libsvm.Solver" name="void Solve(int, libsvm.QMatrix, double[], byte[], double[], double, double, double, libsvm.Solver$SolutionInfo, int)" map="A"/>
  <method class="libsvm.Solver" name="double get_C(int)" map="E"/>
  <method class="libsvm.Solver" name="void swap_index(int, int)" map="A"/>
  <class name="libsvm.svm_model" map="D"/>
  <field class="libsvm.svm_model" name="sv_coef" map="A"/>
  <field class="libsvm.svm_model" name="param" map="B"/>
  <field class="libsvm.svm_model" name="nSV" map="C"/>
  <field class="libsvm.svm_model" name="l" map="D"/>
  <field class="libsvm.svm_model" name="SV" map="E"/>
  <field class="libsvm.svm_model" name="nr_class" map="F"/>
  <field class="libsvm.svm_model" name="probB" map="G"/>
  <field class="libsvm.svm_model" name="probA" map="H"/>
  <field class="libsvm.svm_model" name="label" map="I"/>
  <field class="libsvm.svm_model" name="rho" map="J"/>
  <class name="libsvm.SVC_Q" map="E"/>
  <field class="libsvm.SVC_Q" name="cache" map="P"/>
  <field class="libsvm.SVC_Q" name="QD" map="Q"/>
  <field class="libsvm.SVC_Q" name="y" map="R"/>
  <method class="libsvm.SVC_Q" name="float[] get_QD()" map="A"/>
  <method class="libsvm.SVC_Q" name="void swap_index(int, int)" map="A"/>
  <method class="libsvm.SVC_Q" name="float[] get_Q(int, int)" map="B"/>
  <class name="libsvm.AppletFrame$1" map="1"/>
  <field class="libsvm.AppletFrame$1" name="this$0" map="A"/>
  <method class="libsvm.AppletFrame$1" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="libsvm.AppletFrame" map="F"/>
  <class name="libsvm.SVR_Q" map="G"/>
  <field class="libsvm.SVR_Q" name="buffer" map="G"/>
  <field class="libsvm.SVR_Q" name="sign" map="H"/>
  <field class="libsvm.SVR_Q" name="l" map="I"/>
  <field class="libsvm.SVR_Q" name="cache" map="J"/>
  <field class="libsvm.SVR_Q" name="index" map="K"/>
  <field class="libsvm.SVR_Q" name="QD" map="L"/>
  <field class="libsvm.SVR_Q" name="next_buffer" map="M"/>
  <method class="libsvm.SVR_Q" name="float[] get_QD()" map="A"/>
  <method class="libsvm.SVR_Q" name="void swap_index(int, int)" map="A"/>
  <method class="libsvm.SVR_Q" name="float[] get_Q(int, int)" map="B"/>
  <class name="libsvm.Kernel" map="H"/>
  <field class="libsvm.Kernel" name="gamma" map="A"/>
  <field class="libsvm.Kernel" name="x_square" map="B"/>
  <field class="libsvm.Kernel" name="x" map="C"/>
  <field class="libsvm.Kernel" name="coef0" map="D"/>
  <field class="libsvm.Kernel" name="kernel_type" map="E"/>
  <field class="libsvm.Kernel" name="degree" map="F"/>
  <method class="libsvm.Kernel" name="float[] get_QD()" map="A"/>
  <method class="libsvm.Kernel" name="void swap_index(int, int)" map="A"/>
  <method class="libsvm.Kernel" name="double dot(libsvm.svm_node[], libsvm.svm_node[])" map="A"/>
  <method class="libsvm.Kernel" name="double kernel_function(int, int)" map="C"/>
  <method class="libsvm.Kernel" name="double powi(double, int)" map="A"/>
  <method class="libsvm.Kernel" name="double k_function(libsvm.svm_node[], libsvm.svm_node[], libsvm.svm_parameter)" map="A"/>
  <method class="libsvm.Kernel" name="float[] get_Q(int, int)" map="B"/>
  <class name="libsvm.svm_problem" map="I"/>
  <field class="libsvm.svm_problem" name="x" map="A"/>
  <field class="libsvm.svm_problem" name="l" map="B"/>
  <field class="libsvm.svm_problem" name="y" map="C"/>
  <class name="libsvm.svm_toy$6" map="6"/>
  <field class="libsvm.svm_toy$6" name="this$0" map="A"/>
  <field class="libsvm.svm_toy$6" name="val$input_line" map="B"/>
  <method class="libsvm.svm_toy$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="libsvm.svm_toy$point" map="_A"/>
  <field class="libsvm.svm_toy$point" name="this$0" map="A"/>
  <field class="libsvm.svm_toy$point" name="x" map="B"/>
  <field class="libsvm.svm_toy$point" name="value" map="C"/>
  <field class="libsvm.svm_toy$point" name="y" map="D"/>
  <class name="libsvm.svm_toy$5" map="5"/>
  <field class="libsvm.svm_toy$5" name="this$0" map="A"/>
  <method class="libsvm.svm_toy$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="libsvm.svm_toy$4" map="4"/>
  <field class="libsvm.svm_toy$4" name="this$0" map="A"/>
  <method class="libsvm.svm_toy$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="libsvm.svm_toy$3" map="3"/>
  <field class="libsvm.svm_toy$3" name="this$0" map="A"/>
  <method class="libsvm.svm_toy$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="libsvm.svm_toy$2" map="2"/>
  <field class="libsvm.svm_toy$2" name="this$0" map="A"/>
  <field class="libsvm.svm_toy$2" name="val$input_line" map="B"/>
  <method class="libsvm.svm_toy$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="libsvm.svm_toy$1" map="1"/>
  <field class="libsvm.svm_toy$1" name="this$0" map="A"/>
  <field class="libsvm.svm_toy$1" name="val$button_change" map="B"/>
  <method class="libsvm.svm_toy$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="libsvm.svm_toy" map="J"/>
  <field class="libsvm.svm_toy" name="colors" map="A"/>
  <field class="libsvm.svm_toy" name="buffer" map="B"/>
  <field class="libsvm.svm_toy" name="point_list" map="C"/>
  <field class="libsvm.svm_toy" name="buffer_gc" map="D"/>
  <field class="libsvm.svm_toy" name="current_value" map="E"/>
  <field class="libsvm.svm_toy" name="YLEN" map="F"/>
  <field class="libsvm.svm_toy" name="DEFAULT_PARAM" map="G"/>
  <field class="libsvm.svm_toy" name="XLEN" map="H"/>
  <method class="libsvm.svm_toy" name="void setSize(java.awt.Dimension)" map="setSize"/>
  <method class="libsvm.svm_toy" name="java.awt.Dimension getPreferredSize()" map="getPreferredSize"/>
  <method class="libsvm.svm_toy" name="void processMouseEvent(java.awt.event.MouseEvent)" map="processMouseEvent"/>
  <method class="libsvm.svm_toy" name="void draw_point(libsvm.svm_toy$point)" map="A"/>
  <method class="libsvm.svm_toy" name="void button_load_clicked()" map="A"/>
  <method class="libsvm.svm_toy" name="void draw_all_points()" map="B"/>
  <method class="libsvm.svm_toy" name="void setSize(int, int)" map="setSize"/>
  <method class="libsvm.svm_toy" name="void button_change_clicked()" map="C"/>
  <method class="libsvm.svm_toy" name="void button_clear_clicked()" map="D"/>
  <method class="libsvm.svm_toy" name="void main(java.lang.String[])" map="A"/>
  <method class="libsvm.svm_toy" name="double atof(java.lang.String)" map="A"/>
  <method class="libsvm.svm_toy" name="void clear_all()" map="E"/>
  <method class="libsvm.svm_toy" name="int atoi(java.lang.String)" map="B"/>
  <method class="libsvm.svm_toy" name="void paint(java.awt.Graphics)" map="paint"/>
  <method class="libsvm.svm_toy" name="void button_save_clicked()" map="F"/>
  <method class="libsvm.svm_toy" name="void button_run_clicked(java.lang.String)" map="C"/>
  <method class="libsvm.svm_toy" name="void init()" map="init"/>
  <class name="libsvm.svm_predict" map="K"/>
  <method class="libsvm.svm_predict" name="void main(java.lang.String[])" map="A"/>
  <method class="libsvm.svm_predict" name="void exit_with_help()" map="A"/>
  <method class="libsvm.svm_predict" name="int atoi(java.lang.String)" map="A"/>
  <method class="libsvm.svm_predict" name="double atof(java.lang.String)" map="B"/>
  <method class="libsvm.svm_predict" name="void predict(java.io.BufferedReader, java.io.DataOutputStream, libsvm.svm_model, int)" map="A"/>
  <class name="libsvm.svm_node" map="L"/>
  <field class="libsvm.svm_node" name="index" map="A"/>
  <field class="libsvm.svm_node" name="value" map="B"/>
  <class name="libsvm.svm_train" map="M"/>
  <field class="libsvm.svm_train" name="cross_validation" map="A"/>
  <field class="libsvm.svm_train" name="prob" map="B"/>
  <field class="libsvm.svm_train" name="nr_fold" map="C"/>
  <field class="libsvm.svm_train" name="model_file_name" map="D"/>
  <field class="libsvm.svm_train" name="model" map="E"/>
  <field class="libsvm.svm_train" name="error_msg" map="F"/>
  <field class="libsvm.svm_train" name="input_file_name" map="G"/>
  <field class="libsvm.svm_train" name="param" map="H"/>
  <method class="libsvm.svm_train" name="int getCross_validation()" map="A"/>
  <method class="libsvm.svm_train" name="void do_cross_validation()" map="B"/>
  <method class="libsvm.svm_train" name="void setCross_validation(int)" map="A"/>
  <method class="libsvm.svm_train" name="void run(java.lang.String[])" map="A"/>
  <method class="libsvm.svm_train" name="void read_problem()" map="C"/>
  <method class="libsvm.svm_train" name="void parse_command_line(java.lang.String[])" map="B"/>
  <method class="libsvm.svm_train" name="void exit_with_help()" map="D"/>
  <method class="libsvm.svm_train" name="void main(java.lang.String[])" map="C"/>
  <method class="libsvm.svm_train" name="double atof(java.lang.String)" map="A"/>
  <method class="libsvm.svm_train" name="int atoi(java.lang.String)" map="B"/>
  <class name="libsvm.svm_parameter" map="N"/>
  <field class="libsvm.svm_parameter" name="EPSILON_SVR" map="A"/>
  <field class="libsvm.svm_parameter" name="degree" map="B"/>
  <field class="libsvm.svm_parameter" name="coef0" map="C"/>
  <field class="libsvm.svm_parameter" name="ONE_CLASS" map="D"/>
  <field class="libsvm.svm_parameter" name="C_SVC" map="E"/>
  <field class="libsvm.svm_parameter" name="weight_label" map="F"/>
  <field class="libsvm.svm_parameter" name="RBF" map="G"/>
  <field class="libsvm.svm_parameter" name="gamma" map="H"/>
  <field class="libsvm.svm_parameter" name="LINEAR" map="I"/>
  <field class="libsvm.svm_parameter" name="NU_SVR" map="J"/>
  <field class="libsvm.svm_parameter" name="svm_type" map="K"/>
  <field class="libsvm.svm_parameter" name="probability" map="L"/>
  <field class="libsvm.svm_parameter" name="weight" map="M"/>
  <field class="libsvm.svm_parameter" name="eps" map="N"/>
  <field class="libsvm.svm_parameter" name="PRECOMPUTED" map="O"/>
  <field class="libsvm.svm_parameter" name="C" map="P"/>
  <field class="libsvm.svm_parameter" name="POLY" map="Q"/>
  <field class="libsvm.svm_parameter" name="p" map="R"/>
  <field class="libsvm.svm_parameter" name="kernel_type" map="S"/>
  <field class="libsvm.svm_parameter" name="nr_weight" map="T"/>
  <field class="libsvm.svm_parameter" name="NU_SVC" map="U"/>
  <field class="libsvm.svm_parameter" name="SIGMOID" map="V"/>
  <field class="libsvm.svm_parameter" name="shrinking" map="W"/>
  <field class="libsvm.svm_parameter" name="cache_size" map="X"/>
  <field class="libsvm.svm_parameter" name="nu" map="Y"/>
  <method class="libsvm.svm_parameter" name="java.lang.Object clone()" map="clone"/>
  <class name="libsvm.Cache$1" map="1"/>
  <class name="libsvm.Cache$head_t" map="_A"/>
  <field class="libsvm.Cache$head_t" name="this$0" map="A"/>
  <field class="libsvm.Cache$head_t" name="len" map="B"/>
  <field class="libsvm.Cache$head_t" name="next" map="C"/>
  <field class="libsvm.Cache$head_t" name="prev" map="D"/>
  <field class="libsvm.Cache$head_t" name="data" map="E"/>
  <class name="libsvm.Cache" map="O"/>
  <field class="libsvm.Cache" name="l" map="A"/>
  <field class="libsvm.Cache" name="lru_head" map="B"/>
  <field class="libsvm.Cache" name="head" map="C"/>
  <field class="libsvm.Cache" name="size" map="D"/>
  <method class="libsvm.Cache" name="void swap_index(int, int)" map="A"/>
  <method class="libsvm.Cache" name="void lru_delete(libsvm.Cache$head_t)" map="A"/>
  <method class="libsvm.Cache" name="int get_data(int, float[][], int)" map="A"/>
  <method class="libsvm.Cache" name="void lru_insert(libsvm.Cache$head_t)" map="B"/>
  <class name="libsvm.QMatrix" map="P"/>
  <method class="libsvm.QMatrix" name="float[] get_QD()" map="A"/>
  <method class="libsvm.QMatrix" name="void swap_index(int, int)" map="A"/>
  <method class="libsvm.QMatrix" name="float[] get_Q(int, int)" map="B"/>
  <class name="libsvm.ONE_CLASS_Q" map="Q"/>
  <field class="libsvm.ONE_CLASS_Q" name="cache" map="N"/>
  <field class="libsvm.ONE_CLASS_Q" name="QD" map="O"/>
  <method class="libsvm.ONE_CLASS_Q" name="float[] get_QD()" map="A"/>
  <method class="libsvm.ONE_CLASS_Q" name="void swap_index(int, int)" map="A"/>
  <method class="libsvm.ONE_CLASS_Q" name="float[] get_Q(int, int)" map="B"/>
  <package name="edu.scripps.pms.util" map="A"/>
  <package name="edu.scripps.pms.util.sqt" map="A"/>
  <class name="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" map="A"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="SORTBYXCORR" map="A"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="SORTBYSP" map="B"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="SORTBYDELTACN" map="C"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="sortByScoreType" map="D"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptideSpComparator" name="int compare(edu.scripps.pms.util.sqt.SQTPeptide, edu.scripps.pms.util.sqt.SQTPeptide)" map="A"/>
  <class name="edu.scripps.pms.util.sqt.SQTValidator" map="B"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="isValidPeptide" map="A"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="fixit" map="B"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="lineNumber" map="C"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="fixSingleFile" map="D"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="fileName" map="E"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="header" map="F"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="backup" map="G"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="singleFile" map="H"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="lastLine" map="I"/>
  <field class="edu.scripps.pms.util.sqt.SQTValidator" name="br" map="J"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="java.util.Iterator getAllFiles(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void validate()" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void close()" map="B"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void checkSinglefileFix(boolean, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void readIt()" map="C"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void printUsage()" map="D"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="void prevalidate()" map="E"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="java.lang.String getHeader()" map="F"/>
  <method class="edu.scripps.pms.util.sqt.SQTValidator" name="java.lang.String checkline(java.lang.String, int, int, java.lang.String)" map="A"/>
  <class name="edu.scripps.pms.util.sqt.MLine" map="C"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="matchedIons" map="A"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="sp" map="B"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="xcorrRank" map="C"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="spVale" map="D"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="deltCN" map="E"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="xcorr" map="F"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="spRank" map="G"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="sequence" map="H"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="primaryRankInt" map="I"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="status" map="J"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="xcorrValue" map="K"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="mLine" map="L"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="calMZ" map="M"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="predictedIons" map="N"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="lLineList" map="O"/>
  <field class="edu.scripps.pms.util.sqt.MLine" name="spRankInt" map="P"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="boolean contains(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setSequence(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="boolean addLLine(java.lang.String)" map="C"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getStatus()" map="A"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setCalMZ(java.lang.String)" map="D"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getCalMZ()" map="B"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setMLine(java.lang.String)" map="E"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getPredictedIons()" map="C"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.util.Iterator getLLine()" map="D"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getDeltCN()" map="E"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setDeltCN(float)" map="A"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="int getSpRankInt()" map="F"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="int getXcorrRankInt()" map="G"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getSequence()" map="H"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="double getSpValue()" map="I"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getXcorrRank()" map="J"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getFirstLLine()" map="K"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getSp()" map="L"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getSpRank()" map="M"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setXcorrRank(java.lang.String)" map="F"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getMatchedIons()" map="N"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="int getPrimaryRankInt()" map="O"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setDeltCN(java.lang.String)" map="G"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="boolean lLineStartsWith(java.lang.String)" map="H"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setXcorr(java.lang.String)" map="I"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setStatus(java.lang.String)" map="J"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="double getXcorrValue()" map="P"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="double getDeltaCnValue()" map="Q"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="boolean isReverseHit()" map="R"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getXcorr()" map="S"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setMatchedIons(java.lang.String)" map="K"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setSp(java.lang.String)" map="L"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setPredictedIons(java.lang.String)" map="M"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="void setSpRank(java.lang.String)" map="N"/>
  <method class="edu.scripps.pms.util.sqt.MLine" name="java.lang.String getMLine()" map="T"/>
  <class name="edu.scripps.pms.util.sqt.SQTPeptide" map="D"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="chargeState" map="A"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="serverName" map="B"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="numSeq" map="C"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="lowestSp" map="D"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="hiScan" map="E"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="mLineList" map="F"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="sLine" map="G"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="MASSDIFFC12C13" map="H"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="HALFMASSDIFFC12C13" map="I"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="timeToProcess" map="J"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="topHit" map="K"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="totalIntensity" map="L"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="loScan" map="M"/>
  <field class="edu.scripps.pms.util.sqt.SQTPeptide" name="calMZ" map="N"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="boolean contains(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getTimeToProcess()" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="int getChargeStateInt()" map="B"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setChargeState(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="edu.scripps.pms.util.sqt.MLine getTopHit()" map="C"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getSLine()" map="D"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setCalMZ(java.lang.String)" map="C"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="double getDeltaMass()" map="E"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="edu.scripps.pms.util.sqt.MLine getMLineStartsWith(java.lang.String)" map="D"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getCalMZ()" map="F"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getChargeState()" map="G"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getNumSeq()" map="H"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setServerName(java.lang.String)" map="E"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="double getDeltaMass(edu.scripps.pms.util.sqt.MLine)" map="A"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="boolean addMLine(edu.scripps.pms.util.sqt.MLine)" map="B"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="double getDeltaCn()" map="I"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="boolean topHitStartsWith(java.lang.String)" map="F"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setNumSeq(java.lang.String)" map="G"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="int getNumMlines()" map="J"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setTimeToProcess(java.lang.String)" map="H"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getLoScan()" map="K"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.util.Iterator getMLine()" map="L"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getTotalIntensity()" map="M"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setLoScan(java.lang.String)" map="I"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="double getTScore()" map="N"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="edu.scripps.pms.util.sqt.MLine getSpRankOneHit()" map="O"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setLowestSp(java.lang.String)" map="J"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="boolean isReverseHit()" map="P"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getLowestSp()" map="Q"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getServerName()" map="R"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setSLine(java.lang.String)" map="K"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setTotalIntensity(java.lang.String)" map="L"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="void setHiScan(java.lang.String)" map="M"/>
  <method class="edu.scripps.pms.util.sqt.SQTPeptide" name="java.lang.String getHiScan()" map="S"/>
  <package name="edu.scripps.pms.util.spectrum" map="B"/>
  <class name="edu.scripps.pms.util.spectrum.Zline" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.Zline" name="dlines" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.Zline" name="m2z" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.Zline" name="chargeState" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.Zline" name="void addDline(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Zline" name="int getChargeState()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Zline" name="java.util.List getDlines()" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Zline" name="void setM2z(float)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Zline" name="float getM2z()" map="C"/>
  <class name="edu.scripps.pms.util.spectrum.PointList" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="DEFAULTNUMPEAKS" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="SORTBYINTENSITY" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="pointsSortedByIntensity" map="C"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="pointsSortedByXValue" map="D"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="index" map="E"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="listType" map="F"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="totalIntensity" map="G"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="SORTBYXVALUE" map="H"/>
  <field class="edu.scripps.pms.util.spectrum.PointList" name="points" map="I"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="double getMinXValue()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="int numPoints()" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="void sortPoints(boolean)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="void addPoint(edu.scripps.pms.util.spectrum.Point)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="double getTotalIntensity()" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="double getMaxXValue()" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="java.util.ArrayList getSortedPoints(boolean)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="java.lang.String getListType()" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="double getMaxIntensity()" map="F"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="java.util.ListIterator getPoints()" map="G"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="void setListType(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PointList" name="double getMinIntensity()" map="H"/>
  <class name="edu.scripps.pms.util.spectrum.Range" map="C"/>
  <field class="edu.scripps.pms.util.spectrum.Range" name="highBound" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.Range" name="lowBound" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Range" name="double getHighBound()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Range" name="void setHighBound(double)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Range" name="boolean isInRange(double)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Range" name="void setLowBound(double)" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.Range" name="double getLowBound()" map="B"/>
  <class name="edu.scripps.pms.util.spectrum.PeakComparator" map="D"/>
  <field class="edu.scripps.pms.util.spectrum.PeakComparator" name="compareByIntensity" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakComparator" name="void setCompareMode(boolean)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakComparator" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="edu.scripps.pms.util.spectrum.PeakComparator" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <class name="edu.scripps.pms.util.spectrum.Point" map="E"/>
  <field class="edu.scripps.pms.util.spectrum.Point" name="intensity" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.Point" name="index" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.Point" name="xValue" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="void setIndex(int)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="double getIntensity()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="void setXValue(double)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="double getXValue()" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="void setIntensity(double)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Point" name="int getIndex()" map="C"/>
  <class name="edu.scripps.pms.util.spectrum.Peak" map="F"/>
  <field class="edu.scripps.pms.util.spectrum.Peak" name="intensity" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.Peak" name="index" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.Peak" name="m2z" map="C"/>
  <field class="edu.scripps.pms.util.spectrum.Peak" name="chargeState" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="void setIndex(int)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="float getM2z()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="void setIntensity(float)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="int getIndex()" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="void setM2z(float)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="void setChargeState(int)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="int getChargeState()" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.Peak" name="float getIntensity()" map="D"/>
  <class name="edu.scripps.pms.util.spectrum.Hline" map="G"/>
  <field class="edu.scripps.pms.util.spectrum.Hline" name="creationDate" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.Hline" name="extractorOptions" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.Hline" name="extractor" map="C"/>
  <field class="edu.scripps.pms.util.spectrum.Hline" name="comments" map="D"/>
  <field class="edu.scripps.pms.util.spectrum.Hline" name="extractorVersion" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="void setExtractor(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="void setExtractorVersion(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="void setComments(java.lang.String)" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="java.lang.String getExtractor()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="void setCreationDate(java.lang.String)" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="void init(java.util.Iterator)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="java.lang.String getExtractorOptions()" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="java.lang.String getCreationDate()" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="java.lang.String getExtractorVersion()" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="void setExtractorOptions(java.lang.String)" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.Hline" name="java.lang.String getComments()" map="E"/>
  <class name="edu.scripps.pms.util.spectrum.PeakList" map="H"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="DEFAULTNUMPEAKS" map="A"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="DEFAULTSPECTRUMSIZE" map="B"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="peaksSortedByIntensity" map="C"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="SORTBYINTENSITY" map="D"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="ilines" map="E"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="zlines" map="F"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="peaksSortedByM2z" map="G"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="SORTBYM2Z" map="H"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="loscan" map="I"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="precursorMass" map="J"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="index" map="K"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="RETENTIONTIME" map="L"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="listType" map="M"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="peaks" map="N"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="hiscan" map="O"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="totalIntensity" map="P"/>
  <field class="edu.scripps.pms.util.spectrum.PeakList" name="hlines" map="Q"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="double getRetentionTime()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="edu.scripps.pms.util.spectrum.PointList[] calcQCorrs(int, int, double)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="double getAvgIntensityOfLeastIntensePeaks(int)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addIline(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void setHlines(java.util.List)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="double[] reverse(double[])" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.List getIlines()" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void setHiscan(int)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.lang.String getListType()" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.List getMostIntensPeaks(int, double, double)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.ListIterator getPeaks()" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="float getMinM2z()" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getNumZlines()" map="F"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addZlines(java.lang.StringBuffer)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addIlines(java.lang.StringBuffer)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getMaxIndex(double[])" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.Iterator getZlines()" map="G"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.ArrayList getSortedPeaks(int, boolean)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int numPeaks()" map="H"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void setZlines(java.util.ArrayList)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.lang.String getSpectrumWithHlines()" map="I"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="edu.scripps.pms.util.spectrum.Peak getPeakByM2z(double)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void setPrecursorMass(double)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void setLoscan(int)" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.ArrayList getSortedPeaks(boolean)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="float getTotalIntensity()" map="J"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="double getMaxIntensity(double, double)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="float getMaxPrecursorMass()" map="K"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="edu.scripps.pms.util.spectrum.Peak getPeak(float, float)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addSpectrum(java.lang.StringBuffer)" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="float getMinIntensity()" map="L"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void getSpectrumWithoutHlines(java.lang.StringBuffer)" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="float getMaxM2z()" map="M"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getHiscan()" map="N"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addPeak(edu.scripps.pms.util.spectrum.Peak)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getPrecursorScan()" map="O"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addZline(edu.scripps.pms.util.spectrum.Zline)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void setListType(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getIndex(float, float)" map="B"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void addSline(java.lang.StringBuffer)" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.ArrayList getLeastIntensePeaks(int)" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="float getMaxIntensity()" map="P"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="double getPrecursorMass()" map="Q"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getMaxChargeState()" map="R"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.lang.String getSpectrumWithoutHlines()" map="S"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="java.util.List getHlines()" map="T"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="int getLoscan()" map="U"/>
  <method class="edu.scripps.pms.util.spectrum.PeakList" name="void sortPeaks(boolean)" map="B"/>
  <class name="edu.scripps.pms.util.spectrum.PointComparator" map="I"/>
  <field class="edu.scripps.pms.util.spectrum.PointComparator" name="compareByIntensity" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PointComparator" name="void setCompareMode(boolean)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.PointComparator" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="edu.scripps.pms.util.spectrum.PointComparator" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <class name="edu.scripps.pms.util.spectrum.MzxmlPeakList" map="J"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="basePeakIntensity" map="R"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="encodedM2zAndIntensities" map="S"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="precursorScanNum" map="T"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="msLevel" map="U"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="peakLists" map="V"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="encodingPrecision" map="W"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="precursorIntensity" map="X"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="index" map="Y"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="retentionTime" map="Z"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="listType" map="_"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="basePeakM2z" map="a"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="totalIntensity" map="b"/>
  <field class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="totalIonCurrent" map="c"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setPrecursorIntensity(double)" map="C"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="int getMsLevel()" map="V"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="java.util.Iterator getChildren()" map="W"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setTotalIonCurrent(double)" map="D"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setEncodedM2zAndIntensities(java.lang.String, int)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setRetentionTime(double)" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="double getBasePeakIntensity()" map="X"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="java.lang.String getEncodedM2zAndIntensities()" map="Y"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="double getRetentionTime()" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setBasePeakM2z(double)" map="F"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="double getTotalIonCurrent()" map="Z"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="int getNumChildSpectrum()" map="_"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setBasePeakIntensity(double)" map="G"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void addChildSpectrum(edu.scripps.pms.util.spectrum.MzxmlPeakList)" map="A"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setPrecursorScan(int)" map="E"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="double getBasePeakM2z()" map="a"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="void setMsLevel(int)" map="F"/>
  <method class="edu.scripps.pms.util.spectrum.MzxmlPeakList" name="int getPrecursorScan()" map="O"/>
  <package name="edu.scripps.pms.util.seq" map="C"/>
  <class name="edu.scripps.pms.util.seq.Fasta" map="A"/>
  <field class="edu.scripps.pms.util.seq.Fasta" name="seq" map="A"/>
  <field class="edu.scripps.pms.util.seq.Fasta" name="accession" map="B"/>
  <field class="edu.scripps.pms.util.seq.Fasta" name="defline" map="C"/>
  <field class="edu.scripps.pms.util.seq.Fasta" name="pattern" map="D"/>
  <field class="edu.scripps.pms.util.seq.Fasta" name="sequence" map="E"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="java.lang.String getAccession()" map="A"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="int getLength()" map="B"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="byte byteAt(int)" map="A"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="java.lang.String getSequence()" map="C"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="java.lang.String getDefline()" map="D"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="int compareTo(edu.scripps.pms.util.seq.Fasta)" map="A"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="java.lang.String getAccession(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.seq.Fasta" name="byte[] getSequenceAsBytes()" map="E"/>
  <package name="edu.scripps.pms.util.isotope" map="D"/>
  <class name="edu.scripps.pms.util.isotope.IsotopeTable" map="A"/>
  <class name="edu.scripps.pms.util.isotope.ElementComposition" map="B"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="isoTable" map="A"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="ISOTOPE_SIZE" map="B"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="length" map="C"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="sampleArr" map="D"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="refArr" map="E"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="start" map="F"/>
  <field class="edu.scripps.pms.util.isotope.ElementComposition" name="peptide" map="G"/>
  <method class="edu.scripps.pms.util.isotope.ElementComposition" name="void calculateBion()" map="A"/>
  <method class="edu.scripps.pms.util.isotope.ElementComposition" name="void calculate()" map="B"/>
  <method class="edu.scripps.pms.util.isotope.ElementComposition" name="void sumRefElement(int[])" map="A"/>
  <method class="edu.scripps.pms.util.isotope.ElementComposition" name="void sumSampleElement(int[])" map="B"/>
  <method class="edu.scripps.pms.util.isotope.ElementComposition" name="int[] getElementRefArr()" map="C"/>
  <method class="edu.scripps.pms.util.isotope.ElementComposition" name="int[] getElementSampleArr()" map="D"/>
  <class name="edu.scripps.pms.util.isotope.IsotopeDist" map="C"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="masslist" map="A"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="enrichment" map="B"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="element" map="C"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="startMass" map="D"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="DIST_SIZE" map="E"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="npeak" map="F"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="avgMass" map="G"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="abund" map="H"/>
  <field class="edu.scripps.pms.util.isotope.IsotopeDist" name="endMass" map="I"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="double getAvgMass()" map="A"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="void calculate()" map="B"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="double[] getMasslist()" map="C"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="double getStartMass()" map="D"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="double getEachAbund(int, int)" map="A"/>
  <method class="edu.scripps.pms.util.isotope.IsotopeDist" name="double getEndMass()" map="E"/>
  <package name="edu.scripps.pms.util.stats" map="E"/>
  <class name="edu.scripps.pms.util.stats.TTest" map="A"/>
  <method class="edu.scripps.pms.util.stats.TTest" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.stats.TTest" name="double Norm_p(double)" map="A"/>
  <method class="edu.scripps.pms.util.stats.TTest" name="double T_p(double, double)" map="A"/>
  <method class="edu.scripps.pms.util.stats.TTest" name="double T_z(double, double)" map="B"/>
  <class name="edu.scripps.pms.util.stats.StatCalc" map="B"/>
  <field class="edu.scripps.pms.util.stats.StatCalc" name="max" map="A"/>
  <field class="edu.scripps.pms.util.stats.StatCalc" name="squareSum" map="B"/>
  <field class="edu.scripps.pms.util.stats.StatCalc" name="min" map="C"/>
  <field class="edu.scripps.pms.util.stats.StatCalc" name="sum" map="D"/>
  <field class="edu.scripps.pms.util.stats.StatCalc" name="count" map="E"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getStandardDeviation(long[])" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double t2z(double, double)" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double zScore2PValue(double)" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getMean()" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="int getCount()" map="B"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getStandardDeviation()" map="C"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="void enter(double)" map="B"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getTTestPValue(double, double)" map="B"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="void enter(double[])" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="int[] getHistogram(double[], double, int)" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getMin()" map="D"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getSum()" map="E"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getMax()" map="F"/>
  <method class="edu.scripps.pms.util.stats.StatCalc" name="double getStandardDeviation(double[])" map="B"/>
  <class name="edu.scripps.pms.util.stats.Fisher" map="C"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sright" map="A"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sn" map="B"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="left" map="C"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sleft" map="D"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="twotail" map="E"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="n12_" map="F"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="n22_" map="G"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sprob" map="H"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sn_1" map="I"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sn1_" map="J"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sn11" map="K"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="n11_" map="L"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="sless" map="M"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="slarg" map="N"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="format" map="O"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="right" map="P"/>
  <field class="edu.scripps.pms.util.stats.Fisher" name="n21_" map="Q"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double getFisherLeftTail()" map="A"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double rightTailedFisher(int, int, int, int)" map="A"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double lngamm(int)" map="A"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="void rightTailedFisherFromFile(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double exact(int, int, int, int)" map="B"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double hyper0(int, int, int, int)" map="C"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double lnbico(int, int)" map="A"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double hyper(int)" map="B"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double calculateFisherLeftTail(int, int, int, int)" map="D"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double calculateFisherRightTail(int, int, int, int)" map="E"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double calculateFisherTwoTail()" map="B"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double hyper_323(int, int, int, int)" map="F"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double calculateFisherFromMatrix(int, int, int, int)" map="G"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double lnfact(int)" map="C"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double calculateFisherTwoTail(int, int, int, int)" map="H"/>
  <method class="edu.scripps.pms.util.stats.Fisher" name="double getFisherRightTail()" map="C"/>
  <package name="edu.scripps.pms.util.dtaselect" map="F"/>
  <class name="edu.scripps.pms.util.dtaselect.ModProtein" map="A"/>
  <field class="edu.scripps.pms.util.dtaselect.ModProtein" name="locus" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModProtein" name="java.lang.String getLocus()" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModProtein" name="void setLocus(java.lang.String)" map="A"/>
  <class name="edu.scripps.pms.util.dtaselect.ModResidue" map="B"/>
  <field class="edu.scripps.pms.util.dtaselect.ModResidue" name="residue" map="A"/>
  <field class="edu.scripps.pms.util.dtaselect.ModResidue" name="massShift" map="B"/>
  <method class="edu.scripps.pms.util.dtaselect.ModResidue" name="void setResidue(char)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModResidue" name="double getMassShift()" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModResidue" name="void setMassShift(double)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModResidue" name="char getResidue()" map="B"/>
  <class name="edu.scripps.pms.util.dtaselect.ModPeptide" map="C"/>
  <field class="edu.scripps.pms.util.dtaselect.ModPeptide" name="massDifference" map="A"/>
  <field class="edu.scripps.pms.util.dtaselect.ModPeptide" name="modifiedResidue" map="B"/>
  <method class="edu.scripps.pms.util.dtaselect.ModPeptide" name="java.lang.String getMassDifference()" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModPeptide" name="void setModifiedResidue(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModPeptide" name="void init(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModPeptide" name="java.lang.String getModifiedResidue()" map="B"/>
  <method class="edu.scripps.pms.util.dtaselect.ModPeptide" name="void setMassDifference(java.lang.String)" map="B"/>
  <class name="edu.scripps.pms.util.dtaselect.Protein" map="D"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="seqCoverage" map="A"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="seqCount" map="B"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="length" map="C"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="peptideHt" map="D"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="validation" map="E"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="spectrumCount" map="F"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="proteinLine" map="G"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="locus" map="H"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="peptideList" map="I"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="molWt" map="J"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="description" map="K"/>
  <field class="edu.scripps.pms.util.dtaselect.Protein" name="pI" map="L"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void populatePeptideHt(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getSeqCoverage()" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void removePeptide(edu.scripps.pms.util.dtaselect.Peptide)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getPI()" map="B"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setSpectrumCount(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.util.Iterator getPeptides()" map="C"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getValidation()" map="D"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setSeqCount(java.lang.String)" map="C"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void init(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setLength(java.lang.String)" map="D"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getLocus()" map="E"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setPeptideHt(java.util.Hashtable)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setDescription(java.lang.String)" map="E"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setPI(java.lang.String)" map="F"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setSeqCoverage(java.lang.String)" map="G"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.util.Hashtable getPeptideHt()" map="F"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setMolWt(java.lang.String)" map="H"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="int addPeptideHt(java.util.Iterator, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setLocus(java.lang.String)" map="I"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getLength()" map="G"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getDescription()" map="H"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="void setValidation(java.lang.String)" map="J"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="int getPeptideSize()" map="I"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getMolWt()" map="J"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getProteinLine()" map="K"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="boolean addPeptide(edu.scripps.pms.util.dtaselect.Peptide)" map="B"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getSpectrumCount()" map="L"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.lang.String getSeqCount()" map="M"/>
  <method class="edu.scripps.pms.util.dtaselect.Protein" name="java.util.List getPeptideList()" map="N"/>
  <class name="edu.scripps.pms.util.dtaselect.Peptide" map="E"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="avgMassLight" map="A"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="yionSample" map="B"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="peptideLine" map="C"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="unique" map="D"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="scanNum" map="E"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="tmpStr" map="F"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="calcMHplus" map="G"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="spRank" map="H"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="avgMassHeavy" map="I"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="spScore" map="J"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="rt" map="K"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="conf" map="L"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="sequence" map="M"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="startMassLight" map="N"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="yionRef" map="O"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="endMassLight" map="P"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="scoreHt" map="Q"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="filePath" map="R"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="mhPlus" map="S"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="totalIntensity" map="T"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="bionSample" map="U"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="startMassHeavy" map="V"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="redundancy" map="W"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="endMassHeavy" map="X"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="xCorr" map="Y"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="ionProportion" map="Z"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="chargeState" map="_"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="deltCN" map="a"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="fileName" map="b"/>
  <field class="edu.scripps.pms.util.dtaselect.Peptide" name="bionRef" map="c"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void parseLine()" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.Peptide" name="void parseLine2()" map="B"/>
  <class name="edu.scripps.pms.util.dtaselect.ModList" map="F"/>
  <field class="edu.scripps.pms.util.dtaselect.ModList" name="value" map="A"/>
  <field class="edu.scripps.pms.util.dtaselect.ModList" name="map" map="B"/>
  <field class="edu.scripps.pms.util.dtaselect.ModList" name="sequence" map="C"/>
  <method class="edu.scripps.pms.util.dtaselect.ModList" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModList" name="gnu.trove.TIntDoubleHashMap getMap()" map="A"/>
  <method class="edu.scripps.pms.util.dtaselect.ModList" name="java.lang.String traverse(java.lang.String, char)" map="A"/>
  <package name="edu.scripps.pms.util.io" map="G"/>
  <class name="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" map="3"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="this$0" map="A"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="lastLine" map="B"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="val$msLevel" map="C"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="br" map="D"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="mslevel" map="E"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="nextPeakList" map="F"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="edu.scripps.pms.util.spectrum.MzxmlPeakList retrievePeakList(int)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="void readFirstPeakList(int)" map="B"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$3" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" map="2"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="this$0" map="A"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="lastLine" map="B"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="val$msLevel" map="C"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="br" map="D"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="mslevel" map="E"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="nextPeakList" map="F"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="void readFirstPeakList(int)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="java.lang.String retrievePeakList(int)" map="B"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$2" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" map="1"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="this$0" map="A"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="lastLine" map="B"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="br" map="C"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="nextPeakList" map="D"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="edu.scripps.pms.util.spectrum.MzxmlPeakList retrievePeakList()" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="void readFirstPeakList()" map="B"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader$1" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.util.io.MzxmlSpectrumReader" map="A"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="MZINTENSITYDELIMITER" map="A"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="BEGINSCANTAG" map="B"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="msLevel" map="C"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="scanNums" map="D"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="ENDMSRUNTAG" map="E"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="endIndex" map="F"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="msFileName" map="G"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="raf" map="H"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="scanNum2Position" map="I"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="ENDSCANTAG" map="J"/>
  <field class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="fileLength" map="K"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="long scan2Position(int)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.util.ArrayList getScanNums()" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="void getIndices()" map="B"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="void printMzxmlPeakList(edu.scripps.pms.util.spectrum.MzxmlPeakList)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="edu.scripps.pms.util.spectrum.MzxmlPeakList getPeakList(long, boolean)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.util.Iterator getSpectra()" map="C"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="void init(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="edu.scripps.pms.util.spectrum.MzxmlPeakList readPeakList(org.jdom.Element, boolean)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.util.Iterator getSpectra(int)" map="B"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.util.Iterator getSpectraWithChildren()" map="D"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="long scan2Position(java.lang.Integer)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="void closeDataFile()" map="E"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.util.Iterator getScanNums(int)" map="C"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.lang.String access$000(edu.scripps.pms.util.io.MzxmlSpectrumReader)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="java.util.Stack getScanNumStack()" map="F"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="int getNumSpectra()" map="G"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="edu.scripps.pms.util.spectrum.MzxmlPeakList scanNum2PeakList(java.lang.Integer, boolean)" map="A"/>
  <method class="edu.scripps.pms.util.io.MzxmlSpectrumReader" name="edu.scripps.pms.util.spectrum.MzxmlPeakList scanNum2PeakList(int, boolean)" map="A"/>
  <class name="edu.scripps.pms.util.io.SQTParser$1" map="1"/>
  <field class="edu.scripps.pms.util.io.SQTParser$1" name="this$0" map="A"/>
  <field class="edu.scripps.pms.util.io.SQTParser$1" name="mLine" map="B"/>
  <field class="edu.scripps.pms.util.io.SQTParser$1" name="peptide" map="C"/>
  <method class="edu.scripps.pms.util.io.SQTParser$1" name="edu.scripps.pms.util.sqt.SQTPeptide getPeptide()" map="A"/>
  <method class="edu.scripps.pms.util.io.SQTParser$1" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.SQTParser$1" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.SQTParser$1" name="edu.scripps.pms.util.sqt.SQTPeptide next()" map="B"/>
  <method class="edu.scripps.pms.util.io.SQTParser$1" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.util.io.SQTParser" map="B"/>
  <field class="edu.scripps.pms.util.io.SQTParser" name="isValidPeptide" map="A"/>
  <field class="edu.scripps.pms.util.io.SQTParser" name="lastLine" map="B"/>
  <field class="edu.scripps.pms.util.io.SQTParser" name="br" map="C"/>
  <field class="edu.scripps.pms.util.io.SQTParser" name="fileName" map="D"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="java.io.BufferedReader access$200(edu.scripps.pms.util.io.SQTParser)" map="A"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="java.util.Iterator getSQTPeptide()" map="A"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="void readHeader()" map="B"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="boolean access$100(edu.scripps.pms.util.io.SQTParser)" map="B"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="void close()" map="C"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="boolean access$102(edu.scripps.pms.util.io.SQTParser, boolean)" map="A"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="java.lang.String access$000(edu.scripps.pms.util.io.SQTParser)" map="C"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="java.lang.String access$002(edu.scripps.pms.util.io.SQTParser, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.SQTParser" name="void init()" map="D"/>
  <class name="edu.scripps.pms.util.io.PepXmlReader$ModResidue" map="_A"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="this$0" map="A"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="mass" map="B"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="pos" map="C"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="int getPos()" map="A"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="double getMass()" map="B"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="void setMass(double)" map="A"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="void setPos(int)" map="A"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader$ModResidue" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <class name="edu.scripps.pms.util.io.PepXmlReader" map="C"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader" name="root" map="O"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader" name="builder" map="P"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader" name="totalPeptideNumber" map="Q"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader" name="ns" map="R"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader" name="doc" map="S"/>
  <field class="edu.scripps.pms.util.io.PepXmlReader" name="fileName" map="T"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="void main(java.lang.String[])" map="B"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="java.lang.String getFileName()" map="A"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="java.util.Iterator getProteins()" map="B"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="void calcTotalPeptideNum()" map="P"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="int getTotalPeptideNumber()" map="C"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="void setFileName(java.lang.String)" map="C"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="edu.scripps.pms.util.dtaselect.Peptide buildPeptide(java.lang.String, org.jdom.Element, org.jdom.Element, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.PepXmlReader" name="void reOrganizeProteins()" map="Q"/>
  <class name="edu.scripps.pms.util.io.FileReaderUtil" map="D"/>
  <method class="edu.scripps.pms.util.io.FileReaderUtil" name="java.lang.String getSQTFile(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.FileReaderUtil" name="java.util.Iterator getAllFiles(java.lang.String)" map="B"/>
  <class name="edu.scripps.pms.util.io.FileFormatUnknownException" map="E"/>
  <field class="edu.scripps.pms.util.io.FileFormatUnknownException" name="messageStr" map="A"/>
  <class name="edu.scripps.pms.util.io.DTASelectFilterReader$1" map="1"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="this$0" map="A"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="protein" map="B"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="peptide" map="C"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="edu.scripps.pms.util.dtaselect.Protein getProtein(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="java.lang.Object next()" map="next"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader$1" name="edu.scripps.pms.util.dtaselect.Protein next()" map="A"/>
  <class name="edu.scripps.pms.util.io.DTASelectFilterReader" map="F"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="redundantPeptideNum" map="C"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="fileName" map="D"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="CONFIDENCE_THRESHOLD" map="E"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="confidence" map="F"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="unfilteredPeptideNum" map="G"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="criteria" map="H"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="dbFileName" map="I"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="lastLine" map="J"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="redundantProteinNum" map="K"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="br" map="L"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="READ_FROM_THE_END" map="M"/>
  <field class="edu.scripps.pms.util.io.DTASelectFilterReader" name="version2" map="N"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void setRedundantPeptideNum(int)" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.io.BufferedReader access$100(edu.scripps.pms.util.io.DTASelectFilterReader)" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void setFileName(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void setDbFileName(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void readSummary()" map="F"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void readHeader()" map="G"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void setUnfilteredPeptideNum(int)" map="B"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void close()" map="H"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.util.ArrayList getChroProteinList()" map="I"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="int getRedundantPeptideNum()" map="J"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="int getUnfilteredPeptideNum()" map="K"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.lang.String access$000(edu.scripps.pms.util.io.DTASelectFilterReader)" map="B"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void setRedundantProteinNum(int)" map="C"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="double getConfidence()" map="E"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void init()" map="L"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="boolean access$200(edu.scripps.pms.util.io.DTASelectFilterReader)" map="C"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.util.Iterator getProteins()" map="B"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="int getTotalPeptideNumber()" map="C"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.lang.String getCriteria()" map="M"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.lang.String getFileName()" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.lang.String getDbFileName()" map="N"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="java.lang.String access$002(edu.scripps.pms.util.io.DTASelectFilterReader, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="int getRedundantProteinNum()" map="O"/>
  <method class="edu.scripps.pms.util.io.DTASelectFilterReader" name="boolean isVersion2()" map="D"/>
  <class name="edu.scripps.pms.util.io.FileUtil" map="G"/>
  <method class="edu.scripps.pms.util.io.FileUtil" name="void copy(java.io.File, java.io.File, boolean)" map="A"/>
  <method class="edu.scripps.pms.util.io.FileUtil" name="void copy(java.lang.String, java.lang.String, boolean)" map="A"/>
  <class name="edu.scripps.pms.util.io.SpectrumReader$1" map="1"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader$1" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader$1" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader$1" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.util.io.SpectrumReader" map="H"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="MZINTENSITYDELIMITER" map="A"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="FIRSTCHAROFHLINE" map="B"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="numOfSpectra" map="C"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="spectraDelimiter" map="D"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="msFileName" map="E"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="fileFormat" map="F"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="lastLine" map="G"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="hlines" map="H"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="br" map="I"/>
  <field class="edu.scripps.pms.util.io.SpectrumReader" name="isNewFormat" map="J"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="java.util.Iterator getSpectra()" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="void readHlines()" map="B"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="java.util.ArrayList getSpectraList()" map="C"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="void refreshInputStream()" map="D"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="edu.scripps.pms.util.spectrum.PeakList access$100(edu.scripps.pms.util.io.SpectrumReader)" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="void getPeaks(edu.scripps.pms.util.spectrum.PeakList)" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="java.util.Iterator getHlines()" map="E"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="edu.scripps.pms.util.spectrum.PeakList getPeakList()" map="F"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="void closeDataFile()" map="G"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="java.lang.String access$000(edu.scripps.pms.util.io.SpectrumReader)" map="B"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="void getListSpecificInfo(edu.scripps.pms.util.spectrum.PeakList)" map="B"/>
  <method class="edu.scripps.pms.util.io.SpectrumReader" name="int getNumSpectra()" map="H"/>
  <class name="edu.scripps.pms.util.io.SpectrumIndexReader" map="I"/>
  <field class="edu.scripps.pms.util.io.SpectrumIndexReader" name="ZLINE_HEADER" map="A"/>
  <field class="edu.scripps.pms.util.io.SpectrumIndexReader" name="spectrumNum" map="B"/>
  <field class="edu.scripps.pms.util.io.SpectrumIndexReader" name="br" map="C"/>
  <field class="edu.scripps.pms.util.io.SpectrumIndexReader" name="file" map="D"/>
  <field class="edu.scripps.pms.util.io.SpectrumIndexReader" name="SLINE_HEADER" map="E"/>
  <method class="edu.scripps.pms.util.io.SpectrumIndexReader" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumIndexReader" name="edu.scripps.pms.util.spectrum.PeakList getPeakList()" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumIndexReader" name="java.lang.String getClosestScan(long)" map="A"/>
  <method class="edu.scripps.pms.util.io.SpectrumIndexReader" name="java.lang.String getPeaks()" map="B"/>
  <method class="edu.scripps.pms.util.io.SpectrumIndexReader" name="edu.scripps.pms.util.spectrum.PointList getPointList()" map="C"/>
  <method class="edu.scripps.pms.util.io.SpectrumIndexReader" name="void close()" map="D"/>
  <class name="edu.scripps.pms.util.io.BaseIdentificationReader" map="J"/>
  <field class="edu.scripps.pms.util.io.BaseIdentificationReader" name="isoReader" map="A"/>
  <field class="edu.scripps.pms.util.io.BaseIdentificationReader" name="fileName" map="B"/>
  <method class="edu.scripps.pms.util.io.BaseIdentificationReader" name="boolean isVersion2()" map="D"/>
  <method class="edu.scripps.pms.util.io.BaseIdentificationReader" name="edu.scripps.pms.util.io.IdentificationReader getIdentificationInst(edu.scripps.pms.census.io.IsotopeReader)" map="A"/>
  <method class="edu.scripps.pms.util.io.BaseIdentificationReader" name="double getConfidence()" map="E"/>
  <class name="edu.scripps.pms.util.io.FastaReader$1" map="1"/>
  <field class="edu.scripps.pms.util.io.FastaReader$1" name="lastLine" map="A"/>
  <field class="edu.scripps.pms.util.io.FastaReader$1" name="val$is" map="B"/>
  <field class="edu.scripps.pms.util.io.FastaReader$1" name="br" map="C"/>
  <method class="edu.scripps.pms.util.io.FastaReader$1" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.util.io.FastaReader$1" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.util.io.FastaReader$1" name="edu.scripps.pms.util.seq.Fasta getFasta()" map="A"/>
  <method class="edu.scripps.pms.util.io.FastaReader$1" name="void finalize()" map="finalize"/>
  <method class="edu.scripps.pms.util.io.FastaReader$1" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.util.io.FastaReader" map="K"/>
  <field class="edu.scripps.pms.util.io.FastaReader" name="FIRSTCHAROFDEFLINE" map="A"/>
  <field class="edu.scripps.pms.util.io.FastaReader" name="DEFAULTSEQENCELENGTH" map="B"/>
  <method class="edu.scripps.pms.util.io.FastaReader" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.io.FastaReader" name="java.util.List getFastaList(java.io.InputStream)" map="A"/>
  <method class="edu.scripps.pms.util.io.FastaReader" name="java.util.Iterator getFastas(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.io.FastaReader" name="java.util.Iterator getFastas(java.io.InputStream)" map="B"/>
  <class name="edu.scripps.pms.util.io.IdentificationReader" map="L"/>
  <method class="edu.scripps.pms.util.io.IdentificationReader" name="java.lang.String getFileName()" map="A"/>
  <method class="edu.scripps.pms.util.io.IdentificationReader" name="java.util.Iterator getProteins()" map="B"/>
  <method class="edu.scripps.pms.util.io.IdentificationReader" name="int getTotalPeptideNumber()" map="C"/>
  <method class="edu.scripps.pms.util.io.IdentificationReader" name="boolean isVersion2()" map="D"/>
  <method class="edu.scripps.pms.util.io.IdentificationReader" name="double getConfidence()" map="E"/>
  <class name="edu.scripps.pms.util.CalendarUtil" map="A"/>
  <field class="edu.scripps.pms.util.CalendarUtil" name="cal" map="A"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="java.sql.Date getDate()" map="A"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="java.util.List getMonthList()" map="B"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="java.lang.String getCurrentDateTime()" map="C"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="long getDateAsLong()" map="D"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="java.lang.String getDateTimeFormat(java.sql.Date)" map="A"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="void init(int, int, int)" map="A"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="java.lang.String getCurrentDateTime(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.CalendarUtil" name="java.lang.String getMediumFormat(java.sql.Date)" map="B"/>
  <class name="edu.scripps.pms.util.TimeUtils" map="B"/>
  <field class="edu.scripps.pms.util.TimeUtils" name="endTime" map="A"/>
  <field class="edu.scripps.pms.util.TimeUtils" name="startTime" map="B"/>
  <field class="edu.scripps.pms.util.TimeUtils" name="dateTimeFormat" map="C"/>
  <field class="edu.scripps.pms.util.TimeUtils" name="dateMediumFormat" map="D"/>
  <field class="edu.scripps.pms.util.TimeUtils" name="mediumFormat" map="E"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="java.util.Date getAheadDate(int)" map="A"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="java.lang.String getYearMonthDayPath()" map="A"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="java.util.Date getOffsetDate(java.util.Date, int)" map="A"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="long getTimeUsedHours()" map="B"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="long getTimeUsedSeconds()" map="C"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="long getTimeUsed()" map="D"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="long getTimeUsedMinutes()" map="E"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="java.text.DateFormat getDateTimeFormat()" map="F"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="void stopTiming()" map="G"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="java.text.DateFormat getMediumFormat()" map="H"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="long getTimeUsedMillis()" map="I"/>
  <method class="edu.scripps.pms.util.TimeUtils" name="void startTiming()" map="J"/>
  <class name="edu.scripps.pms.util.AppProperties" map="C"/>
  <class name="edu.scripps.pms.util.MZXmlHandler$NativePeakList" map="_A"/>
  <field class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" name="massArr" map="A"/>
  <field class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" name="intArr" map="B"/>
  <method class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" name="void setIntArr(double[])" map="A"/>
  <method class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" name="void setMassArr(double[])" map="B"/>
  <method class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" name="double[] getMassArr()" map="A"/>
  <method class="edu.scripps.pms.util.MZXmlHandler$NativePeakList" name="double[] getIntArr()" map="B"/>
  <class name="edu.scripps.pms.util.MZXmlHandler" map="D"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="edu.scripps.pms.util.MZXmlHandler$NativePeakList decode32ToArr(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="edu.scripps.pms.util.spectrum.PeakList decode64(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="byte[] floatTobyte(float)" map="A"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="void decode32(java.lang.String, edu.scripps.pms.util.spectrum.PeakList)" map="A"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="edu.scripps.pms.util.spectrum.PeakList decode32(java.lang.String)" map="C"/>
  <method class="edu.scripps.pms.util.MZXmlHandler" name="edu.scripps.pms.util.spectrum.PeakList decode(java.lang.String, int)" map="A"/>
  <class name="edu.scripps.pms.util.EnvVarsExtractor" map="E"/>
  <field class="edu.scripps.pms.util.EnvVarsExtractor" name="envVars" map="A"/>
  <method class="edu.scripps.pms.util.EnvVarsExtractor" name="java.util.Properties envVars()" map="A"/>
  <method class="edu.scripps.pms.util.EnvVarsExtractor" name="java.lang.String var(java.lang.String)" map="A"/>
  <class name="edu.scripps.pms.util.ByteArrayConverter" map="F"/>
  <method class="edu.scripps.pms.util.ByteArrayConverter" name="long unsignedIntToLong(byte[])" map="A"/>
  <method class="edu.scripps.pms.util.ByteArrayConverter" name="int unsignedShortToInt(byte[])" map="B"/>
  <method class="edu.scripps.pms.util.ByteArrayConverter" name="int getInt(byte[], int)" map="A"/>
  <method class="edu.scripps.pms.util.ByteArrayConverter" name="int getUnsignedShort(byte[], int)" map="B"/>
  <class name="edu.scripps.pms.util.StringUtil" map="G"/>
  <method class="edu.scripps.pms.util.StringUtil" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.StringUtil" name="java.lang.String splitWithReturn(java.lang.String, int, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.StringUtil" name="java.lang.String getRandomString(int)" map="A"/>
  <method class="edu.scripps.pms.util.StringUtil" name="java.lang.String trimAccession(java.lang.String, int)" map="A"/>
  <method class="edu.scripps.pms.util.StringUtil" name="java.lang.String trimString(java.lang.String, int)" map="B"/>
  <class name="edu.scripps.pms.util.Mzxml2Ms" map="H"/>
  <field class="edu.scripps.pms.util.Mzxml2Ms" name="USAGE" map="A"/>
  <method class="edu.scripps.pms.util.Mzxml2Ms" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.util.Mzxml2Ms" name="void converMzXML2MS2(java.lang.String, edu.scripps.pms.census.ChroProgressDialog)" map="A"/>
  <method class="edu.scripps.pms.util.Mzxml2Ms" name="java.util.ArrayList getFiles(java.lang.String, java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.Mzxml2Ms" name="void converMzXML2MS2(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.util.Mzxml2Ms" name="void converMzXML2MS(java.lang.String, edu.scripps.pms.census.ChroProgressDialog)" map="B"/>
  <method class="edu.scripps.pms.util.Mzxml2Ms" name="void converMzXML2MS(java.lang.String)" map="B"/>
  <class name="edu.scripps.pms.util.PmsUtil" map="I"/>
  <method class="edu.scripps.pms.util.PmsUtil" name="float PercentPositive(float, float)" map="A"/>
  <method class="edu.scripps.pms.util.PmsUtil" name="float ChargeAtPH(float, int, int, int, int, int, int, int)" map="A"/>
  <method class="edu.scripps.pms.util.PmsUtil" name="float RoundTo(float, int)" map="A"/>
  <method class="edu.scripps.pms.util.PmsUtil" name="float PercentNegative(float, float)" map="B"/>
  <method class="edu.scripps.pms.util.PmsUtil" name="float calcPi(java.lang.String)" map="A"/>
  <class name="edu.scripps.pms.util.SpectrumIndexBuilder" map="J"/>
  <method class="edu.scripps.pms.util.SpectrumIndexBuilder" name="void main(java.lang.String[])" map="A"/>
  <class name="edu.scripps.pms.util.FileFilterUtil$4" map="4"/>
  <field class="edu.scripps.pms.util.FileFilterUtil$4" name="val$fileName" map="A"/>
  <method class="edu.scripps.pms.util.FileFilterUtil$4" name="boolean accept(java.io.File)" map="accept"/>
  <class name="edu.scripps.pms.util.FileFilterUtil$3" map="3"/>
  <method class="edu.scripps.pms.util.FileFilterUtil$3" name="boolean accept(java.io.File)" map="accept"/>
  <class name="edu.scripps.pms.util.FileFilterUtil$2" map="2"/>
  <method class="edu.scripps.pms.util.FileFilterUtil$2" name="boolean accept(java.io.File)" map="accept"/>
  <class name="edu.scripps.pms.util.FileFilterUtil$1" map="1"/>
  <method class="edu.scripps.pms.util.FileFilterUtil$1" name="boolean accept(java.io.File)" map="accept"/>
  <class name="edu.scripps.pms.util.FileFilterUtil" map="K"/>
  <method class="edu.scripps.pms.util.FileFilterUtil" name="java.io.FileFilter getSQTFilter()" map="A"/>
  <method class="edu.scripps.pms.util.FileFilterUtil" name="java.io.FileFilter getDirectoryFilter()" map="B"/>
  <method class="edu.scripps.pms.util.FileFilterUtil" name="java.io.FileFilter getFileFilter()" map="C"/>
  <method class="edu.scripps.pms.util.FileFilterUtil" name="java.io.FileFilter getExactFileFilter(java.lang.String)" map="A"/>
  <package name="edu.scripps.pms.pepsniffer" map="B"/>
  <class name="edu.scripps.pms.pepsniffer.PepSniffer" map="A"/>
  <method class="edu.scripps.pms.pepsniffer.PepSniffer" name="void main(java.lang.String[])" map="A"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="indexFile" map="A"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="FULL_SCAN" map="B"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="mzreader" map="C"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="lastScanNum" map="D"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="rtScanNumMap" map="E"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="file" map="F"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="rtArr" map="G"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="fileName" map="H"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="rtPosMap" map="I"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="startScanNum" map="J"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="precursorMap" map="K"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="builder" map="L"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="index" map="M"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="conf" map="N"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="rtPrecursorMap" map="O"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="keyIntArr" map="P"/>
  <field class="edu.scripps.pms.census.hash.IndexedFile" name="keys" map="Q"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void createScanNum()" map="A"/>
  <method class="edu.scripps.pms.census.hash.IndexedFile" name="void readIndexFile()" map="B"/>
  <field class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="MSZM" map="A"/>
  <field class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="filePath" map="B"/>
  <field class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="MS2_FILE" map="C"/>
  <field class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="n" map="D"/>
  <field class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="MS1_FILE" map="E"/>
  <method class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="void printError()" map="A"/>
  <method class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="void createMS2IndexFile(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.census.hash.MSIndexFileCreator" name="void createMS1IndexFile(java.lang.String)" map="B"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="rtScanNumMap" map="A"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="rtPosMap" map="B"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="posMap" map="C"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="indexedFile" map="D"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="rtPrecursorMap" map="E"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="precursorMap" map="F"/>
  <field class="edu.scripps.pms.census.hash.MSIndexBuilder" name="fileName" map="G"/>
  <field class="edu.scripps.pms.census.util.RelExFileFilter" name="format" map="A"/>
  <class name="edu.scripps.pms.census.util.CalcUtil$1" map="1"/>
  <class name="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" map="_A"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="mzxmlreader" map="A"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="msmsSpecificMassList" map="B"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="samEndMass" map="C"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="refEndMass" map="D"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="steepArea" map="E"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="index" map="F"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="result" map="G"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="diff" map="H"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="samStartMass" map="I"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="keys" map="J"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="bioSample" map="K"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="yioSample" map="L"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="refStartMass" map="M"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="refIsoArr" map="N"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="yioRef" map="O"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="samIsoArr" map="P"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="bioRef" map="Q"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="file" map="R"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="iFile" map="S"/>
  <field class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="highRes" map="T"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setSteepArea(int)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setHighRes(boolean)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="int getDiff()" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setIFile(edu.scripps.pms.census.hash.IndexedFile)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double getRefEndMass()" map="B"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setSamStartMass(double)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setYioRef(double[][])" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setRefEndMass(double)" map="B"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="java.io.RandomAccessFile getFile()" map="C"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setBioSample(double[][])" map="B"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double[] getSamIsoArr()" map="D"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setYioSample(double[][])" map="C"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setKeys(int[])" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="edu.scripps.pms.census.hash.IndexedFile getIFile()" map="E"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="java.lang.Object getGenericIndexFile(edu.scripps.pms.census.conf.Configuration)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setFile(java.io.RandomAccessFile)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setMzxmlreader(edu.scripps.pms.util.io.MzxmlSpectrumReader)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double[][] getYioSample()" map="F"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setSamIsoArr(double[])" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="int getSteepArea()" map="G"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="java.util.List getMsmsSpecificMassList()" map="H"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setRefStartMass(double)" map="C"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double getSamStartMass()" map="I"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double[][] getBioRef()" map="J"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setDiff(int)" map="B"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double[][] getYioRef()" map="K"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double[][] getBioSample()" map="L"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double getSamEndMass()" map="M"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="int[] getKeys()" map="N"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double[] getRefIsoArr()" map="O"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="boolean isHighRes()" map="P"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setRefIsoArr(double[])" map="B"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="java.lang.String getResult()" map="Q"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setBioRef(double[][])" map="D"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="gnu.trove.TIntLongHashMap getIndex()" map="R"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="edu.scripps.pms.util.io.MzxmlSpectrumReader getMzxmlreader()" map="S"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setResult(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setMsmsSpecificMassList(java.util.List)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setSamEndMass(double)" map="D"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="double getRefStartMass()" map="T"/>
  <method class="edu.scripps.pms.census.util.CalcUtil$SpectrumModel" name="void setIndex(gnu.trove.TIntLongHashMap)" map="A"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="MOVE_RIGHT" map="A"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="massTolerance" map="B"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="intArr" map="C"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="pathFileName" map="D"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="MOVE_LEFT" map="E"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="conf" map="F"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="ION_START_INDEX" map="G"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="SPACE" map="H"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="steepRatioThreshold" map="I"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="CARRIAGE_RETURN" map="J"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="samplePrecursor" map="K"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="pathArray" map="L"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="hasChargeCol" map="M"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="WINDOW_CR" map="N"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="DOT" map="O"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="massArr" map="P"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="align" map="Q"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="formatter" map="R"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="refPrecursor" map="S"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="precursorMap" map="T"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="chargeState" map="U"/>
  <field class="edu.scripps.pms.census.util.CalcUtil" name="ht" map="V"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="double[] getRegressArr(long[][], int, int, int)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String buildDIResult(int, int, int, int, double[][], int)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String buildNLResult(int, int, int, int, double[][], int, int)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String buildMRMResult(int, int, int, int, double[][], int)" map="B"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String buildNLResult(int, int, int, int, double[][], int)" map="C"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String buildMsmsSpecificResult(int, int, int, int, double[][], java.util.List)" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="java.lang.String buildDDResult(int, int, int, int, double[][])" map="A"/>
  <method class="edu.scripps.pms.census.util.CalcUtil" name="void buildSpec(int, int, byte[], int)" map="A"/>
  <field class="edu.scripps.pms.census.util.DataIndependentPeakFinder" name="endIndex" map="A"/>
  <field class="edu.scripps.pms.census.util.DataIndependentPeakFinder" name="startIndex" map="B"/>
  <class name="edu.scripps.pms.census.util.SpecCountUtil$ProteinSp" map="_A"/>
  <field class="edu.scripps.pms.census.util.SpecCountUtil$ProteinSp" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.util.SpecCountUtil$ProteinSp" name="accession" map="B"/>
  <field class="edu.scripps.pms.census.util.SpecCountUtil$ProteinSp" name="spArr" map="C"/>
  <method class="edu.scripps.pms.census.util.SpecCountUtil$ProteinSp" name="int getTotalSpecC()" map="A"/>
  <method class="edu.scripps.pms.census.util.SpecCountUtil$ProteinSp" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <field class="edu.scripps.pms.census.util.SpecCountUtil" name="fList" map="A"/>
  <field class="edu.scripps.pms.census.util.SpecCountUtil" name="outFileName" map="B"/>
  <field class="edu.scripps.pms.census.util.SimpleFileNameFilter" name="extensions" map="A"/>
  <field class="edu.scripps.pms.census.util.SimpleFileNameFilter" name="description" map="B"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="yAve" map="A"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="bestShift" map="B"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="shift" map="C"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="xArr" map="D"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="areaRatio" map="E"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="xAve" map="F"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="endIndex" map="G"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="slope" map="H"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="corr" map="I"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="intercept" map="J"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="startIndex" map="K"/>
  <field class="edu.scripps.pms.census.util.LinearRegression" name="yArr" map="L"/>
  <method class="edu.scripps.pms.census.util.LinearRegression" name="void calc()" map="A"/>
  <field class="edu.scripps.pms.census.util.DataDependentPeakFinder" name="keyIndex" map="C"/>
  <field class="edu.scripps.pms.census.util.DataDependentPeakFinder" name="steepRatioThreshold" map="D"/>
  <field class="edu.scripps.pms.census.util.PostCalculation" name="size" map="A"/>
  <field class="edu.scripps.pms.census.util.PostCalculation" name="scanNum" map="B"/>
  <field class="edu.scripps.pms.census.util.PostCalculation" name="samInt" map="C"/>
  <field class="edu.scripps.pms.census.util.PostCalculation" name="refInt" map="D"/>
  <field class="edu.scripps.pms.census.util.PostCalculation" name="peptide" map="E"/>
  <class name="edu.scripps.pms.census.util.ReportGenerator$1$1" map="1"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.util.ReportGenerator$1$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.util.ReportGenerator$1" map="1"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1" name="val$massMonitorList" map="A"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1" name="val$file" map="B"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1" name="errorMessage" map="C"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1" name="val$cr" map="D"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1" name="isSuccessful" map="E"/>
  <field class="edu.scripps.pms.census.util.ReportGenerator$1" name="p" map="F"/>
  <method class="edu.scripps.pms.census.util.ReportGenerator$1" name="void run()" map="run"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="yAve" map="A"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="bestShift" map="B"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="shift" map="C"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="xArr" map="D"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="areaRatio" map="E"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="xAve" map="F"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="endIndex" map="G"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="slope" map="H"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="corr" map="I"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="intercept" map="J"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="startIndex" map="K"/>
  <field class="edu.scripps.pms.census.util.LinearRegressionDouble" name="yArr" map="L"/>
  <method class="edu.scripps.pms.census.util.LinearRegressionDouble" name="void calc()" map="A"/>
  <field class="edu.scripps.pms.census.util.GenericPeakFinder" name="samArr" map="E"/>
  <field class="edu.scripps.pms.census.util.GenericPeakFinder" name="refArr" map="F"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="masslist" map="A"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="enrichment" map="B"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="modShift" map="C"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="c13" map="D"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="ISODIST_THRESHOLD" map="E"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="element" map="F"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="startMass" map="G"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="N15" map="H"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="DIST_SIZE" map="I"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="H2" map="J"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="npeak" map="K"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="avgMass" map="L"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="abund" map="M"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="endMass" map="N"/>
  <field class="edu.scripps.pms.census.util.IsotopeDist" name="relabun" map="O"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="void calculateLight()" map="A"/>
  <method class="edu.scripps.pms.census.util.IsotopeDist" name="void calculateHeavy()" map="B"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideGroup" name="peptideList" map="A"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter" name="rt" map="A"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel$Daughter" name="mass" map="B"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="yionArr" map="d"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="snTolerance" map="e"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="name" map="f"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="keyIndex" map="g"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="sequence" map="h"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="labeled" map="i"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="fileName" map="j"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="bionArr" map="k"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="startRt" map="l"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="desc" map="m"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="rtTolerance" map="n"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="parentMass" map="o"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="startScan" map="p"/>
  <field class="edu.scripps.pms.census.model.mrm.MRMPeptideModel" name="daughters" map="q"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="removeNegative" map="A"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="pValue" map="B"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="pValueSelect" map="C"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="detValue" map="D"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="filterFragmentIons" map="E"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="uniquePeptide" map="F"/>
  <field class="edu.scripps.pms.census.model.FilterModel" name="detSelect" map="G"/>
  <field class="edu.scripps.pms.census.model.SelectFileModel" name="spectraFileName" map="A"/>
  <field class="edu.scripps.pms.census.model.SelectFileModel" name="sampleName" map="B"/>
  <field class="edu.scripps.pms.census.model.IrisDataModel" name="intensity" map="A"/>
  <field class="edu.scripps.pms.census.model.IrisDataModel" name="mass" map="B"/>
  <field class="edu.scripps.pms.census.model.SpecRange" name="max" map="A"/>
  <field class="edu.scripps.pms.census.model.SpecRange" name="min" map="B"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="halfBandWidth" map="A"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="pathIndex" map="B"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="x" map="C"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="j" map="D"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="cumScore" map="E"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="localScore" map="F"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="i" map="G"/>
  <field class="edu.scripps.pms.census.model.AlignNode" name="y" map="H"/>
  <field class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="totalIntArr" map="_"/>
  <field class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="scanArr" map="a"/>
  <field class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="yList" map="b"/>
  <field class="edu.scripps.pms.census.model.ChroNonLabelMSMSData" name="bList" map="c"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="ysIntensity" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="scanNum" map="B"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="bsEndMass" map="C"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="ysEndMass" map="D"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="bsIntensityString" map="E"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="totalIsoPeaksRef" map="F"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="totalIsoPeaksSam" map="G"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="sampleIntensity" map="H"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="bsStartMass" map="I"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="brIntensity" map="J"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="massToleranceLight" map="K"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="refIntensity" map="L"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="ysIntensityString" map="M"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="ysStartMass" map="N"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="yrIntensity" map="O"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="yrIntensityString" map="P"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="foundIsoPeaksRef" map="Q"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="massToleranceHeavy" map="R"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="bsIntensity" map="S"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="foundIsoPeaksSam" map="T"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="brIntensityString" map="U"/>
  <field class="edu.scripps.pms.census.model.ChroData" name="intensityArr" map="V"/>
  <method class="edu.scripps.pms.census.model.ChroData" name="long[] parseIntensity(java.lang.String)" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="intensityArr" map="W"/>
  <field class="edu.scripps.pms.census.model.ChroiTRAQLabelData" name="scanNum" map="X"/>
  <field class="edu.scripps.pms.census.model.SampleModel" name="sampleName" map="A"/>
  <field class="edu.scripps.pms.census.model.SampleModel" name="pathSet" map="B"/>
  <class name="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel$PeptideArray" map="_A"/>
  <field class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel$PeptideArray" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel$PeptideArray" name="peptideArr" map="B"/>
  <method class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel$PeptideArray" name="void setPeptideArr(java.util.List)" map="A"/>
  <method class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel$PeptideArray" name="java.util.List getPeptideArr()" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel" name="proteinList" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroLabelfreeMergeProteinModel" name="peptideList" map="B"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="zscore" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="startRange" map="B"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="unique" map="C"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="lightMass" map="D"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="fragIonNumFoundRatio" map="E"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="averageIntensity" map="F"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="spRank" map="G"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="massTolerance" map="H"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="formatter" map="I"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="massMonitorArr" map="J"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="deltCN" map="K"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="chargeState" map="L"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="totalIntArr" map="M"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="anCompositeScore" map="N"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="spectraDataPoints" map="O"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="dtaEndRange" map="P"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="dtaStartRange" map="Q"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="tmpStr" map="R"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="scoreHt" map="S"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="corr" map="T"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="slope" map="U"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="xCorr" map="V"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="filterOut" map="W"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="strArr" map="X"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="fileName" map="Y"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="chroCenter" map="Z"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="snRatio" map="_"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="yionSample" map="a"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="scanNum" map="b"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="totalIntensity" map="c"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="outlierPValue" map="d"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="refIntensity" map="e"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="bionRef" map="f"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="dataList" map="g"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="specCount" map="h"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="probability" map="i"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="calcMHplus" map="j"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="redundancy" map="k"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="mhPlus" map="l"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="ionProportion" map="m"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="yionRef" map="n"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="endRange" map="o"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="ratio" map="p"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="bionSample" map="q"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="conf" map="r"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="corrToNorm" map="s"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="samIntensity" map="t"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="heavyMass" map="u"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="sequence" map="v"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="spScore" map="w"/>
  <field class="edu.scripps.pms.census.model.ChroPeptide" name="peptideLine" map="x"/>
  <method class="edu.scripps.pms.census.model.ChroPeptide" name="void parseLine()" map="A"/>
  <field class="edu.scripps.pms.census.model.BestFragIon" name="sArr" map="A"/>
  <field class="edu.scripps.pms.census.model.BestFragIon" name="index" map="B"/>
  <field class="edu.scripps.pms.census.model.BestFragIon" name="rArr" map="C"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="ms2ms1Ht" map="A"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="ms2KeyArr" map="B"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="fileNameHt" map="C"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="pathArray" map="D"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="pathFileNameList" map="E"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="ms1ms2Ht" map="F"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="refIndex" map="G"/>
  <field class="edu.scripps.pms.census.model.NonLabelMappingModel" name="ms1KeyArr" map="H"/>
  <method class="edu.scripps.pms.census.model.NonLabelMappingModel" name="void init()" map="A"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="areaRatio" map="A"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="sequence" map="B"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="filterOut" map="C"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="fileName" map="D"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="unique" map="E"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="uniqueIdentifier" map="F"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="samIntensity" map="G"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="this$0" map="H"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="probability" map="I"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="ratio" map="J"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="profileScore" map="K"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="refIntensity" map="L"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="regFactor" map="M"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel$Peptide" name="peptideLine" map="N"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="totalRatio" map="A"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="pepList" map="B"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="proList" map="C"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="proteinNames" map="D"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="descList" map="E"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="proteinDescHt" map="F"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="totalSpecCount" map="G"/>
  <field class="edu.scripps.pms.census.model.MergeProteinModel" name="peptideSeqFileNames" map="H"/>
  <method class="edu.scripps.pms.census.model.MergeProteinModel" name="boolean mergeCheck(java.util.List, java.util.Set, java.util.Hashtable)" map="A"/>
  <field class="edu.scripps.pms.census.model.FragIonList" name="bestIndex" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="seqCoverage" map="A"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="seqCount" map="B"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="length" map="C"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="validation" map="D"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="redundant" map="E"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="spectrumCount" map="F"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="proteinLine" map="G"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="locus" map="H"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="peptideList" map="I"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="molWt" map="J"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="description" map="K"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="pI" map="L"/>
  <field class="edu.scripps.pms.census.model.ChroProtein" name="strArr" map="M"/>
  <method class="edu.scripps.pms.census.model.ChroProtein" name="void init(java.lang.String[])" map="A"/>
  <field class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="totalRatio" map="A"/>
  <field class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="ratioList" map="B"/>
  <field class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="stdevList" map="C"/>
  <field class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="totalIntensity" map="D"/>
  <field class="edu.scripps.pms.census.model.WeightedProtein$ProteinModel" name="intAvgList" map="E"/>
  <field class="edu.scripps.pms.census.model.WeightedProtein" name="ht" map="A"/>
  <field class="edu.scripps.pms.census.model.Spectrum" name="massList" map="A"/>
  <field class="edu.scripps.pms.census.model.Spectrum" name="mw" map="B"/>
  <field class="edu.scripps.pms.census.model.ChroNonLabelData" name="scanNumArr" map="Y"/>
  <field class="edu.scripps.pms.census.model.ChroNonLabelData" name="intensityArr" map="Z"/>
  <field class="edu.scripps.pms.census.model.FragIon" name="regScore" map="A"/>
  <field class="edu.scripps.pms.census.model.FragIon" name="sArr" map="B"/>
  <field class="edu.scripps.pms.census.model.FragIon" name="isBion" map="C"/>
  <field class="edu.scripps.pms.census.model.FragIon" name="index" map="D"/>
  <field class="edu.scripps.pms.census.model.FragIon" name="rArr" map="E"/>
  <field class="edu.scripps.pms.census.tools.Formatter" name="format" map="A"/>
  <class name="edu.scripps.pms.census.plot.SimplePlot$1" map="1"/>
  <field class="edu.scripps.pms.census.plot.SimplePlot$1" name="val$path" map="A"/>
  <method class="edu.scripps.pms.census.plot.SimplePlot$1" name="void run()" map="run"/>
  <field class="edu.scripps.pms.census.plot.SimplePlot" name="jPanel3" map="A"/>
  <field class="edu.scripps.pms.census.plot.SimplePlot" name="jPanel2" map="B"/>
  <field class="edu.scripps.pms.census.plot.SimplePlot" name="jPanel1" map="C"/>
  <method class="edu.scripps.pms.census.plot.SimplePlot" name="void initComponents()" map="A"/>
  <field class="edu.scripps.pms.census.plot.DataIndependentPlot" name="regression" map="&#x00c6;"/>
  <class name="edu.scripps.pms.census.plot.HeatMap$1" map="1"/>
  <method class="edu.scripps.pms.census.plot.HeatMap$1" name="void run()" map="run"/>
  <method class="edu.scripps.pms.census.plot.HeatMap" name="void initComponents()" map="A"/>
  <field class="edu.scripps.pms.census.plot.AlignPlot" name="jPanel3" map="A"/>
  <field class="edu.scripps.pms.census.plot.AlignPlot" name="jSplitPane2" map="B"/>
  <field class="edu.scripps.pms.census.plot.AlignPlot" name="jPanel2" map="C"/>
  <field class="edu.scripps.pms.census.plot.AlignPlot" name="jSplitPane1" map="D"/>
  <field class="edu.scripps.pms.census.plot.AlignPlot" name="jPanel1" map="E"/>
  <method class="edu.scripps.pms.census.plot.AlignPlot" name="void initComponents()" map="A"/>
  <field class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" name="runIt" map="B"/>
  <field class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" name="start" map="C"/>
  <field class="edu.scripps.pms.census.plot.AlignHeatmap$myPan" name="fileName" map="D"/>
  <field class="edu.scripps.pms.census.plot.AlignHeatmap" name="pan" map="A"/>
  <field class="edu.scripps.pms.census.plot.SigNoisePlot" name="height" map="A"/>
  <field class="edu.scripps.pms.census.plot.SigNoisePlot" name="ionList" map="B"/>
  <field class="edu.scripps.pms.census.plot.SigNoisePlot" name="width" map="C"/>
  <field class="edu.scripps.pms.census.plot.SigNoisePlot" name="thresholdIndex" map="D"/>
  <field class="edu.scripps.pms.census.plot.QualFragPlot" name="dtaStartRange" map="&#x00ba;"/>
  <field class="edu.scripps.pms.census.plot.QualFragPlot" name="xcorr" map="&#x00c0;"/>
  <field class="edu.scripps.pms.census.plot.QualFragPlot" name="dtaEndRange" map="&#x00c1;"/>
  <field class="edu.scripps.pms.census.plot.BaseChroPlot" name="dtaStartRange" map="&#x00c2;"/>
  <field class="edu.scripps.pms.census.plot.BaseChroPlot" name="mainFrame" map="&#x00c3;"/>
  <field class="edu.scripps.pms.census.plot.BaseChroPlot" name="xcorr" map="&#x00c4;"/>
  <field class="edu.scripps.pms.census.plot.BaseChroPlot" name="dtaEndRange" map="&#x00c5;"/>
  <field class="edu.scripps.pms.census.plot.HeatmapUtil" name="RED" map="A"/>
  <field class="edu.scripps.pms.census.plot.HeatmapUtil" name="GREEN" map="B"/>
  <field class="edu.scripps.pms.census.plot.IrisPlot" name="dtaStartRange" map="&#x00c7;"/>
  <field class="edu.scripps.pms.census.plot.IrisPlot" name="xcorr" map="&#x00c8;"/>
  <field class="edu.scripps.pms.census.plot.IrisPlot" name="dtaEndRange" map="&#x00c9;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="slope" map="&#x00ca;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="shift" map="&#x00cb;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="endIndex" map="&#x00cc;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="arrY" map="&#x00cd;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="intercept" map="&#x00ce;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="arrX" map="&#x00cf;"/>
  <field class="edu.scripps.pms.census.plot.CorrelationPlot" name="startIndex" map="&#x00d0;"/>
  <method class="edu.scripps.pms.census.plot.CorrelationPlot" name="void _drawPlotPoint(java.awt.Graphics)" map="A"/>
  <method class="edu.scripps.pms.census.plot.CorrelationPlot" name="void corrInit()" map="O"/>
  <field class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="x" map="B"/>
  <field class="edu.scripps.pms.census.plot.PeptideDistPlot$Data" name="y" map="C"/>
  <field class="edu.scripps.pms.census.plot.PeptideDistPlot" name="arrayList" map="&#x00d1;"/>
  <field class="edu.scripps.pms.census.plot.PeptideDistPlot" name="mainFrame" map="&#x00d2;"/>
  <field class="edu.scripps.pms.census.plot.FragIonPlot" name="ionName" map="A"/>
  <field class="edu.scripps.pms.census.plot.FragIonPlot" name="sArr" map="B"/>
  <field class="edu.scripps.pms.census.plot.FragIonPlot" name="rArr" map="C"/>
  <field class="edu.scripps.pms.census.plot.FragIonPlot" name="endIndex" map="D"/>
  <field class="edu.scripps.pms.census.plot.FragIonPlot" name="isQualityIon" map="E"/>
  <field class="edu.scripps.pms.census.plot.FragIonPlot" name="startIndex" map="F"/>
  <method class="edu.scripps.pms.census.plot.FragIonPlot" name="void initComponents()" map="A"/>
  <field class="edu.scripps.pms.census.chroalign.AlignPeak" name="intensity" map="A"/>
  <field class="edu.scripps.pms.census.chroalign.AlignPeak" name="mz" map="B"/>
  <field class="edu.scripps.pms.census.chroalign.AlignPeak" name="refSpectrum" map="C"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="indexArr" map="A"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="retArray" map="B"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="targetMS1Files" map="C"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="progress" map="D"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="BOUNCEFACTOR" map="E"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="binSpectra" map="F"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="referenceMS1File" map="G"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="percentDone" map="H"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="diaArray" map="I"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="pathArray" map="J"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="fileNumber" map="K"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="useBasePeak" map="L"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="masterfile" map="M"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="dataarray" map="N"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="scanArr" map="O"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="htArr" map="P"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="alignNumber" map="Q"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="mappingArr" map="R"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="workFolder" map="S"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="info" map="T"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="chroProgress" map="U"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="filenames" map="V"/>
  <field class="edu.scripps.pms.census.chroalign.chroalign" name="bandConstraint" map="W"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="org.jdom.Element createXmlChroHeader()" map="A"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="float[] binSpectrum(java.util.Iterator, double, double, int, int)" map="A"/>
  <method class="edu.scripps.pms.census.chroalign.chroalign" name="org.jdom.Element createXmlPlotHeader()" map="B"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="endRange" map="A"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="precursorList" map="B"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="arr" map="C"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="massDiff" map="D"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="lastPrecur" map="E"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="startRange" map="F"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="ht" map="G"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="isoWin" map="H"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="numIsoWindows" map="I"/>
  <field class="edu.scripps.pms.census.junit.IndexTestCase" name="path" map="J"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="endRange" map="A"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="precursorList" map="B"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="arr" map="C"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="massDiff" map="D"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="lastPrecur" map="E"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="startRange" map="F"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="ht" map="G"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="isoWin" map="H"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="numIsoWindows" map="I"/>
  <field class="edu.scripps.pms.census.junit.IndexTest" name="path" map="J"/>
  <field class="edu.scripps.pms.census.conf.PostOptions" name="bestFragIonTolerance" map="A"/>
  <field class="edu.scripps.pms.census.conf.PostOptions" name="detFactorCheck" map="B"/>
  <field class="edu.scripps.pms.census.conf.PostOptions" name="options" map="C"/>
  <field class="edu.scripps.pms.census.conf.PostOptions" name="detFactorValue" map="D"/>
  <field class="edu.scripps.pms.census.conf.PostOptions" name="filterFragmentIons" map="E"/>
  <field class="edu.scripps.pms.census.conf.PostOptions" name="displayFragmentIons" map="F"/>
  <class name="edu.scripps.pms.census.conf.Configuration$ParamTable" map="_A"/>
  <field class="edu.scripps.pms.census.conf.Configuration$ParamTable" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.conf.Configuration$ParamTable" name="void addParamLine(java.lang.String)" map="A"/>
  <field class="edu.scripps.pms.census.conf.Configuration$Sample" name="msFileList" map="A"/>
  <field class="edu.scripps.pms.census.conf.Configuration$Sample" name="name" map="B"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="isLabeling" map="A"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="steepRatioThreshold" map="B"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="isSimpleIndexGenerator" map="C"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="quantLevel" map="D"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="nonlabelFilenameList" map="E"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="xmlConf" map="F"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="massRange" map="G"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="isHighRes" map="H"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="fileList" map="I"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="msmsMassArr" map="J"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="isDataIndependent" map="K"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="massTolerance" map="L"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="spHt" map="M"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="startTime" map="N"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="mapModel" map="O"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="version" map="P"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="msmsSpectrumNum" map="Q"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="colNum" map="R"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="spectrumFormat" map="S"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="sampleList" map="T"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="filePath" map="U"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="startMassRange" map="V"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="resolution" map="W"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="timerFormat" map="X"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="specCountNormal" map="Y"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="enrichment" map="Z"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="ht" map="_"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="scoreList" map="a"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="precursorList" map="b"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="nonlabelFilePaths" map="c"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="useProline" map="d"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="numOfIsolationWindow" map="e"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="numFileSize" map="f"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="retArr" map="g"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="endMassRange" map="h"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="refFileName" map="i"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="conf" map="j"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="precursorArr" map="k"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="errorMessage" map="l"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="outlierPValue" map="m"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="mzXMLFilePath" map="n"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="progressDialog" map="o"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="scoreType" map="p"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="basedOnId" map="q"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="msmsFragType" map="r"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="maxSpectrumShift" map="s"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="windowArr" map="t"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="extMethod" map="u"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="margin" map="v"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="databaseFile" map="w"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="maxWindow" map="x"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="calcSamAvgMass" map="y"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="mrmPeptideGroupList" map="z"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="steepArea" map="&#x00a2;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="rootConfEle" map="&#x00a3;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="chargeColumn" map="&#x00a4;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="isolationWindow" map="&#x00a5;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="calcRefAvgMass" map="&#x00aa;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="align" map="&#x00b5;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="mrmPeptideSize" map="&#x00ba;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="idFileName" map="&#x00c0;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="expList" map="&#x00c1;"/>
  <field class="edu.scripps.pms.census.conf.Configuration" name="msmsSpecificTolerance" map="&#x00c2;"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void setNumOfIsolationWindow(int)" map="A"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="edu.scripps.pms.census.conf.Configuration$ParamTable access$000(edu.scripps.pms.census.conf.Configuration)" map="A"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="void haveChargeStateColumn(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.census.conf.Configuration" name="java.util.ArrayList readHlines()" map="A"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="sampleName" map="A"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="intensityArr" map="B"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="normalizedSpecC" map="C"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader$Sample" name="expList" map="D"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="sampleList" map="A"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="lastLine" map="B"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="sampleObjList" map="C"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="sampleExpList" map="D"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="rootEle" map="E"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="labeled" map="F"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="conf" map="G"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="fileSampleHt" map="H"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="builder" map="I"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="expType" map="J"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="fileList" map="K"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="list" map="L"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="isDataDependent" map="M"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="file" map="N"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="quantLevel" map="O"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="br" map="P"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="fileName" map="Q"/>
  <field class="edu.scripps.pms.census.io.ChroXmlReader" name="data" map="R"/>
  <method class="edu.scripps.pms.census.io.ChroXmlReader" name="void init()" map="A"/>
  <field class="edu.scripps.pms.census.io.CenSusReportReader" name="totalPeptideCount" map="A"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="CARRIAGE_RETURN" map="A"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="pepLocation" map="B"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="fileName" map="C"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="isVersion2" map="D"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="XCORR_THRESHOLD_4" map="E"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="XCORR_THRESHOLD_3" map="F"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="XCORR_THRESHOLD_2" map="G"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="confidence" map="H"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="XCORR_THRESHOLD_1" map="I"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="ht" map="J"/>
  <field class="edu.scripps.pms.census.io.SpecRangeGenerator" name="br" map="K"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="chemArr" map="A"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="isotope" map="B"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="br" map="C"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="ISOTOPE_SIZE" map="D"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="rootEle" map="E"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="DEFAULT_ELE_COMP" map="F"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="aaHt" map="G"/>
  <field class="edu.scripps.pms.census.io.IsotopeReader" name="AA" map="H"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="void init()" map="A"/>
  <method class="edu.scripps.pms.census.io.IsotopeReader" name="void initXml()" map="B"/>
  <class name="edu.scripps.pms.census.io.ChroReader$1" map="1"/>
  <field class="edu.scripps.pms.census.io.ChroReader$1" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.io.ChroReader$1" name="protein" map="B"/>
  <field class="edu.scripps.pms.census.io.ChroReader$1" name="peptide" map="C"/>
  <method class="edu.scripps.pms.census.io.ChroReader$1" name="boolean hasNext()" map="hasNext"/>
  <method class="edu.scripps.pms.census.io.ChroReader$1" name="edu.scripps.pms.census.model.ChroProtein getProtein()" map="A"/>
  <method class="edu.scripps.pms.census.io.ChroReader$1" name="void remove()" map="remove"/>
  <method class="edu.scripps.pms.census.io.ChroReader$1" name="edu.scripps.pms.census.model.ChroProtein next()" map="B"/>
  <method class="edu.scripps.pms.census.io.ChroReader$1" name="java.lang.Object next()" map="next"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$6$1" map="1"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$6$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$6" map="6"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="val$spectrumFolder" map="B"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="val$dtaFile" map="C"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="val$chroProgress" map="D"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="val$configFile" map="E"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="val$parentFrame" map="F"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="isSuccessful" map="G"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$6" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$5" map="5"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$5" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$4" map="4"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.dialog.OpenConfigDialog$7" map="7"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$7" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog$7" name="isSuccessful" map="B"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog$7" name="void run()" map="run"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="spectralFormatGrp" map="A"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="idFileField" map="B"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="convertBar" map="C"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="spectrumBtn" map="D"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="mFrame" map="E"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="currentFolder" map="F"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="ifFieldBtn" map="G"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="spectrumField" map="H"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="confFileBtn" map="I"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="conf" map="J"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="okBtn" map="K"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="cancelBtn" map="L"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="jLabel4" map="M"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="jLabel3" map="N"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="jLabel2" map="O"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="jLabel1" map="P"/>
  <field class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="configField" map="Q"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void access$200(edu.scripps.pms.census.dialog.OpenConfigDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void confFileBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void access$000(edu.scripps.pms.census.dialog.OpenConfigDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void test()" map="B"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void okBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void access$300(edu.scripps.pms.census.dialog.OpenConfigDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void access$100(edu.scripps.pms.census.dialog.OpenConfigDialog, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void ifFieldBtnActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="edu.scripps.pms.census.conf.Configuration access$502(edu.scripps.pms.census.dialog.OpenConfigDialog, edu.scripps.pms.census.conf.Configuration)" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void access$400(edu.scripps.pms.census.dialog.OpenConfigDialog, java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="edu.scripps.pms.census.conf.Configuration access$500(edu.scripps.pms.census.dialog.OpenConfigDialog)" map="A"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void spectrumBtnActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.dialog.OpenConfigDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <class name="edu.scripps.pms.census.OptionsDialog$4" map="4"/>
  <method class="edu.scripps.pms.census.OptionsDialog$4" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.OptionsDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.OptionsDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.OptionsDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.OptionsDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.OptionsDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.OptionsDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog$1" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="filterFragmentIons" map="A"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="mFrame" map="B"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="jPanel2" map="C"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="returnStatus" map="D"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="jPanel1" map="E"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="maxSpectrumShift" map="F"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="cancelButton" map="G"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="conf" map="H"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="detFactorCheck" map="I"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="buttonPanel" map="J"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="detFactor" map="K"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="mainOptionPanel" map="L"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="filterPanel" map="M"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="displayFragmentIons" map="N"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="jLabel2" map="O"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="jLabel1" map="P"/>
  <field class="edu.scripps.pms.census.OptionsDialog" name="okButton" map="Q"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void doClose(int)" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void cancelButtonActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void okButtonActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void access$100(edu.scripps.pms.census.OptionsDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void access$000(edu.scripps.pms.census.OptionsDialog, java.awt.event.WindowEvent)" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void closeDialog(java.awt.event.WindowEvent)" map="A"/>
  <method class="edu.scripps.pms.census.OptionsDialog" name="void access$200(edu.scripps.pms.census.OptionsDialog, java.awt.event.ActionEvent)" map="B"/>
  <class name="edu.scripps.pms.census.ChroProgressDialog$1" map="1"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog$1" name="void run()" map="run"/>
  <field class="edu.scripps.pms.census.ChroProgressDialog" name="scrollPane" map="A"/>
  <field class="edu.scripps.pms.census.ChroProgressDialog" name="textPane" map="B"/>
  <field class="edu.scripps.pms.census.ChroProgressDialog" name="extractLabel" map="C"/>
  <field class="edu.scripps.pms.census.ChroProgressDialog" name="progressBar" map="D"/>
  <field class="edu.scripps.pms.census.ChroProgressDialog" name="doc" map="E"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void initAdditional()" map="A"/>
  <method class="edu.scripps.pms.census.ChroProgressDialog" name="void initComponents()" map="B"/>
  <field class="edu.scripps.pms.census.Test" name="rightPValue" map="A"/>
  <field class="edu.scripps.pms.census.Test" name="twoPValue" map="B"/>
  <class name="edu.scripps.pms.census.ConfigDialog$1" map="1"/>
  <method class="edu.scripps.pms.census.ConfigDialog$1" name="void run()" map="run"/>
  <field class="edu.scripps.pms.census.ConfigDialog" name="mFrame" map="A"/>
  <method class="edu.scripps.pms.census.ConfigDialog" name="void initComponents()" map="A"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="refArr" map="A"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="start" map="B"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="length" map="C"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="modShift" map="D"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="quantifiable" map="E"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="peptide" map="F"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="isoTable" map="G"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="conf" map="H"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="sampleArr" map="I"/>
  <field class="edu.scripps.pms.census.ElementComposition" name="ISOTOPE_SIZE" map="J"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void sumRefElement(int[])" map="A"/>
  <method class="edu.scripps.pms.census.ElementComposition" name="void sumSampleElement(int[])" map="B"/>
  <field class="edu.scripps.pms.census.IrisPanel" name="jPanel1" map="A"/>
  <field class="edu.scripps.pms.census.IrisPanel" name="ht" map="B"/>
  <field class="edu.scripps.pms.census.IrisPanel" name="chroXmlParser" map="C"/>
  <field class="edu.scripps.pms.census.IrisPanel" name="peptide" map="D"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="void drawPlot()" map="A"/>
  <method class="edu.scripps.pms.census.IrisPanel" name="void initComponents()" map="B"/>
  <class name="edu.scripps.pms.census.QualificationPanel$3$1" map="1"/>
  <field class="edu.scripps.pms.census.QualificationPanel$3$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel$3$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.QualificationPanel$3" map="3"/>
  <field class="edu.scripps.pms.census.QualificationPanel$3" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.QualificationPanel$3" name="val$tempPeptide" map="B"/>
  <field class="edu.scripps.pms.census.QualificationPanel$3" name="val$progress" map="C"/>
  <method class="edu.scripps.pms.census.QualificationPanel$3" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.QualificationPanel$2" map="2"/>
  <field class="edu.scripps.pms.census.QualificationPanel$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel$2" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="edu.scripps.pms.census.QualificationPanel$1" map="1"/>
  <field class="edu.scripps.pms.census.QualificationPanel$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel$1" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="irisPlot" map="A"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="chroProtein" map="B"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="jTable1" map="C"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="currentDirectory" map="D"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="mFrame" map="E"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="currentPeptide" map="F"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="peptideTableModel" map="G"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="peptideScroll" map="H"/>
  <field class="edu.scripps.pms.census.QualificationPanel" name="ht" map="I"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void peptideListMouseClicked(java.awt.event.MouseEvent)" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="javax.swing.JFrame access$300(edu.scripps.pms.census.QualificationPanel)" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="edu.scripps.pms.census.plot.IrisPlot access$200(edu.scripps.pms.census.QualificationPanel)" map="B"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void access$000(edu.scripps.pms.census.QualificationPanel, java.awt.event.MouseEvent)" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="void drawIris(edu.scripps.pms.census.model.ChroPeptide)" map="A"/>
  <method class="edu.scripps.pms.census.QualificationPanel" name="java.util.Hashtable access$100(edu.scripps.pms.census.QualificationPanel)" map="C"/>
  <field class="edu.scripps.pms.census.ProgressMzxml2MS" name="container" map="A"/>
  <field class="edu.scripps.pms.census.ProgressMzxml2MS" name="progressDialog" map="B"/>
  <field class="edu.scripps.pms.census.ProgressMzxml2MS" name="path" map="C"/>
  <field class="edu.scripps.pms.census.NewBean" name="propertySupport" map="A"/>
  <field class="edu.scripps.pms.census.NewBean" name="sampleProperty" map="B"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" name="name" map="A"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$DataSetModel" name="listModel" map="B"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$9" map="9"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$9" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$9" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$8" map="8"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$8" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$7" map="7"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$7" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$6" map="6"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$6" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$5" map="5"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$5" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$4" map="4"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$10" map="10"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$10" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.LabelFreeConfDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog$1" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="remove1" map="A"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="mFrame" map="B"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="paramPanel" map="C"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="PROTEIN_COLUMNS" map="D"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="AA" map="E"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="atomTable" map="F"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel16" map="G"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel15" map="H"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel14" map="I"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="currentFolder" map="J"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel13" map="K"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel12" map="L"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="isoFieldUnit" map="M"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="cancelBtn" map="N"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="indivIsoRadio" map="O"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="wholeEnvRadio" map="P"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="massAccField" map="Q"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="isotopeLightElementModel" map="R"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="isoLabel" map="S"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="elePanel" map="T"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="alignUnitLabel" map="U"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="quanScanType" map="V"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="envMargin" map="W"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="peakAlignRadio" map="X"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel8" map="Y"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jLabel5" map="Z"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jPanel4" map="_"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="maxWinField" map="a"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jPanel3" map="b"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jPanel2" map="c"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jPanel1" map="d"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="dataSetList" map="e"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="fileSelectBtn" map="f"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="DEFAULT_CELL_DATA" map="g"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="setListModel" map="h"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="isoField" map="i"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="alignRadioGrp" map="j"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="bandLabel" map="k"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="saveBtn" map="l"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="bandConField" map="m"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jScrollPane3" map="n"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="retionAligneRadio" map="o"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jScrollPane1" map="p"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="extMethodRadioGrp" map="q"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="jTabbedPane1" map="r"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="setList" map="s"/>
  <field class="edu.scripps.pms.census.LabelFreeConfDialog" name="addSet" map="t"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$200(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void quanScanTypeActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void peakAlignRadioActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void editBtnActionPerformed_backup(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void addSetActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$700(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void remove1ActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void initAdditional()" map="B"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void fileSelectBtnActionPerformed(java.awt.event.ActionEvent)" map="F"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$100(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$000(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void saveBtnActionPerformed(java.awt.event.ActionEvent)" map="G"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void retionAligneRadioActionPerformed(java.awt.event.ActionEvent)" map="H"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="I"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$600(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$500(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="F"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$400(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="G"/>
  <method class="edu.scripps.pms.census.LabelFreeConfDialog" name="void access$300(edu.scripps.pms.census.LabelFreeConfDialog, java.awt.event.ActionEvent)" map="H"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="progress" map="A"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="massTolerance" map="B"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="startTime" map="C"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="pathArray" map="D"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="targetMS1Files" map="E"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="scanBefore" map="F"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="filePath" map="G"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="isotopeFile" map="H"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="scanAfter" map="I"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="confRootEle" map="J"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="conf" map="K"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="PROTON_MASS" map="L"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="refMS1File" map="M"/>
  <field class="edu.scripps.pms.census.ChroGenerator" name="formatter" map="N"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="org.jdom.Element createXmlChroHeader(int, int)" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="org.jdom.Element createXmlChroPeptideTitle(boolean, edu.scripps.pms.util.dtaselect.Peptide)" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="double findScanNum(java.io.RandomAccessFile, int, long, double)" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="int findStartScanNum(int, java.io.RandomAccessFile, int[], double)" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="java.lang.String cleanFileName(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="org.jdom.Element createXmlChroHeader(int)" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="int[] getComplementaryComposition(int[], int[], int[], int[])" map="A"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="org.jdom.Element createXmlMrmChroPeptideTitle(boolean, edu.scripps.pms.util.dtaselect.Peptide)" map="B"/>
  <method class="edu.scripps.pms.census.ChroGenerator" name="java.lang.String createChroHeader(boolean)" map="A"/>
  <field class="edu.scripps.pms.census.Census" name="elementFile" map="A"/>
  <field class="edu.scripps.pms.census.Census" name="twoDigitFormat" map="B"/>
  <field class="edu.scripps.pms.census.Census" name="conf" map="C"/>
  <field class="edu.scripps.pms.census.Census" name="filePath" map="D"/>
  <field class="edu.scripps.pms.census.Census" name="massTolerance" map="E"/>
  <field class="edu.scripps.pms.census.Census" name="PARAM_FILE" map="F"/>
  <field class="edu.scripps.pms.census.Census" name="MS2_FILE" map="G"/>
  <field class="edu.scripps.pms.census.Census" name="MS1_FILE" map="H"/>
  <method class="edu.scripps.pms.census.Census" name="void printMode(boolean, boolean)" map="A"/>
  <method class="edu.scripps.pms.census.Census" name="void runLabelFreeBasedOnId(org.jdom.Element)" map="A"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$29" map="29"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$29" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$29" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$28" map="28"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$28" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$28" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$27" map="27"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$27" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$27" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$26" map="26"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$26" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$26" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$25" map="25"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$25" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$25" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$24" map="24"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$24" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$24" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$23" map="23"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$23" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$23" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$22" map="22"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$22" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$22" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$21" map="21"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$21" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$21" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" map="_A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="ysTempArr" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="refArr" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="yrTempArr" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="scanNumArr" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="brTempArr" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="endIndex" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="this$0" map="G"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="startIndex" map="H"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="samArr" map="I"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$DataIndepModel" name="bsTempArr" map="J"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$20" map="20"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$20" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$20" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$9" map="9"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$9" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$9" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$8" map="8"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$8" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$19" map="19"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$19" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$19" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$7" map="7"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$7" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$7" name="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int)" map="prepareRenderer"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$18" map="18"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$18" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$18" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$6" map="6"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$6" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$6" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$17" map="17"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$17" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$17" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$49" map="49"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$49" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$49" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$5" map="5"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$5" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$5" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$16" map="16"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$16" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$16" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$48" map="48"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$48" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$48" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$4" map="4"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$4" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$15" map="15"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$15" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$15" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$47" map="47"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$47" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$47" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$3" map="3"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$3" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$14" map="14"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$14" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$14" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$46" map="46"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$46" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$46" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$2" map="2"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$2" name="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int)" map="prepareRenderer"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$13" map="13"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$13" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$13" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$45" map="45"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$45" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$45" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$1" name="java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer, int, int)" map="prepareRenderer"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$12" map="12"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$12" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$12" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$44$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$44$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$44$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$44" map="44"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$44" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$44" name="val$chroProgress" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$44" name="isSuccessful" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$44" name="val$isFull" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$44" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$11" map="11"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$11" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$11" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$43$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43$1" name="val$finalQuantifiedCount" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43$1" name="this$1" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43$1" name="val$finalTotalCount" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$43$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$43" map="43"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$singleFile" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$isGui" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$correctFactorValue" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$aJProgressBar" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$allNoneLowerBound" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$removeNegative" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="isSuccessful" map="G"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$detSelect" map="H"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$filterFragmentIons" map="I"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$allNoneCompositeScore" map="J"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$detValue" map="K"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="singleP" map="L"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$isUniquePeptide" map="M"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="p" map="N"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$noFilter" map="O"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="errorMessage" map="P"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$progress" map="Q"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$pValue" map="R"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$discardUnlabeledPeptide" map="S"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$allNoneUpperBound" map="T"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="this$0" map="U"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$pValueSelect" map="V"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$discardAN" map="W"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$allNoneMinPeptide" map="X"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$43" name="val$file" map="Y"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$43" name="java.lang.String access$4700(edu.scripps.pms.census.RelExMainFrame$43)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$43" name="boolean access$4600(edu.scripps.pms.census.RelExMainFrame$43)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$43" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$10" map="10"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$10" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$10" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$42$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42$1" name="val$finalQuantifiedCount" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42$1" name="this$1" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42$1" name="val$finalTotalCount" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$42$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$42" map="42"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="val$file" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="errorMessage" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="val$progress" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="val$aJProgressBar" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="isSuccessful" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$42" name="p" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$42" name="boolean access$4400(edu.scripps.pms.census.RelExMainFrame$42)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$42" name="java.lang.String access$4500(edu.scripps.pms.census.RelExMainFrame$42)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$42" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$41$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41$1" name="val$finalQuantifiedCount" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41$1" name="this$1" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41$1" name="val$finalTotalCount" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$41$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$41" map="41"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="val$file" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="errorMessage" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="val$progress" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="val$aJProgressBar" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="isSuccessful" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$41" name="p" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$41" name="java.lang.String access$4300(edu.scripps.pms.census.RelExMainFrame$41)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$41" name="boolean access$4200(edu.scripps.pms.census.RelExMainFrame$41)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$41" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$40$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$40$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$40" map="40"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="val$massMonitorList" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="val$file" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="errorMessage" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="val$progress" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="val$aJProgressBar" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="isSuccessful" map="G"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$40" name="p" map="H"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$40" name="boolean access$3900(edu.scripps.pms.census.RelExMainFrame$40)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$40" name="java.lang.String access$4000(edu.scripps.pms.census.RelExMainFrame$40)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$40" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$39$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$39$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$39" map="39"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="val$massMonitorList" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="val$file" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="errorMessage" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="val$progress" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="val$aJProgressBar" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="isSuccessful" map="G"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$39" name="p" map="H"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$39" name="java.lang.String access$3800(edu.scripps.pms.census.RelExMainFrame$39)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$39" name="boolean access$3700(edu.scripps.pms.census.RelExMainFrame$39)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$39" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$38$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$38$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$38" map="38"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$progress" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="p" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$fModel" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$correctFactorValue" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="isSuccessful" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="this$0" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$arr" map="G"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="errorMessage" map="H"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$outputFile" map="I"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$dbFilePath" map="J"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$38" name="val$aJProgressBar" map="K"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$38" name="java.lang.String access$3600(edu.scripps.pms.census.RelExMainFrame$38)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$38" name="void run()" map="run"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$38" name="boolean access$3400(edu.scripps.pms.census.RelExMainFrame$38)" map="B"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$37" map="37"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$37" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$37" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$36" map="36"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$36" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$36" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$35$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$35$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$35$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$35" map="35"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$35" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$35" name="val$specFile" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$35" name="val$progress" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$35" name="val$tempDir" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$35" name="val$mFrame" map="E"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$35" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$34$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$34$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$34" map="34"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="val$root" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="val$file" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="val$chroProgress" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="val$workFolder" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="isSuccessful" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$34" name="val$mFrame" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$34" name="boolean access$2700(edu.scripps.pms.census.RelExMainFrame$34)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$34" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$33$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$33$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$33$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$33" map="33"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$33" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$33" name="val$chroProgress" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$33" name="isSuccessful" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$33" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$32$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$32$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$32$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$32" map="32"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$32" name="isSuccessful" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$32" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$31$1" map="1"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$31$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$31" map="31"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="val$root" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="val$file" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="val$chroProgress" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="val$workFolder" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="isSuccessful" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$31" name="val$mFrame" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$31" name="void run()" map="run"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$31" name="boolean access$2600(edu.scripps.pms.census.RelExMainFrame$31)" map="A"/>
  <class name="edu.scripps.pms.census.RelExMainFrame$30" map="30"/>
  <field class="edu.scripps.pms.census.RelExMainFrame$30" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame$30" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="currentProtein" map="A"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="extractPanel" map="B"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="fileMenu" map="C"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="correlationPanel" map="D"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="filterBtn" map="E"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="searchBtn" map="F"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jSplitPane" map="G"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="massTolerance" map="H"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="openItem" map="I"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="currentDirectory" map="J"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="welcomeLabel" map="K"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chroNoteLabel2" map="L"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="peptidePanel" map="M"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="versionItem" map="N"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jPanel4" map="O"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="mergeItem" map="P"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jPanel3" map="Q"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jPanel2" map="R"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="scanBefore" map="S"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jPanel1" map="T"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="save" map="U"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="isotopeLabel" map="V"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jLabel7" map="W"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="areaRatioField" map="X"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jLabel5" map="Y"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jSeparator1" map="Z"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jLabel4" map="_"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="PEAK_SCAN_BEFORE" map="a"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jLabel3" map="b"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jLabel2" map="c"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="pepDistPlot" map="d"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="measuredRatioLabel" map="e"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="cr" map="f"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="openSpectra" map="g"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="peptideDistParser" map="h"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="reportItem" map="i"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="tabbedPanel" map="j"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinInfoPanel" map="k"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="searchField" map="l"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="open" map="m"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="msmsScan" map="n"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="regLnLabel" map="o"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="runNonLabel" map="p"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinTableModel" map="q"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="isotopeFileField" map="r"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="quanPanel" map="s"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinPanel" map="t"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="export" map="u"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="extractBtn" map="v"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="fragIonPanel" map="w"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="exitItem" map="z"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="runItem" map="&#x00a2;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="optionItem" map="&#x00a3;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="pepTabbedPanel" map="&#x00a4;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinSimplePane" map="&#x00a5;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="alignSpectra" map="&#x00aa;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="peptideList" map="&#x00b5;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="peptideListBox" map="&#x00ba;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="fragIonScrollPanel" map="&#x00c0;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="runMenu" map="&#x00c1;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="xmlData" map="&#x00c2;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chorNoteLabel1" map="&#x00c3;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinLabel" map="&#x00c4;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="regressionRatioField" map="&#x00c5;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="paramPanel" map="&#x00c6;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jMenuBar1" map="&#x00c7;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="rrLabel" map="&#x00c8;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="helpMenu" map="&#x00c9;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinSimpleTable" map="&#x00ca;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="confItem" map="&#x00cb;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="toolMenu" map="&#x00cc;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="shiftLabel" map="&#x00cd;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="resetBtn" map="&#x00ce;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinSimpleTableModel" map="&#x00cf;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="scanAfter" map="&#x00d0;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="measuredRatioLabel1" map="&#x00d1;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="conf" map="&#x00d2;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="quantModeRadioGrp" map="&#x00d3;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jRadioButton2" map="&#x00d4;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jRadioButton1" map="&#x00d5;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinList" map="&#x00d6;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jCheckBox3" map="&#x00d8;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jCheckBox2" map="&#x00d9;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jCheckBox1" map="&#x00da;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="INTEGRATION_WINDOW" map="&#x00db;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="rrField" map="&#x00dc;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="corrPlot" map="&#x00dd;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="PEAK_SCAN_AFTER" map="&#x00de;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chromatogramPanel" map="&#x00df;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="areaRatioLogField" map="&#x00e0;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="fileSelectBtn" map="&#x00e1;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="filePathLabel" map="&#x00e2;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="shiftField" map="&#x00e3;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jTextField6" map="&#x00e4;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jTextField5" map="&#x00e5;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="mainPanel" map="&#x00e6;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="plot" map="&#x00e7;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="peptideListTable" map="&#x00e8;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="jToolBar1" map="&#x00e9;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="progressBar" map="&#x00ea;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chroXmlParser" map="&#x00eb;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="peptideTableModel" map="&#x00ec;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="fullMassScan" map="&#x00ed;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="chroPanel" map="&#x00ee;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinTable" map="&#x00ef;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="mrmCsv" map="&#x00f0;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="PEAK_THRESHOLD" map="&#x00f1;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="extractRadioGrp" map="&#x00f2;"/>
  <field class="edu.scripps.pms.census.RelExMainFrame" name="proteinListPanel" map="&#x00f3;"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void fileMenuActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void peptideListTableMouseClicked(java.awt.event.MouseEvent)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$900(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$000(edu.scripps.pms.census.RelExMainFrame, java.awt.event.KeyEvent)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void fileSelectBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void runDataIndependentPeakArea(edu.scripps.pms.census.conf.PostOptions)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void initAdditional()" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updatePeptideInfo(javax.swing.JTable)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void OpenChroFileActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="edu.scripps.pms.census.io.ChroXmlReader access$4100(edu.scripps.pms.census.RelExMainFrame)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1000(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void mrmCsvActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updatePeptideInfo(javax.swing.JTable, int, int)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void alignSpectraActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JPanel access$3500(edu.scripps.pms.census.RelExMainFrame)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1400(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void initComponents()" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void mergeItemActionPerformed(java.awt.event.ActionEvent)" map="F"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="java.util.ArrayList access$2800(edu.scripps.pms.census.RelExMainFrame)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$2000(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void filterBtnActionPerformed(java.awt.event.ActionEvent)" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1800(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$3300(edu.scripps.pms.census.RelExMainFrame, java.awt.event.MouseEvent)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void proteinSimpleTableMouseClicked(java.awt.event.MouseEvent)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void runItemActionPerformed(java.awt.event.ActionEvent)" map="H"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void confItemActionPerformed(java.awt.event.ActionEvent)" map="I"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$2400(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="F"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$600(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void peptideListTableKeyPressed(java.awt.event.KeyEvent)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$3200(edu.scripps.pms.census.RelExMainFrame, java.awt.event.KeyEvent)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JTabbedPane access$3100(edu.scripps.pms.census.RelExMainFrame)" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JTextField access$5000(edu.scripps.pms.census.RelExMainFrame)" map="E"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void extractBtnActionPerformed(java.awt.event.ActionEvent)" map="J"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void nonlabelTableMouseClicked(java.awt.event.MouseEvent)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="java.util.ArrayList access$2802(edu.scripps.pms.census.RelExMainFrame, java.util.ArrayList)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void optionItemActionPerformed(java.awt.event.ActionEvent)" map="K"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1900(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="H"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void selectQuantType()" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="float access$5200(edu.scripps.pms.census.RelExMainFrame)" map="F"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void searchBtnActionPerformed(java.awt.event.ActionEvent)" map="L"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$2500(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="I"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1500(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="J"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$700(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="K"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$300(edu.scripps.pms.census.RelExMainFrame, java.awt.event.KeyEvent)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void cleanupProteinTableModel()" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$2100(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="L"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void proteinSimpleTableKeyPressed(java.awt.event.KeyEvent)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updatePeptideInfo()" map="E"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.table.DefaultTableModel access$2900(edu.scripps.pms.census.RelExMainFrame)" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void searchFieldActionPerformed(java.awt.event.ActionEvent)" map="M"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void openActionPerformed(java.awt.event.ActionEvent)" map="N"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void resetBtnActionPerformed(java.awt.event.ActionEvent)" map="O"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void drawPlot(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void proteinTableMouseClicked(java.awt.event.MouseEvent)" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void versionItemActionPerformed(java.awt.event.ActionEvent)" map="P"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updateLabelFreeMS2PeptideInfo(javax.swing.JTable)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1200(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="M"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updateiTRAQpeptideInfo()" map="F"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1100(edu.scripps.pms.census.RelExMainFrame, java.awt.event.MouseEvent)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1600(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="N"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void reportItemActionPerformed(java.awt.event.ActionEvent)" map="Q"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$100(edu.scripps.pms.census.RelExMainFrame, java.awt.event.MouseEvent)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$200(edu.scripps.pms.census.RelExMainFrame, java.awt.event.MouseEvent)" map="D"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$2200(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="O"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$400(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="P"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updateiTRAQpeptideInfo(javax.swing.JTable)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void openSpectraActionPerformed(java.awt.event.ActionEvent)" map="R"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updateLabelFreeMS2PeptideInfo()" map="G"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void initTest()" map="H"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void nonlabelTableKeyPressed(java.awt.event.KeyEvent)" map="C"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JTextField access$5100(edu.scripps.pms.census.RelExMainFrame)" map="H"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$800(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="Q"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportActionPerformed(java.awt.event.ActionEvent)" map="S"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void proteinSimpleTableActionPerformed(javax.swing.JTable, int)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void drawPepDist(java.lang.String)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void updateMS2PeptideFilterInfo(javax.swing.JTable, int)" map="B"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void saveActionPerformed(java.awt.event.ActionEvent)" map="T"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1700(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="R"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exitItemActionPerformed(java.awt.event.ActionEvent)" map="U"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.JTextField access$4900(edu.scripps.pms.census.RelExMainFrame)" map="I"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void exportITRAQSingleReport(java.io.File)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="edu.scripps.pms.census.RelExMainFrame$DataIndepModel calcFragIons(edu.scripps.pms.census.model.ChroPeptide)" map="A"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$2300(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="S"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="javax.swing.table.DefaultTableModel access$3000(edu.scripps.pms.census.RelExMainFrame)" map="J"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$1300(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="T"/>
  <method class="edu.scripps.pms.census.RelExMainFrame" name="void access$500(edu.scripps.pms.census.RelExMainFrame, java.awt.event.ActionEvent)" map="U"/>
  <class name="edu.scripps.pms.census.ExportDialog$5" map="5"/>
  <method class="edu.scripps.pms.census.ExportDialog$5" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.ExportDialog$4" map="4"/>
  <field class="edu.scripps.pms.census.ExportDialog$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.ExportDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.ExportDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.ExportDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.ExportDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.ExportDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.ExportDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="mFrame" map="A"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneUpperBoundRatio" map="B"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="correctFactor" map="C"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="filterFragmentIons" map="D"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneLabel4" map="E"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneLabel3" map="F"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneLabel2" map="G"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneLabel1" map="H"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="detFactor" map="I"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneMinPeptide" map="J"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="cancelBtn" map="K"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allBtn" map="L"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="pValueCheck" map="M"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="pValue" map="N"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneCompositeScoreLabel4" map="O"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneCompositeScoreLabel3" map="P"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneCompositeScoreLabel2" map="Q"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneCompositeScoreLabel1" map="R"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="removeNegative" map="S"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="detFactorCheck" map="T"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneCompositeScore" map="U"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jPanel5" map="V"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jPanel4" map="W"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jLabel4" map="X"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="noFilterCheck" map="Y"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jPanel3" map="Z"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jLabel3" map="_"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jPanel2" map="a"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="jPanel1" map="b"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="factorLabel2" map="c"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="factorLabel1" map="d"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="allNoneLowerBoundRatio" map="e"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="exportBtn" map="f"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="uniqueBtn" map="g"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="discardANCheck" map="h"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="uniquePeptideRadio" map="i"/>
  <field class="edu.scripps.pms.census.ExportDialog" name="discardUnlabeledPeptide" map="j"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void access$300(edu.scripps.pms.census.ExportDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void access$000(edu.scripps.pms.census.ExportDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void access$100(edu.scripps.pms.census.ExportDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void access$200(edu.scripps.pms.census.ExportDialog, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void exportBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void discardANCheckActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.ExportDialog" name="void noFilterCheckActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <field class="edu.scripps.pms.census.CensusTest" name="elementFile" map="A"/>
  <field class="edu.scripps.pms.census.CensusTest" name="twoDigitFormat" map="B"/>
  <field class="edu.scripps.pms.census.CensusTest" name="conf" map="C"/>
  <field class="edu.scripps.pms.census.CensusTest" name="filePath" map="D"/>
  <field class="edu.scripps.pms.census.CensusTest" name="massTolerance" map="E"/>
  <field class="edu.scripps.pms.census.CensusTest" name="PARAM_FILE" map="F"/>
  <field class="edu.scripps.pms.census.CensusTest" name="MS2_FILE" map="G"/>
  <field class="edu.scripps.pms.census.CensusTest" name="MS1_FILE" map="H"/>
  <class name="edu.scripps.pms.census.MergeDialog$6" map="6"/>
  <field class="edu.scripps.pms.census.MergeDialog$6" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.MergeDialog$5" map="5"/>
  <field class="edu.scripps.pms.census.MergeDialog$5" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.MergeDialog$4" map="4"/>
  <field class="edu.scripps.pms.census.MergeDialog$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.MergeDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.MergeDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.MergeDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.MergeDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.MergeDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.MergeDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.MergeDialog$7" map="7"/>
  <method class="edu.scripps.pms.census.MergeDialog$7" name="void run()" map="run"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="filterFragmentIons" map="A"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="addBtn" map="B"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="dbFilePath" map="C"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jPanel4" map="D"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="dbSelectBtn" map="E"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="listModel" map="F"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="pValueCheck" map="G"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jPanel3" map="H"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="mFrame" map="I"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jPanel2" map="J"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="allBtn" map="K"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="noFilterCheck" map="L"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jSeparator2" map="M"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="removeBtn" map="N"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jSeparator1" map="O"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jScrollPane1" map="P"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="detFactorCheck" map="Q"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="detFactor" map="R"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="cancelBtn" map="S"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="correctFactor" map="T"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="pValue" map="U"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="mergeBtn" map="V"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="uniqueBtn" map="W"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="filterPanel" map="X"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="removeNegative" map="Y"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jLabel7" map="Z"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jLabel6" map="_"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="fileList" map="a"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jLabel5" map="b"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jLabel2" map="c"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="jLabel1" map="d"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="currentFolder" map="e"/>
  <field class="edu.scripps.pms.census.MergeDialog" name="uniquePeptideRadio" map="f"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void removeBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void access$100(edu.scripps.pms.census.MergeDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void mergeBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void access$200(edu.scripps.pms.census.MergeDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void access$500(edu.scripps.pms.census.MergeDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void dbSelectBtnActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void access$300(edu.scripps.pms.census.MergeDialog, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void addBtnActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void access$400(edu.scripps.pms.census.MergeDialog, java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void noFilterCheckActionPerformed(java.awt.event.ActionEvent)" map="F"/>
  <method class="edu.scripps.pms.census.MergeDialog" name="void access$000(edu.scripps.pms.census.MergeDialog, java.awt.event.ActionEvent)" map="F"/>
  <field class="edu.scripps.pms.census.TestPanel" name="jLabel1" map="A"/>
  <method class="edu.scripps.pms.census.TestPanel" name="void initComponents()" map="A"/>
  <class name="edu.scripps.pms.census.SelectConfDialog$3" map="3"/>
  <method class="edu.scripps.pms.census.SelectConfDialog$3" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.SelectConfDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.SelectConfDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.SelectConfDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.SelectConfDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.SelectConfDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.SelectConfDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="jPanel1" map="A"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="selectBtn" map="B"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="cancelBtn" map="C"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="mFrame" map="D"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="labelFreeRadBtn" map="E"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="btnGroup" map="F"/>
  <field class="edu.scripps.pms.census.SelectConfDialog" name="labelRadioBtn" map="G"/>
  <method class="edu.scripps.pms.census.SelectConfDialog" name="void access$000(edu.scripps.pms.census.SelectConfDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.SelectConfDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.SelectConfDialog" name="void access$100(edu.scripps.pms.census.SelectConfDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.SelectConfDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.SelectConfDialog" name="void selectBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <class name="edu.scripps.pms.census.ExportNonlabelDialog$4" map="4"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog$4" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.ExportNonlabelDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.ExportNonlabelDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.ExportNonlabelDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="jRadioButton2" map="A"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="exportBtn" map="B"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="noNormRadio" map="C"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="buttonGroup" map="D"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="jPanel1" map="E"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="cancelBtn" map="F"/>
  <field class="edu.scripps.pms.census.ExportNonlabelDialog" name="mFrame" map="G"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void access$100(edu.scripps.pms.census.ExportNonlabelDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void exportBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void noNormRadioActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void access$000(edu.scripps.pms.census.ExportNonlabelDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void access$200(edu.scripps.pms.census.ExportNonlabelDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.ExportNonlabelDialog" name="void initComponents()" map="A"/>
  <class name="edu.scripps.pms.census.MRMFragPanel$2" map="2"/>
  <field class="edu.scripps.pms.census.MRMFragPanel$2" name="this$0" map="A"/>
  <class name="edu.scripps.pms.census.MRMFragPanel$1" map="1"/>
  <field class="edu.scripps.pms.census.MRMFragPanel$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.MRMFragPanel$1" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <field class="edu.scripps.pms.census.MRMFragPanel" name="proteinMRMTableModel" map="A"/>
  <field class="edu.scripps.pms.census.MRMFragPanel" name="proteinSimpleTable" map="B"/>
  <field class="edu.scripps.pms.census.MRMFragPanel" name="format" map="C"/>
  <field class="edu.scripps.pms.census.MRMFragPanel" name="proteinMRMPane" map="D"/>
  <method class="edu.scripps.pms.census.MRMFragPanel" name="void initComponents()" map="A"/>
  <class name="edu.scripps.pms.census.TestJFrame$3" map="3"/>
  <method class="edu.scripps.pms.census.TestJFrame$3" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.TestJFrame$2$1" map="1"/>
  <field class="edu.scripps.pms.census.TestJFrame$2$1" name="this$1" map="A"/>
  <method class="edu.scripps.pms.census.TestJFrame$2$1" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.TestJFrame$2" map="2"/>
  <field class="edu.scripps.pms.census.TestJFrame$2" name="this$0" map="A"/>
  <field class="edu.scripps.pms.census.TestJFrame$2" name="val$chroProgress" map="B"/>
  <field class="edu.scripps.pms.census.TestJFrame$2" name="isSuccessful" map="C"/>
  <method class="edu.scripps.pms.census.TestJFrame$2" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.TestJFrame$1" map="1"/>
  <field class="edu.scripps.pms.census.TestJFrame$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.TestJFrame$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.TestJFrame" name="jButton1" map="A"/>
  <method class="edu.scripps.pms.census.TestJFrame" name="void access$000(edu.scripps.pms.census.TestJFrame, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.TestJFrame" name="void jButton1ActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.TestJFrame" name="void initComponents()" map="A"/>
  <field class="edu.scripps.pms.census.SVMTest" name="vy" map="A"/>
  <field class="edu.scripps.pms.census.SVMTest" name="vx" map="B"/>
  <field class="edu.scripps.pms.census.ProgressTask" name="proteinList" map="A"/>
  <field class="edu.scripps.pms.census.ProgressTask" name="cr" map="B"/>
  <field class="edu.scripps.pms.census.ProgressTask" name="progressDialog" map="C"/>
  <field class="edu.scripps.pms.census.ProgressTask" name="mFrame" map="D"/>
  <field class="edu.scripps.pms.census.ProgressTask" name="chroFile" map="E"/>
  <field class="edu.scripps.pms.census.RelexStand" name="elementFile" map="A"/>
  <field class="edu.scripps.pms.census.RelexStand" name="twoDigitFormat" map="B"/>
  <field class="edu.scripps.pms.census.RelexStand" name="conf" map="C"/>
  <field class="edu.scripps.pms.census.RelexStand" name="filePath" map="D"/>
  <field class="edu.scripps.pms.census.RelexStand" name="massTolerance" map="E"/>
  <field class="edu.scripps.pms.census.RelexStand" name="PARAM_FILE" map="F"/>
  <field class="edu.scripps.pms.census.RelexStand" name="MS2_FILE" map="G"/>
  <field class="edu.scripps.pms.census.RelexStand" name="MS1_FILE" map="H"/>
  <method class="edu.scripps.pms.census.RelexStand" name="void printMode(boolean, boolean)" map="A"/>
  <method class="edu.scripps.pms.census.RelexStand" name="void run()" map="A"/>
  <class name="edu.scripps.pms.census.LabelFreeDataSetDialog$5" map="5"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog$5" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.LabelFreeDataSetDialog$4" map="4"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeDataSetDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeDataSetDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelFreeDataSetDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="addSpecBtn" map="A"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="setNameField" map="B"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="listModel" map="C"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="scrollPane" map="D"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="mFrame" map="E"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="currentFolder" map="F"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="saveBtn" map="G"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="cancelBtn" map="H"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="parent" map="I"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="fileList" map="J"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="removeBtn" map="K"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="jPanel3" map="L"/>
  <field class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="jLabel1" map="M"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void access$300(edu.scripps.pms.census.LabelFreeDataSetDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void removeBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void access$200(edu.scripps.pms.census.LabelFreeDataSetDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void access$100(edu.scripps.pms.census.LabelFreeDataSetDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void access$000(edu.scripps.pms.census.LabelFreeDataSetDialog, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void saveBtnActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.LabelFreeDataSetDialog" name="void addSpecBtnActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <class name="edu.scripps.pms.census.FontRenderer" map="A"/>
  <field class="edu.scripps.pms.census.FontRenderer" name="font2" map="A"/>
  <field class="edu.scripps.pms.census.FontRenderer" name="font1" map="B"/>
  <method class="edu.scripps.pms.census.FontRenderer" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)" map="getTableCellRendererComponent"/>
  <class name="edu.scripps.pms.census.SelectRefMSDialog$3" map="3"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog$3" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.SelectRefMSDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.SelectRefMSDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog" name="fileList" map="A"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog" name="okBtn" map="B"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog" name="fileBox" map="C"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog" name="rootEle" map="D"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog" name="cancelBtn" map="E"/>
  <field class="edu.scripps.pms.census.SelectRefMSDialog" name="jLabel1" map="F"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog" name="void cancelBtnActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog" name="void access$100(edu.scripps.pms.census.SelectRefMSDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog" name="void initComponents()" map="A"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog" name="void access$000(edu.scripps.pms.census.SelectRefMSDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.SelectRefMSDialog" name="void okBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$6" map="6"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$6" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$5" map="5"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$5" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$4" map="4"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$4" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$3" map="3"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$3" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$2" map="2"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$2" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$2" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$1" map="1"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$1" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$8" map="8"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$8" name="void run()" map="run"/>
  <class name="edu.scripps.pms.census.LabelingConfDialog$7" map="7"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog$7" name="this$0" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="mFrame" map="A"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="stat1Label" map="B"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsSpectraGrp" map="C"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="indPPMLabel" map="D"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="paramPanel" map="E"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsSingleSpec" map="F"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="PROTEIN_COLUMNS" map="G"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="AA" map="H"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="heavyTable" map="I"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="currentFolder" map="J"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jLabel13" map="K"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jLabel12" map="L"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jLabel11" map="M"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="isoFieldUnit" map="N"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsMZ2" map="O"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsMZ1" map="P"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="listModel" map="Q"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsTolerance" map="R"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="indivIsoRadio" map="S"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsMultipleSpec" map="T"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="wholeEnvRadio" map="U"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="massAccField" map="V"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="isotopeLightElementModel" map="W"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="statNumLabel" map="X"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="isotopeHeavyElementModel" map="Y"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="stat1Field" map="Z"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="lightTable" map="_"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="wholeEnvLabel" map="a"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="quanScanType" map="b"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="stat2Label" map="c"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="envMargin" map="d"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsSpecificRadio" map="e"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsAutoRadio" map="f"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jLabel9" map="g"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="wholeEnvMZ" map="h"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="enrichField" map="i"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="statNumComboBox" map="j"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="isoFieldLabel" map="k"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jLabel5" map="l"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jPanel4" map="m"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="maxWinField" map="n"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jPanel3" map="o"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jPanel2" map="p"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jPanel1" map="q"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="check117" map="r"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="fileSelectBtn" map="s"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="check116" map="t"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="DEFAULT_CELL_DATA" map="u"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="check115" map="v"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="check114" map="w"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="isoField" map="z"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsSpecificTolerance" map="&#x00a2;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jScrollPane3" map="&#x00a3;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="msmsExtRadioGrp" map="&#x00a4;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jScrollPane1" map="&#x00a5;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="extMethodRadioGrp" map="&#x00aa;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="saveToFile" map="&#x00b5;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="jTabbedPane1" map="&#x00ba;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="stat2Field" map="&#x00c0;"/>
  <field class="edu.scripps.pms.census.LabelingConfDialog" name="indMassLabel" map="&#x00c1;"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void access$000(edu.scripps.pms.census.LabelingConfDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void saveToFileActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void initAdditional()" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void access$300(edu.scripps.pms.census.LabelingConfDialog, java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void initComponents()" map="B"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void selectiTRAQData(org.jdom.Element)" map="A"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void fileSelectBtnActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void access$100(edu.scripps.pms.census.LabelingConfDialog, java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void access$400(edu.scripps.pms.census.LabelingConfDialog, java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void msmsAutoRadioActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void quanScanTypeActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void access$200(edu.scripps.pms.census.LabelingConfDialog, java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.scripps.pms.census.LabelingConfDialog" name="void msmsSpecificRadioActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <field class="edu.scripps.pms.census.MyTest" name="modN" map="A"/>
  <field class="edu.scripps.pms.census.MyTest" name="modM" map="B"/>
  <field class="edu.scripps.pms.census.MyTest" name="modL" map="C"/>
  <field class="edu.scripps.pms.census.MyTest" name="modK" map="D"/>
  <field class="edu.scripps.pms.census.MyTest" name="modI" map="E"/>
  <field class="edu.scripps.pms.census.MyTest" name="modH" map="F"/>
  <field class="edu.scripps.pms.census.MyTest" name="modG" map="G"/>
  <field class="edu.scripps.pms.census.MyTest" name="modF" map="H"/>
  <field class="edu.scripps.pms.census.MyTest" name="modE" map="I"/>
  <field class="edu.scripps.pms.census.MyTest" name="modD" map="J"/>
  <field class="edu.scripps.pms.census.MyTest" name="modC" map="K"/>
  <field class="edu.scripps.pms.census.MyTest" name="modB" map="L"/>
  <field class="edu.scripps.pms.census.MyTest" name="modA" map="M"/>
  <field class="edu.scripps.pms.census.MyTest" name="modZ" map="N"/>
  <field class="edu.scripps.pms.census.MyTest" name="modY" map="O"/>
  <field class="edu.scripps.pms.census.MyTest" name="modX" map="P"/>
  <field class="edu.scripps.pms.census.MyTest" name="modW" map="Q"/>
  <field class="edu.scripps.pms.census.MyTest" name="modV" map="R"/>
  <field class="edu.scripps.pms.census.MyTest" name="modT" map="S"/>
  <field class="edu.scripps.pms.census.MyTest" name="modS" map="T"/>
  <field class="edu.scripps.pms.census.MyTest" name="modR" map="U"/>
  <field class="edu.scripps.pms.census.MyTest" name="modQ" map="V"/>
  <field class="edu.scripps.pms.census.MyTest" name="modP" map="W"/>
  <field class="edu.scripps.pms.census.MyTest" name="modO" map="X"/>
  <package name="edu.scripps.pms.mspid" map="C"/>
  <class name="edu.scripps.pms.mspid.MassSpecConstants" map="A"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSH3ODB" map="A"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSH3O" map="B"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSH2" map="C"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSH" map="D"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSDIFFC12C13" map="E"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MONOISOTOPE" map="F"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSH2O" map="G"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSDIFFN14N15" map="H"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="AVGISOTOPE" map="I"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="DBINWIDTH" map="J"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="MASSHDB" map="K"/>
  <field class="edu.scripps.pms.mspid.MassSpecConstants" name="log10" map="L"/>
  <package name="edu.scripps.pms.stats" map="D"/>
  <class name="edu.scripps.pms.stats.GrubbsTest" map="A"/>
  <method class="edu.scripps.pms.stats.GrubbsTest" name="java.util.List filterMerge(java.util.List, double)" map="A"/>
  <method class="edu.scripps.pms.stats.GrubbsTest" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.stats.GrubbsTest" name="double[] filterExcludingNegative(double[], double)" map="A"/>
  <method class="edu.scripps.pms.stats.GrubbsTest" name="java.util.List filter(java.util.List, double)" map="B"/>
  <method class="edu.scripps.pms.stats.GrubbsTest" name="double[] calculatePValueExcludingNegative(double[], double[])" map="A"/>
  <method class="edu.scripps.pms.stats.GrubbsTest" name="double[] filter(double[], double)" map="B"/>
  <class name="edu.scripps.pms.stats.STDev" map="B"/>
  <method class="edu.scripps.pms.stats.STDev" name="double getMean(double[])" map="A"/>
  <method class="edu.scripps.pms.stats.STDev" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.stats.STDev" name="double getStdev(long[])" map="A"/>
  <method class="edu.scripps.pms.stats.STDev" name="double getStdev(double[])" map="B"/>
  <method class="edu.scripps.pms.stats.STDev" name="double getMeanExcludingNegative(double[])" map="C"/>
  <method class="edu.scripps.pms.stats.STDev" name="double getMean(long[])" map="B"/>
  <method class="edu.scripps.pms.stats.STDev" name="double getStdevWithoutNegative(double[])" map="D"/>
  <class name="edu.scripps.pms.stats.NRUtils" map="C"/>
  <method class="edu.scripps.pms.stats.NRUtils" name="double GaussJordan(double[][], int)" map="A"/>
  <method class="edu.scripps.pms.stats.NRUtils" name="void PrintSymmetricMatrix(double[][], int)" map="B"/>
  <method class="edu.scripps.pms.stats.NRUtils" name="java.lang.String getAccession(java.lang.String)" map="A"/>
  <method class="edu.scripps.pms.stats.NRUtils" name="void QuickSortIndex(double[], int[], int, int)" map="A"/>
  <method class="edu.scripps.pms.stats.NRUtils" name="double LDA(double[][], double[], double[], int, int, byte[])" map="A"/>
  <method class="edu.scripps.pms.stats.NRUtils" name="void QuickSortIndex(double[], int[])" map="A"/>
  <class name="edu.scripps.pms.stats.TTest" map="D"/>
  <method class="edu.scripps.pms.stats.TTest" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.scripps.pms.stats.TTest" name="double Norm_p(double)" map="A"/>
  <method class="edu.scripps.pms.stats.TTest" name="double T_p(double, double)" map="A"/>
  <method class="edu.scripps.pms.stats.TTest" name="double T_z(double, double)" map="B"/>
  <package name="edu.scripps.pms.pepshow" map="E"/>
  <class name="edu.scripps.pms.pepshow.MainTest$1" map="1"/>
  <field class="edu.scripps.pms.pepshow.MainTest$1" name="this$0" map="A"/>
  <method class="edu.scripps.pms.pepshow.MainTest$1" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="edu.scripps.pms.pepshow.MainTest" map="A"/>
  <field class="edu.scripps.pms.pepshow.MainTest" name="_directory" map="A"/>
  <field class="edu.scripps.pms.pepshow.MainTest" name="_file" map="B"/>
  <field class="edu.scripps.pms.pepshow.MainTest" name="plot" map="C"/>
  <method class="edu.scripps.pms.pepshow.MainTest" name="void main(java.lang.String[])" map="A"/>
  <class name="CensusProteinContrast" map="A"/>
  <field class="CensusProteinContrast" name="descHt" map="A"/>
  <method class="CensusProteinContrast" name="void main(java.lang.String[])" map="A"/>
  <method class="CensusProteinContrast" name="java.util.Hashtable readFile(java.lang.String)" map="A"/>
  <class name="CensusRatioFilter" map="B"/>
  <method class="CensusRatioFilter" name="void main(java.lang.String[])" map="A"/>
  <class name="Mzxml2Ms2" map="C"/>
  <field class="Mzxml2Ms2" name="USAGE" map="A"/>
  <method class="Mzxml2Ms2" name="void main(java.lang.String[])" map="A"/>
  <method class="Mzxml2Ms2" name="java.util.ArrayList getFiles(java.lang.String, java.lang.String)" map="A"/>
  <class name="SplitMzXML" map="D"/>
  <field class="SplitMzXML" name="KEEP_FTMS" map="A"/>
  <field class="SplitMzXML" name="KEEP_ITMS" map="B"/>
  <field class="SplitMzXML" name="ns" map="C"/>
  <field class="SplitMzXML" name="lastIndex" map="D"/>
  <method class="SplitMzXML" name="java.lang.String splitFile(java.lang.String[])" map="A"/>
  <method class="SplitMzXML" name="void main(java.lang.String[])" map="B"/>
  <method class="SplitMzXML" name="java.lang.String insertIndex(java.lang.String, java.lang.String)" map="A"/>
  <method class="SplitMzXML" name="java.lang.String addIndex(java.lang.String)" map="A"/>
  <method class="SplitMzXML" name="java.lang.String replaceInsertOffset(java.lang.String)" map="B"/>
  <class name="FCSScore" map="E"/>
  <method class="FCSScore" name="void main(java.lang.String[])" map="A"/>
  <class name="FindAllNothing" map="F"/>
  <field class="FindAllNothing" name="format" map="A"/>
  <field class="FindAllNothing" name="format2" map="B"/>
  <method class="FindAllNothing" name="double[] normalizeOnArea(double[], double[])" map="A"/>
  <method class="FindAllNothing" name="double[] getNormalDistFrequency(double[], double, double)" map="A"/>
  <method class="FindAllNothing" name="double[] getXArr(double[])" map="A"/>
  <method class="FindAllNothing" name="double[] getNormalize(double[])" map="B"/>
  <method class="FindAllNothing" name="double[] getChiScore(double[], double[])" map="B"/>
  <method class="FindAllNothing" name="double getStandardDeviationFromDist(double[], double)" map="A"/>
  <method class="FindAllNothing" name="void main(java.lang.String[])" map="A"/>
  <method class="FindAllNothing" name="double[] changeFrequency(double[], double)" map="B"/>
  <method class="FindAllNothing" name="double getMax(double[])" map="C"/>
  <method class="FindAllNothing" name="double getCOG(java.util.ArrayList)" map="A"/>
  <class name="CensusContrast" map="G"/>
  <method class="CensusContrast" name="void main(java.lang.String[])" map="A"/>
  <method class="CensusContrast" name="java.util.Hashtable readFile(java.lang.String, java.util.Hashtable)" map="A"/>
  <class name="CensusContrast2" map="H"/>
  <field class="CensusContrast2" name="descHt" map="A"/>
  <method class="CensusContrast2" name="void main(java.lang.String[])" map="A"/>
  <method class="CensusContrast2" name="java.util.Hashtable readFile(java.lang.String, java.util.Hashtable)" map="A"/>
  <class name="IndexTest" map="I"/>
  <method class="IndexTest" name="void main(java.lang.String[])" map="A"/>
  <method class="IndexTest" name="void readRandom(java.lang.String, int, int)" map="A"/>
  <method class="IndexTest" name="void writeIndex(java.lang.String)" map="A"/>
  <class name="ChroSplit" map="J"/>
  <method class="ChroSplit" name="void main(java.lang.String[])" map="A"/>
  <class name="ReadFile" map="K"/>
  <method class="ReadFile" name="void main(java.lang.String[])" map="A"/>
  <class name="ChroXmlParser" map="L"/>
  <method class="ChroXmlParser" name="void main(java.lang.String[])" map="A"/>
  <class name="FilterLowQualityChro" map="M"/>
  <method class="FilterLowQualityChro" name="void main(java.lang.String[])" map="A"/>
  <class name="Test1" map="N"/>
  <method class="Test1" name="void main(java.lang.String[])" map="A"/>
  <class name="LinearRegression2" map="O"/>
  <field class="LinearRegression2" name="yAve" map="A"/>
  <field class="LinearRegression2" name="bestShift" map="B"/>
  <field class="LinearRegression2" name="shift" map="C"/>
  <field class="LinearRegression2" name="xArr" map="D"/>
  <field class="LinearRegression2" name="areaRatio" map="E"/>
  <field class="LinearRegression2" name="xAve" map="F"/>
  <field class="LinearRegression2" name="endIndex" map="G"/>
  <field class="LinearRegression2" name="slope" map="H"/>
  <field class="LinearRegression2" name="corr" map="I"/>
  <field class="LinearRegression2" name="intercept" map="J"/>
  <field class="LinearRegression2" name="startIndex" map="K"/>
  <field class="LinearRegression2" name="yArr" map="L"/>
  <method class="LinearRegression2" name="void setCorr(double)" map="A"/>
  <method class="LinearRegression2" name="int getBestShift()" map="A"/>
  <method class="LinearRegression2" name="double getCorr()" map="B"/>
  <method class="LinearRegression2" name="void setIntercept(double)" map="B"/>
  <method class="LinearRegression2" name="void setAreaRatio(double)" map="C"/>
  <method class="LinearRegression2" name="void setBestShift(int)" map="A"/>
  <method class="LinearRegression2" name="void setSlope(double)" map="D"/>
  <method class="LinearRegression2" name="double getSlope()" map="C"/>
  <method class="LinearRegression2" name="double getIntercept()" map="D"/>
  <method class="LinearRegression2" name="double getAreaRatio()" map="E"/>
  <method class="LinearRegression2" name="void calc()" map="F"/>
  <class name="Test" map="P"/>
  <method class="Test" name="void main(java.lang.String[])" map="A"/>
  <method class="Test" name="void addIndex(java.lang.String)" map="A"/>
</map>
</yguard>
