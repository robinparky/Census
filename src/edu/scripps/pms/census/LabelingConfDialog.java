/*
 * LabelingConfDialog.java
 *
 * Created on May 2, 2006, 5:03 PM
 */

package edu.scripps.pms.census;

import javax.swing.table.*;
import javax.swing.*;

import java.io.*;
import java.util.*;
import edu.scripps.pms.census.util.*;
import edu.scripps.pms.census.io.*;
import edu.scripps.pms.census.model.IsotopeTable;
import edu.scripps.pms.census.*;

import org.jdom.*;
import org.jdom.output.*;
import org.jdom.input.*;


/**
 *
 * @author  rpark
 */
public class LabelingConfDialog extends javax.swing.JDialog {

    private RelExMainFrame mFrame;
    private File currentFolder=null;
    
    private final String[] PROTEIN_COLUMNS = {"Name", "C", "H", "O", "N", "S", "P", "15N", "2H", "13C", };
    private final String[] AA = {"A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y", "NTERM", "CTERM", "STAR", "POUND", "AT", };
//<residue> <symbol>    
    private final String[][] DEFAULT_CELL_DATA = {                
        {"A", "3", "5", "1", "1", "0", "0", "0", "0", "0", },
        {"C", "5", "8", "2", "2", "1", "0", "0", "0", "0", },
        {"D", "4", "5", "3", "1", "0", "0", "0", "0", "0", },
        {"E", "5", "7", "3", "1", "0", "0", "0", "0", "0", },
        {"F", "9", "9", "1", "1", "0", "0", "0", "0", "0", },
        {"G", "2", "3", "1", "1", "0", "0", "0", "0", "0", },
        {"H", "6", "7", "1", "3", "0", "0", "0", "0", "0", },
        {"I", "6", "11", "1", "1", "0", "0", "0", "0", "0", },
        {"K", "6", "12", "1", "2", "0", "0", "0", "0", "0", },
        {"L", "6", "11", "1", "1", "0", "0", "0", "0", "0", },
        {"M", "5", "9", "1", "1", "1", "0", "0", "0", "0", },
        {"N", "4", "6", "2", "2", "0", "0", "0", "0", "0", },
        {"P", "5", "7", "1", "1", "0", "0", "0", "0", "0", },
        {"Q", "5", "8", "2", "2", "0", "0", "0", "0", "0", },
        {"R", "6", "12", "1", "4", "0", "0", "0", "0", "0", },
        {"S", "3", "5", "2", "1", "0", "0", "0", "0", "0", },
        {"T", "4", "7", "2", "1", "0", "0", "0", "0", "0", },
        {"V", "5", "9", "1", "1", "0", "0", "0", "0", "0", },
        {"W", "11", "10", "1", "2", "0", "0", "0", "0", "0", },
        {"Y", "9", "9", "2", "1", "0", "0", "0", "0", "0", },
        {"NTERM", "0", "1", "0", "0", "0", "0", "0", "0", "0", },
        {"CTERM", "0", "1", "1", "0", "0", "0", "0", "0", "0", },
        {"*", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
        {"#", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
        {"@", "0", "0", "0", "0", "0", "0", "0", "0", "0", },
    };
    
    private DefaultTableModel isotopeLightElementModel = 
        new DefaultTableModel( this.DEFAULT_CELL_DATA, this.PROTEIN_COLUMNS) 
    {
        public boolean isCellEditable(int row, int column)
        {
            if(column==0)            
                return false;
            else
                return true;
        }        
    };
    
    private DefaultTableModel isotopeHeavyElementModel = 
        new DefaultTableModel( this.DEFAULT_CELL_DATA, this.PROTEIN_COLUMNS) 
    {
        public boolean isCellEditable(int row, int column)
        {
            //if(row==0 || column==0)
            if(column==0)                            
                return false;
            else
                return true;
        }        
    };
    
    /** Creates new form LabelingConfDialog */
    public LabelingConfDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();  
        
        initAdditional();
        
        this.mFrame = (RelExMainFrame)parent;   
    }
    
    private JTable heavyTable = null;
    private JTable lightTable = null;
    
    private void initAdditional()
    {
        
        heavyTable = new edu.scripps.pms.census.ColorTable();
        heavyTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        heavyTable.setModel(isotopeHeavyElementModel);
        jScrollPane3.setViewportView(heavyTable);
        
        lightTable = new edu.scripps.pms.census.ColorTable();
        lightTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lightTable.setModel(isotopeLightElementModel);
        jScrollPane1.setViewportView(lightTable);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        extMethodRadioGrp = new javax.swing.ButtonGroup();
        msmsExtRadioGrp = new javax.swing.ButtonGroup();
        msmsSpectraGrp = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        paramPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        quanScanType = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        isoFieldLabel = new javax.swing.JLabel();
        isoField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        enrichField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        maxWinField = new javax.swing.JTextField();
        isoFieldUnit = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        wholeEnvRadio = new javax.swing.JRadioButton();
        indivIsoRadio = new javax.swing.JRadioButton();
        envMargin = new javax.swing.JTextField();
        wholeEnvLabel = new javax.swing.JLabel();
        wholeEnvMZ = new javax.swing.JLabel();
        indMassLabel = new javax.swing.JLabel();
        massAccField = new javax.swing.JTextField();
        indPPMLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        statNumLabel = new javax.swing.JLabel();
        statNumComboBox = new javax.swing.JComboBox();
        stat2Label = new javax.swing.JLabel();
        stat2Field = new javax.swing.JTextField();
        stat1Label = new javax.swing.JLabel();
        stat1Field = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        msmsAutoRadio = new javax.swing.JRadioButton();
        msmsSpecificRadio = new javax.swing.JRadioButton();
        check114 = new javax.swing.JCheckBox();
        check115 = new javax.swing.JCheckBox();
        check116 = new javax.swing.JCheckBox();
        check117 = new javax.swing.JCheckBox();
        msmsMZ1 = new javax.swing.JLabel();
        msmsTolerance = new javax.swing.JLabel();
        msmsSpecificTolerance = new javax.swing.JTextField();
        msmsMZ2 = new javax.swing.JLabel();
        msmsSingleSpec = new javax.swing.JRadioButton();
        msmsMultipleSpec = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        fileSelectBtn = new javax.swing.JButton();
        saveToFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuration Dialog for Labeling");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Chromatogram Extraction"));

        quanScanType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MS", "MS/MS" }));
        quanScanType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quanScanTypeActionPerformed(evt);
            }
        });

        jLabel5.setText("Quantification Scan Type");

        isoFieldLabel.setText("Isolation Window");
        isoFieldLabel.setEnabled(false);

        isoField.setEditable(false);
        isoField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        isoField.setText("3");
        isoField.setEnabled(false);

        jLabel9.setText("Enrichment");

        enrichField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        enrichField.setText("0.98");

        jLabel13.setText("Max # Scans");

        maxWinField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxWinField.setText("50");

        isoFieldUnit.setText("m/z");
        isoFieldUnit.setEnabled(false);

        jLabel11.setText("a.p.e.");

        jLabel12.setText("scans");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(jLabel9)
                    .add(jLabel13)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(isoFieldLabel)))
                .add(22, 22, 22)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(maxWinField)
                    .add(enrichField)
                    .add(isoField)
                    .add(quanScanType, 0, 83, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel11)
                    .add(jLabel12)
                    .add(isoFieldUnit))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(quanScanType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .add(8, 8, 8)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(isoFieldLabel)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(isoField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(isoFieldUnit))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(enrichField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(maxWinField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Extraction Method"));

        extMethodRadioGrp.add(wholeEnvRadio);
        wholeEnvRadio.setSelected(true);
        wholeEnvRadio.setText("Whole Isotope Envelope");
        wholeEnvRadio.setActionCommand("1");
        wholeEnvRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        extMethodRadioGrp.add(indivIsoRadio);
        indivIsoRadio.setText("Individual Isotopes");
        indivIsoRadio.setActionCommand("2");
        indivIsoRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        envMargin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        envMargin.setText("0.3");

        wholeEnvLabel.setText("Envelope Margin");

        wholeEnvMZ.setText("m/z");

        indMassLabel.setText("Mass Accuracy");

        massAccField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        massAccField.setText("30");

        indPPMLabel.setText("ppm");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(wholeEnvLabel)
                        .add(35, 35, 35)
                        .add(envMargin, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(wholeEnvMZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(wholeEnvRadio)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(indMassLabel)
                                .add(48, 48, 48)
                                .add(massAccField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(indivIsoRadio))
                        .add(1, 1, 1)
                        .add(indPPMLabel)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(wholeEnvRadio)
                .add(7, 7, 7)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(wholeEnvMZ)
                    .add(envMargin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(wholeEnvLabel))
                .add(22, 22, 22)
                .add(indivIsoRadio)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(massAccField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(indPPMLabel)
                    .add(indMassLabel))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Labeling Info"));

        statNumLabel.setText("Number of States");

        statNumComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2" }));

        stat2Label.setText("State 2 name");

        stat2Field.setText("reference");
        stat2Field.setCaretPosition(6);

        stat1Label.setText("State 1 name");

        stat1Field.setText("sample");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(statNumLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(statNumComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(stat2Label)
                        .add(40, 40, 40)
                        .add(stat2Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(stat1Label)
                        .add(41, 41, 41)
                        .add(stat1Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statNumLabel)
                    .add(statNumComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stat1Label)
                    .add(stat1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stat2Label)
                    .add(stat2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("MSMS Frag Ions Extraction"));
        jPanel3.setEnabled(false);

        msmsExtRadioGrp.add(msmsAutoRadio);
        msmsAutoRadio.setSelected(true);
        msmsAutoRadio.setText("Automatic Fragment Ion Determination");
        msmsAutoRadio.setActionCommand("auto");
        msmsAutoRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        msmsAutoRadio.setEnabled(false);
        msmsAutoRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msmsAutoRadioActionPerformed(evt);
            }
        });

        msmsExtRadioGrp.add(msmsSpecificRadio);
        msmsSpecificRadio.setText("Specific Fragment Ion (e.g. iTRAQ)");
        msmsSpecificRadio.setActionCommand("specific");
        msmsSpecificRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        msmsSpecificRadio.setEnabled(false);
        msmsSpecificRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msmsSpecificRadioActionPerformed(evt);
            }
        });

        check114.setText("114");
        check114.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        check114.setEnabled(false);

        check115.setText("115");
        check115.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        check115.setEnabled(false);

        check116.setText("116");
        check116.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        check116.setEnabled(false);

        check117.setText("117");
        check117.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        check117.setEnabled(false);

        msmsMZ1.setText("m/z");
        msmsMZ1.setEnabled(false);

        msmsTolerance.setText("Tolerance");
        msmsTolerance.setEnabled(false);

        msmsSpecificTolerance.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        msmsSpecificTolerance.setText("0.5");
        msmsSpecificTolerance.setEnabled(false);

        msmsMZ2.setText("m/z");
        msmsMZ2.setEnabled(false);

        msmsSpectraGrp.add(msmsSingleSpec);
        msmsSingleSpec.setSelected(true);
        msmsSingleSpec.setText("single spectrum (data dependent)");
        msmsSingleSpec.setActionCommand("single");
        msmsSingleSpec.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        msmsSingleSpec.setEnabled(false);

        msmsSpectraGrp.add(msmsMultipleSpec);
        msmsMultipleSpec.setText("multiple spectra (MRM)");
        msmsMultipleSpec.setActionCommand("multiple");
        msmsMultipleSpec.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        msmsMultipleSpec.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(check114)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(check115))
                                    .add(msmsTolerance))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(msmsSpecificTolerance)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(msmsMZ2))
                                    .add(jPanel3Layout.createSequentialGroup()
                                        .add(check116)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(check117)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(msmsMZ1))))
                            .add(msmsSingleSpec)
                            .add(msmsMultipleSpec)))
                    .add(msmsAutoRadio)
                    .add(msmsSpecificRadio)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(msmsAutoRadio)
                .add(13, 13, 13)
                .add(msmsSpecificRadio)
                .add(14, 14, 14)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(check114)
                    .add(check115)
                    .add(check116)
                    .add(check117)
                    .add(msmsMZ1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(msmsTolerance)
                    .add(msmsMZ2)
                    .add(msmsSpecificTolerance, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(msmsSingleSpec)
                .add(13, 13, 13)
                .add(msmsMultipleSpec)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout paramPanelLayout = new org.jdesktop.layout.GroupLayout(paramPanel);
        paramPanel.setLayout(paramPanelLayout);
        paramPanelLayout.setHorizontalGroup(
            paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(paramPanelLayout.createSequentialGroup()
                .add(paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, paramPanelLayout.createSequentialGroup()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(paramPanelLayout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paramPanelLayout.setVerticalGroup(
            paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(paramPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(paramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(68, 68, 68))
        );

        jTabbedPane1.addTab("Parameters", paramPanel);

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.addTab("Light", jScrollPane1);

        jScrollPane3.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.addTab("Heavy", jScrollPane3);

        fileSelectBtn.setText("Open..");
        fileSelectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSelectBtnActionPerformed(evt);
            }
        });

        saveToFile.setText("Save..");
        saveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(246, 246, 246)
                        .add(fileSelectBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveToFile))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 461, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fileSelectBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(saveToFile))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msmsAutoRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msmsAutoRadioActionPerformed
// TODO add your handling code here:
        this.wholeEnvRadio.setEnabled(true);
        this.indivIsoRadio.setEnabled(true);
        this.envMargin.setEnabled(true);
        this.wholeEnvLabel.setEnabled(true);
        this.wholeEnvMZ.setEnabled(true);
        this.indMassLabel.setEnabled(true);
        this.massAccField.setEnabled(true);
        this.massAccField.setEnabled(true);
        this.indPPMLabel.setEnabled(true);
        
        this.statNumComboBox.setEnabled(true);
        this.statNumLabel.setEnabled(true);
        this.stat1Field.setEnabled(true);
        this.stat1Label.setEnabled(true);
        this.stat2Field.setEnabled(true);
        this.stat2Label.setEnabled(true);

        this.msmsSingleSpec.setEnabled(false);
        this.msmsMultipleSpec.setEnabled(false);
        
        this.check114.setEnabled(false);
        this.check115.setEnabled(false);
        this.check116.setEnabled(false);
        this.check117.setEnabled(false);
        this.msmsTolerance.setEnabled(false);
        
        this.msmsSpecificTolerance.setEnabled(false);
        this.msmsMZ1.setEnabled(false);
        this.msmsMZ2.setEnabled(false);        
        
    }//GEN-LAST:event_msmsAutoRadioActionPerformed

    private void msmsSpecificRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msmsSpecificRadioActionPerformed
// TODO add your handling code here:        
        this.wholeEnvRadio.setEnabled(false);
        this.indivIsoRadio.setEnabled(false);
        this.envMargin.setEnabled(false);
        this.wholeEnvLabel.setEnabled(false);
        this.wholeEnvMZ.setEnabled(false);
        this.indMassLabel.setEnabled(false);
        this.massAccField.setEnabled(false);
        this.massAccField.setEnabled(false);
        this.indPPMLabel.setEnabled(false);
        
        this.statNumComboBox.setEnabled(false);
        this.statNumLabel.setEnabled(false);
        this.stat1Field.setEnabled(false);
        this.stat1Label.setEnabled(false);
        this.stat2Field.setEnabled(false);
        this.stat2Label.setEnabled(false);
        
        this.msmsSingleSpec.setEnabled(true);
        this.msmsMultipleSpec.setEnabled(true);
        
        this.check114.setEnabled(true);
        this.check115.setEnabled(true);
        this.check116.setEnabled(true);
        this.check117.setEnabled(true);
        this.msmsTolerance.setEnabled(true);
        
        this.msmsSpecificTolerance.setEnabled(true);
        this.msmsMZ1.setEnabled(true);
        this.msmsMZ2.setEnabled(true);
        
    }//GEN-LAST:event_msmsSpecificRadioActionPerformed

    private void quanScanTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quanScanTypeActionPerformed
// TODO add your handling code here:
        JComboBox box = (JComboBox)evt.getSource();

        String item = box.getSelectedItem().toString();

        if("MS".equals(item))
        {
            this.isoField.setEnabled(false);
            this.isoField.setEditable(false);
            this.isoFieldLabel.setEnabled(false);   
            this.isoFieldUnit.setEnabled(false);
            
            //iTRAQ options            
            this.msmsAutoRadio.setEnabled(false);
            this.msmsSpecificRadio.setEnabled(false);
            this.msmsMZ1.setEnabled(false);
            this.msmsMZ2.setEnabled(false);
            this.msmsSpecificRadio.setEnabled(false);
            this.msmsSpecificTolerance.setEnabled(false);
            this.msmsTolerance.setEnabled(false);

            this.check114.setEnabled(false);
            this.check115.setEnabled(false);
            this.check116.setEnabled(false);
            this.check117.setEnabled(false);
                        
            this.wholeEnvRadio.setEnabled(true);
            this.indivIsoRadio.setEnabled(true);
            this.envMargin.setEnabled(true);
            this.wholeEnvLabel.setEnabled(true);
            this.wholeEnvMZ.setEnabled(true);
            this.indMassLabel.setEnabled(true);
            this.massAccField.setEnabled(true);
            this.massAccField.setEnabled(true);
            this.indPPMLabel.setEnabled(true);
            

            this.msmsSingleSpec.setEnabled(false);
            this.msmsMultipleSpec.setEnabled(false);

            this.check114.setEnabled(false);
            this.check115.setEnabled(false);
            this.check116.setEnabled(false);
            this.check117.setEnabled(false);
            this.msmsTolerance.setEnabled(false);
            
            this.msmsMZ1.setEnabled(false);
            this.msmsMZ2.setEnabled(false);
            
            this.statNumComboBox.setEnabled(true);
            this.statNumLabel.setEnabled(true);
            this.stat1Field.setEnabled(true);
            this.stat1Label.setEnabled(true);
            this.stat2Field.setEnabled(true);
            this.stat2Label.setEnabled(true);

        }
        else if("MS/MS".equals(item))
        {
            this.isoField.setEnabled(true);
            this.isoField.setEditable(true);
            this.isoFieldLabel.setEnabled(true);   
            this.isoFieldUnit.setEnabled(true);
            
            //iTRAQ options            
            this.msmsAutoRadio.setEnabled(true);
            this.msmsSpecificRadio.setEnabled(true);
            this.msmsMZ1.setEnabled(true);
            this.msmsMZ2.setEnabled(true);
            this.msmsSpecificRadio.setEnabled(true);
            this.msmsSpecificTolerance.setEnabled(true);
            
            if(!msmsSpecificRadio.isSelected())
            {
                this.statNumComboBox.setEnabled(true);
                this.statNumLabel.setEnabled(true);
                this.stat1Field.setEnabled(true);
                this.stat1Label.setEnabled(true);
                this.stat2Field.setEnabled(true);
                this.stat2Label.setEnabled(true);                
            }
            
//            this.msmsTolerance.setEnabled(true);
            
//            this.check114.setEnabled(true);
  //          this.check115.setEnabled(true);
    //        this.check116.setEnabled(true);
      //      this.check117.setEnabled(true);
                        
        }
    }//GEN-LAST:event_quanScanTypeActionPerformed

    private void saveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileActionPerformed
// TODO add your handling code here:

        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Save Configuration file");
        choose.setApproveButtonText("Create");
       
	currentFolder = new File(mFrame.getCurrentDirectory());
	
        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        //choose.addChoosableFileFilter( new SimpleFileNameFilter("txt", "CenSus Report File (*.txt)") );
        
        File f = new File("census_config.xml");
        choose.setSelectedFile(f);        
        
        int returnVal = choose.showOpenDialog(this);        

        if(returnVal == choose.CANCEL_OPTION)
            return;
        
        setVisible(false);
        dispose();
        
        File file = choose.getSelectedFile();        
        //mFrame.mergeFiles(listModel.toArray(), file);
	mFrame.setCurrentDirectory(currentFolder);
        
        Element rootEle = new Element("config");
        Element labelType = new Element("label_type");        
        labelType.setAttribute("labeling", "true");
        Element name = new Element("name");
        name.addContent("sample");
        labelType.addContent(name);        
        name = new Element("name");
        name.addContent("reference");
        labelType.addContent(name);
        
        StringBuffer expTypeSb = new StringBuffer();
        expTypeSb.append("experiment type tag.").append("\n");
        expTypeSb.append("Note.  Currently this tag requires only for iTRAQ and data independent experiment.").append("\n");
        expTypeSb.append("13: iTRAQ single spectrum monotoring experiment").append("\n");
        expTypeSb.append("14: iTRAQ multiple spectra monotoring experiment").append("\n");
        expTypeSb.append("15: data independent experiment").append("\n");
        expTypeSb.append("20: MRM experiment").append("\n");

        Element expType = new Element("experiment_type");
        
        if( "MS/MS".equals(this.quanScanType.getModel().getSelectedItem().toString()) )
            if(this.msmsAutoRadio.isSelected())            
                expType.addContent("15");
        else if(this.msmsSpecificRadio.isSelected())
            if(this.msmsSingleSpec.isSelected())
                expType.addContent("13");
            else if(this.msmsMultipleSpec.isSelected())
                expType.addContent("14");                 
                        
        Element paramEle = new Element("params");
        Element eachParam = new Element("scan_type");
        eachParam.addContent(this.quanScanType.getModel().getSelectedItem().toString());        
        paramEle.addContent(eachParam);
        
        if( !this.msmsSpecificRadio.isSelected() )
        {
            eachParam = new Element("extract_method");                
            eachParam.addContent(this.extMethodRadioGrp.getSelection().getActionCommand());
            paramEle.addContent(eachParam);

            eachParam = new Element("mass_accuracy");

            if( "1".equals(this.extMethodRadioGrp.getSelection().getActionCommand()) )
            {
                eachParam.setAttribute("unit", "mz");
                eachParam.addContent(this.envMargin.getText());
            }
            else
            {
                eachParam.setAttribute("unit", "ppm");
                eachParam.addContent(this.massAccField.getText());
            }
            
            paramEle.addContent(eachParam);
        }
           

        eachParam = new Element("enrich");
        eachParam.addContent(this.enrichField.getText());
        paramEle.addContent(eachParam);
        

        if(this.isoField.isEnabled())
        {
            eachParam = new Element("iso_window");
            eachParam.addContent(this.isoField.getText());
            paramEle.addContent(eachParam);            
        }
        
        //eachParam = new Element("start_mass");
        //eachParam.addContent(this.startMassField.getText());
        //paramEle.addContent(eachParam);
        
        //eachParam = new Element("end_mass");
        //eachParam.addContent(this.endMassField.getText());
        //paramEle.addContent(eachParam);
        
        
        eachParam = new Element("max_win");
        eachParam.addContent(this.maxWinField.getText());
        paramEle.addContent(eachParam);
        
        //msms fragment ion extraction params
        Element msmsFragExtParamEle = new Element("msms_params");
        
        Element msmsFragTypeEle = new Element("frag_ext_type");
        String msmsFragType = this.msmsExtRadioGrp.getSelection().getActionCommand();
        
        msmsFragTypeEle.setAttribute("type", msmsFragType);
        
        Element spectrumEle = new Element("spectrum"); //multiple or single for iTRAQ
        spectrumEle.setText( this.msmsSpectraGrp.getSelection().getActionCommand() );

        msmsFragTypeEle.addContent(spectrumEle);
        
        if( "specific".equals(msmsFragType) )
        {
            if(this.check114.isSelected())
            {
                Element tmpEle = new Element("specific_mass");
                tmpEle.setText(this.check114.getActionCommand());
                msmsFragTypeEle.addContent(tmpEle);
            }
            
            if(this.check115.isSelected())
            {
                Element tmpEle = new Element("specific_mass");
                tmpEle.setText(this.check115.getActionCommand());
                msmsFragTypeEle.addContent(tmpEle);
            }
            
            if(this.check116.isSelected())
            {
                Element tmpEle = new Element("specific_mass");
                tmpEle.setText(this.check116.getActionCommand());
                msmsFragTypeEle.addContent(tmpEle);
            }
            
            if(this.check117.isSelected())
            {
                Element tmpEle = new Element("specific_mass");
                tmpEle.setText(this.check117.getActionCommand());
                msmsFragTypeEle.addContent(tmpEle);
            }      
            
            
            Element msmsTolEle = new Element("msms_tolerance");
            msmsTolEle.setText(this.msmsSpecificTolerance.getText());
            msmsFragTypeEle.addContent(msmsTolEle);
        }

        msmsFragExtParamEle.addContent(msmsFragTypeEle);        

            //eachParam.addContent(this.extMethodRadioGrp.getSelection().getActionCommand());

        if( "MS/MS".equals(this.quanScanType.getModel().getSelectedItem().toString()) )
	    paramEle.addContent( msmsFragExtParamEle );
	    
        TableModel model = this.lightTable.getModel();
                
        //String[] chemArr = {"C", "H", "O", "N", "S", "P", "15N", "2H", "13C", };
        
        Element eleCompEle = new Element("element_comp");
        Element eachSampleEle = new Element("each_sample");
        
        for(int i=0;i<this.lightTable.getRowCount();i++)
        {
            Element residueEle = new Element("residue");
            residueEle.setAttribute("name", this.lightTable.getValueAt(i,0).toString());
            
            Element eachValue = null;
            
            for(int j=1;j<this.lightTable.getColumnCount();j++)
            {                
                eachValue = new Element( "ele_" + PROTEIN_COLUMNS[j] );                
                eachValue.addContent(this.lightTable.getValueAt(i,j).toString());
                residueEle.addContent(eachValue);                
            }            
            eachSampleEle.addContent(residueEle);            
        }
        
        eleCompEle.addContent(eachSampleEle);
        
        eachSampleEle = new Element("each_sample");
        
        for(int i=0;i<this.heavyTable.getRowCount();i++)
        {
            Element residueEle = new Element("residue");
            residueEle.setAttribute("name", this.heavyTable.getValueAt(i,0).toString());
            
            Element eachValue = null;
            
            for(int j=1;j<this.heavyTable.getColumnCount();j++)
            {                
                eachValue = new Element( "ele_" + PROTEIN_COLUMNS[j] );                
                //eachValue.setAttribute("value", this.heavyTable.getValueAt(i,j).toString());
                eachValue.addContent(this.heavyTable.getValueAt(i,j).toString());                        
                residueEle.addContent(eachValue);                
            }            
            eachSampleEle.addContent(residueEle);            
        }
        
        eleCompEle.addContent(eachSampleEle);
        
        rootEle.addContent(labelType);
        rootEle.addContent(new Comment(expTypeSb.toString()));
        rootEle.addContent(expType);        
        rootEle.addContent(paramEle);
        rootEle.addContent(eleCompEle);
        
        try 
        {
            Document doc = new Document(rootEle);
            OutputStream os = new FileOutputStream(file); //(filePath + "census_chro.xml");
            XMLOutputter outputter = new XMLOutputter();
            outputter.setFormat(Format.getPrettyFormat());
            outputter.output(doc, os);
            os.close();    
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(this, "Error: " + e, "Error", JOptionPane.ERROR_MESSAGE);
        }
        
//        JOptionPane.showMessageDialog(this, "configuration file was successfully saved", "Saved", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_saveToFileActionPerformed

    private void selectiTRAQData(Element paramEle)
    {
        this.msmsSpecificRadio.setSelected(true);
        msmsSpecificRadioActionPerformed(null);    

        Element msmsParamEle = paramEle.getChild("msms_params");
        

        if(null != msmsParamEle)
        {
            Element fragExtEle = msmsParamEle.getChild("frag_ext_type");
            
            if(null != fragExtEle)
            {
                List<Element> massList = fragExtEle.getChildren("specific_mass");
                String msmsTol = fragExtEle.getChildText("msms_tolerance");
                
                if(null != msmsTol)
                    this.msmsSpecificTolerance.setText(msmsTol);
                
                for(Iterator<Element> itr=massList.iterator(); itr.hasNext(); )
                {
                    int eachValue = Integer.parseInt( itr.next().getText() );

                    switch(eachValue)
                    {
                        case 114 :
                            this.check114.setSelected(true);
                            break;

                        case 115 :
                            this.check115.setSelected(true);
                            break;

                        case 116 :
                            this.check116.setSelected(true);
                            break;

                        case 117 :
                            this.check117.setSelected(true);
                            break;

                        default :
                            break;

                    }

                }                
            }

        }
        
    }
    
    
    private void fileSelectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSelectBtnActionPerformed
// TODO add your handling code here:
        JFileChooser choose = new JFileChooser();
        choose.setMultiSelectionEnabled(false);
        choose.setDialogTitle("Select configuration File");

        if(currentFolder != null)
            choose.setCurrentDirectory(currentFolder);

        //String[] extArr = {"xml", "ini", };
        String[] extArr = {"xml", };
        
        choose.addChoosableFileFilter( new SimpleFileNameFilter(extArr, "configuration file") );

        int returnVal = choose.showOpenDialog(this);
        File file = choose.getSelectedFile();
                    
        if(null==file)
            return;
        
        try {
            //listModel.addElement(file.getAbsolutePath());
            SAXBuilder builder = new SAXBuilder();

            Document doc = builder.build(file);
            Element rootEle = doc.getRootElement();

            IsotopeReader reader = new IsotopeReader(rootEle);
            
            IsotopeTable<String, int[]> ht = reader.getIsotope();
            
            String labelingType = rootEle.getChild("label_type").getAttributeValue("labeling");
            
            if(!"true".equals(labelingType))
            {
                JOptionPane.showMessageDialog(this, "Please open config file for labeling data", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
                
            Element paramEle = rootEle.getChild("params");
            
            String expId = rootEle.getChildText("experiment_type");
           
            if(null != expId && !"".equals(expId))
            {      
                int expIntId = Integer.parseInt(expId);
    
                switch(expIntId)
                {
                    case CensusConstants.MSMS_SPECIFIC_MULTIPLE_MASS :
                        this.msmsMultipleSpec.setSelected(true);
                        selectiTRAQData(paramEle);
                        break;
                        
                    case CensusConstants.MSMS_SPECIFIC_SINGLE_MASS :                        
                        this.msmsSingleSpec.setSelected(true);
                        selectiTRAQData(paramEle);                        
                        break;
                        
                    default :
                        break;
                                            
                }
                
            }
            
            String scanType = paramEle.getChildText("scan_type");
            this.quanScanType.setSelectedItem( scanType );
            
            String isoWindow = paramEle.getChildText("iso_window");
            if(null != isoWindow)
                this.isoField.setText(isoWindow);
            
            String extMethod = paramEle.getChildText("extract_method");
            Element massEle = paramEle.getChild("mass_accuracy");
            if( "1".equals(extMethod) )
            {
                this.wholeEnvRadio.setSelected(true);
                this.indivIsoRadio.setSelected(false);
                
                this.envMargin.setText( massEle.getText() );
            }
            else if( "2".equals(extMethod) )
            {
                this.wholeEnvRadio.setSelected(false);
                this.indivIsoRadio.setSelected(true);
                
                this.massAccField.setText( massEle.getText() );
            }
            
            this.enrichField.setText( paramEle.getChildText("enrich") );
            this.maxWinField.setText( paramEle.getChildText("max_win") );

            for(int i=0;i<ElementComposition.AMINO_ACIDS.length;i++)
            {
                //ElementComposition element = new ElementComposition(ElementComposition.AMINO_ACIDS[i], ht);
                
                int[] samArr = ht.get("sample" + ElementComposition.AMINO_ACIDS[i]);
                int[] refArr = ht.get("ref" + ElementComposition.AMINO_ACIDS[i]);
                                                
                for(int j=0;j<samArr.length;j++)
                {
                    this.isotopeLightElementModel.setValueAt(samArr[j], i, j+1);
                }                
                
                for(int j=0;j<refArr.length;j++)
                {
                    this.isotopeHeavyElementModel.setValueAt(refArr[j], i, j+1);
                }                
                
            }
            
        } catch (IOException e)
        {
            JOptionPane.showMessageDialog(this, "Failed to open Element Compositon File: " + e, "Failed to open Element Compositon File", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Failed to open Element Compositon File: " + e, "Failed to open Element Compositon File", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        
        this.currentFolder = file.getAbsoluteFile();
        this.mFrame.setCurrentDirectory(file);
        
        //fileList.setModel(listModel);
    }//GEN-LAST:event_fileSelectBtnActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabelingConfDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox check114;
    private javax.swing.JCheckBox check115;
    private javax.swing.JCheckBox check116;
    private javax.swing.JCheckBox check117;
    private javax.swing.JTextField enrichField;
    private javax.swing.JTextField envMargin;
    private javax.swing.ButtonGroup extMethodRadioGrp;
    private javax.swing.JButton fileSelectBtn;
    private javax.swing.JLabel indMassLabel;
    private javax.swing.JLabel indPPMLabel;
    private javax.swing.JRadioButton indivIsoRadio;
    private javax.swing.JTextField isoField;
    private javax.swing.JLabel isoFieldLabel;
    private javax.swing.JLabel isoFieldUnit;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField massAccField;
    private javax.swing.JTextField maxWinField;
    private javax.swing.JRadioButton msmsAutoRadio;
    private javax.swing.ButtonGroup msmsExtRadioGrp;
    private javax.swing.JLabel msmsMZ1;
    private javax.swing.JLabel msmsMZ2;
    private javax.swing.JRadioButton msmsMultipleSpec;
    private javax.swing.JRadioButton msmsSingleSpec;
    private javax.swing.JRadioButton msmsSpecificRadio;
    private javax.swing.JTextField msmsSpecificTolerance;
    private javax.swing.ButtonGroup msmsSpectraGrp;
    private javax.swing.JLabel msmsTolerance;
    private javax.swing.JPanel paramPanel;
    private javax.swing.JComboBox quanScanType;
    private javax.swing.JButton saveToFile;
    private javax.swing.JTextField stat1Field;
    private javax.swing.JLabel stat1Label;
    private javax.swing.JTextField stat2Field;
    private javax.swing.JLabel stat2Label;
    private javax.swing.JComboBox statNumComboBox;
    private javax.swing.JLabel statNumLabel;
    private javax.swing.JLabel wholeEnvLabel;
    private javax.swing.JLabel wholeEnvMZ;
    private javax.swing.JRadioButton wholeEnvRadio;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel listModel = new DefaultListModel();
    
}
