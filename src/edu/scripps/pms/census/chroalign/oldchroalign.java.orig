package edu.scripps.pms.relex.chroalign;

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
import edu.scripps.pms.util.io.SpectrumReader;
import edu.scripps.pms.util.io.SpectrumIndexReader;
import edu.scripps.pms.util.spectrum.*;
import edu.scripps.pms.util.spectrum.Peak;
import edu.scripps.pms.util.spectrum.Point;
import edu.scripps.pms.util.spectrum.PeakList;
import edu.scripps.pms.util.spectrum.PointList;
import edu.scripps.pms.util.spectrum.Zline;
import edu.scripps.pms.relex.chroalign.Elements;
import edu.scripps.pms.relex.util.BasePeakFinder;
import org.jdom.*;
import org.jdom.output.*;
import edu.scripps.pms.relex.model.*;

public class oldchroalign {
	public static final int MAX_ARRAY_SIZE =1000;
	public static final int MAX_TIME_ELEMENTS = 7000;
	public static final int DEFAULTSPECTRUMSIZE = 7000;
	public static final int BANDCONSTRAINT = 1001;
        private int             halfBandConstraint = (int)BANDCONSTRAINT/2;
	double[][] 		target = new double[2][MAX_TIME_ELEMENTS];
        double[][] 		reference = new double[2][MAX_TIME_ELEMENTS];
        double[][][]            dataarray = new double[100][2][MAX_TIME_ELEMENTS];
	PeakList[]		temptarget = new PeakList[MAX_TIME_ELEMENTS];
	PeakList[]              tempreference = new PeakList[MAX_TIME_ELEMENTS];
	Elements[][] 		matrix = new Elements[MAX_TIME_ELEMENTS][MAX_TIME_ELEMENTS];
	int[][]			pathArray = new int[2][2*MAX_TIME_ELEMENTS];
	int 			maxi = 0;
	int 			maxj = 0;

        public static void main(String args[]) throws Exception {
                oldchroalign                appObject = new oldchroalign();
		System.out.println("Starting Chroalign...");

		if(args.length<2) {
                        appObject.usage();
                        System.exit(0);
                }
		appObject.Go(args);
        }

	public void Go(String[] args) throws IOException {
                String          referenceMS1File;
		String          targetMS1File;
                Runtime         systemCommand = Runtime.getRuntime();
                Process         process;
                Element         root;
                String[]        datasetnames = null;
	
		referenceMS1File = args[0];
		targetMS1File = args[1];
                
		try {
			System.out.println("Reading MS1Files ...");
			SpectrumReader refms1 = new SpectrumReader(referenceMS1File, "ms1");
			SpectrumReader tarms1 = new SpectrumReader(targetMS1File, "ms1");
	                System.out.println("Generating local distance matrix ...");
			test_genCostMatrix(refms1, tarms1);
			System.out.println("Generating cumulative distance matrix ...");
			//genCumCostMatrix();
			test_genCumCostMatrix();

			for(int i=0;i<matrix.length;i++)
			{
			    for(int j=0;j<matrix[i].length;j++)
			    {
				if(null != matrix[i][j])
				    System.out.print(matrix[i][j].element + "\t");
			    }

			    System.out.println("");
			}
			    

			System.out.println("Finding path ...");
			findPath();
			System.out.println("Outputting results ...");
                        //root = createXmlHeader();
                        //dataarray[0] = reference;
                        //dataarray[1] = target;
                        //root = createChrodata(root, dataarray, datasetnames);
			//test_writeOutputFile(root, "test_chro_out.xml");
                        writeOutputFile();

		} catch(IOException failure) {
                        System.out.println("Error while reading MS1 files");
                        System.out.println(failure.toString());
		}
        }
	
	public void genCumCostMatrix() {

		double	dmin = 0.0;
		int 	i;
		int	j;
		int	index = 0;
		double	tt;
		double	dd;
		double	dd1;
		double	dd2;
		double	dd3;

		for (i=1;i<maxi+1;i++) { //first for loop for rows
  			for (j=1;j<maxj+1;j++) { //second for loop for columns
				if (i!=maxi && j!=maxj) {
					tt = (double)((double)maxj/(double)j);
                                        tt = (double)(maxi / tt);
                                        tt = i-tt;
						//check each of three possible points and assign minimum local cost to dmin and
						// index so can later find lowest path
						dd = matrix[i+1][j+1].element;
						dd1 = matrix[i][j].element+dd;
						dd2 = matrix[i][j+1].element+dd;
						dd3 = matrix[i+1][j].element+dd;
						if(dd1 <= dd2 && dd1 <= dd3) {
							index = 1;
							dmin = dd1;
						} else if (dd2 < dd1 && dd2 < dd3) {
							index = 2;
							dmin = dd2;
						} else if (dd3 < dd1 && dd3 < dd2) {
							index = 3;
							dmin = dd3;
						} else {
							System.out.println("Error calculating cumulative distances!");
							System.out.println("i " + i + " j " + j + "\t" + "1 " + matrix[i][j].element + "\t" + "2 " + matrix[i][j+1].element + "\t" + "3 " + matrix[i+1][j].element);
							//choose diagonal
							index = 1;
							dmin = dd1;
							//System.exit(0);
						}
						matrix[i+1][j+1].element = dmin; //assigns cululative cost to matrix(i+1,j+1)
						if (Math.abs(tt) < BANDCONSTRAINT) {
							matrix[i][j].index = index;
						
						} else {
							//System.out.println("band limit\ti " + i + " j " + j + " tt " + tt);
							matrix[i][j].index = 4;
						}
				} else {
					matrix[i][j].index = 1;
				}
			}
		}

	
	}

	public void test_genCumCostMatrix() {
                                                                                                                                                             
                double  dmin = 0.0;
                int     i;
                int     j;
                int     index = 0;
                double  tt;
		double	dd;
		double  dd1;
		double	dd2;
		double	dd3;
		String	t1;
		String	t2;
		String	t3;
		String tstr;
		String  TString = "0.###";
                DecimalFormat    formatter = new DecimalFormat(TString);
		double[][]	tempLocalCostArray = new double[2][maxj+2];
		boolean		findMin = true;
		boolean		findMax = false;
                boolean         printinfo;

                System.out.println("maxi = " + maxi + "\tmaxj = " + maxj);                                                                                                                                         
                for (i=2;i<maxi+1;i++) { //first for loop for rows
			//put local costs into temporary array
			if (i==2) {
				for (j=0;j<maxj+2;j++) {//for first two columns do this
                                	tempLocalCostArray[0][j] = matrix[i][j].element;
                                	tempLocalCostArray[1][j] = matrix[i+1][j].element;
				}
			} else {
				for (j=0;j<maxj+2;j++) {//for remaining columns do this
					tempLocalCostArray[0][j] = tempLocalCostArray[1][j];
                                        tempLocalCostArray[1][j] = matrix[i+1][j].element;
                                }
			}
                        for (j=2;j<maxj+1;j++) { //second for loop for columns
					tt = (double)((double)maxj/(double)j);
                                        tt = (double)(maxi / tt);
                                        tt = i-tt;
					matrix[i][j].index = index;
					//check each of three possible points (i-1,j-1), (i-2,j-1), and (i-1,j-2) and assign minimum local cost 
					//to dmin and index so can later find lowest path
					dd = tempLocalCostArray[1][j+1];
					dd1 = matrix[i][j].element+2*dd;
					dd2 = matrix[i-1][j].element + 2*tempLocalCostArray[0][j+1] + dd;
					dd3 = matrix[i][j-1].element + 2*tempLocalCostArray[1][j] + dd;
                                        /*if(i==27 && j==520) {
                                            printinfo = true;
                                            System.out.println("i = " + i + "\tj = " + j);
                                            System.out.println("reference = " + reference[1][i-1] + "\ttarget = " + target[1][j-1]);
                                            System.out.println("dd = " + dd);
                                            System.out.println("dd1 = " + dd1 + "\tcumscore = " + matrix[i][j].element);
                                            System.out.println("dd2 = " + dd2 + "\tcumscore = " + matrix[i-1][j].element + "\tlocalscore = " +  tempLocalCostArray[0][j+1]);
                                            System.out.println("dd3 = " + dd3 + "\tcumscore = " + matrix[i][j-1].element + "\tlocalscore = " +  tempLocalCostArray[1][j]);
                                            System.out.println("dd = " + dd + "\tdd1 = " + dd1 + "\tdd2 = " + dd2 + "\tdd3 = " + dd3);
                                        }*/
					if (findMin) { 			
						if(dd1 <= dd2 && dd1 <= dd3) {
							//System.out.println("index = 1	1 " + dd1 + "\t" + "2 " + dd2 + "\t" + "3 " + dd3);
							index = 1;
							dmin = dd1;
						} else if (dd2 < dd1 && dd2 < dd3) {
							//System.out.println("index = 2   1 " + dd1 + "\t" + "2 " + dd2 + "\t" + "3 " + dd3);
							index = 2;
							dmin = dd2;
						} else if (dd3 < dd1 && dd3 < dd2) {
							//System.out.println("index = 3   1 " + dd1 + "\t" + "2 " + dd2 + "\t" + "3 " + dd3);
							index = 3;
							dmin = dd3;
						} else {
							System.out.println("No minimum cumulative distance. Choosing diagonal!");
							t1 = formatter.format(dd1);
							t2 = formatter.format(dd2);
							t3 = formatter.format(dd3);
							System.out.println("i " + i + " j " + j + "\t" + "1 " + t1 + "\t" + "2 " + t2 + "\t" + "3 " + t3);
							//choose diagonal
							index = 1;
							dmin = dd1;
						}
					} else if (findMax) {
						if(dd1 >= dd2 && dd1 >= dd3) {
                                                        //System.out.println("index = 1 1 " + dd1 + "\t" + "2 " + dd2 + "\t" + "3 " + dd3);
                                                        index = 1;
                                                        dmin = dd1;
                                                } else if (dd2 > dd1 && dd2 > dd3) {
                                                        //System.out.println("index = 2   1 " + dd1 + "\t" + "2 " + dd2 + "\t" + "3 " + dd3);
                                                        index = 2;
                                                        dmin = dd2;
                                                } else if (dd3 > dd1 && dd3 > dd2) {
                                                        //System.out.println("index = 3   1 " + dd1 + "\t" + "2 " + dd2 + "\t" + "3 " + dd3);
                                                        index = 3;
                                                        dmin = dd3;
                                                } else {
                                                        System.out.println("No minimum cumulative distance. Choosing diagonal!");
                                                        t1 = formatter.format(dd1);
                                                        t2 = formatter.format(dd2);
                                                        t3 = formatter.format(dd3);
                                                        System.out.println("i " + i + " j " + j + "\t" + "1 " + t1 + "\t" + "2 " + t2 + "\t" + "3 " + t3);
                                                        //choose diagonal
                                                        index = 1;
                                                        dmin = dd1;
                                                }
					}
					matrix[i+1][j+1].element = dmin; //assigns cululative cost to matrix(i,j)
					if (Math.abs(tt) < BANDCONSTRAINT) {
						matrix[i][j].index = index;	
					} else {
						matrix[i][j].index = 4;
					}
                        }
                }
	}

	public void findPath() {
		int 	i = maxi+1;
		int 	j = maxj+1;
		int	index = 0;
		int	cnt = 0;
		double	temp;
                StringBuffer    tString;
                int rowcnt;
                String          TString = "0.#";
                DecimalFormat   formatter = new DecimalFormat(TString);
                oldchroalign    app = new oldchroalign();
		
		
                
                for (j=maxj+2;j>2;j--) { //second for loop for columns                  
                    tString = new StringBuffer();
                    rowcnt = 0;
                    for (i=2;i<maxi;i++) { //first for loop for rows
                        //if(nmatrix.containsKey( i + "," + j )) {
                        if (j<=maxj) {
                            //if (AlignNode.checkWithinBound(halfBandConstraint, i, j)) {     
                                tString.append(formatter.format(Math.log10(matrix[i][j].element)) + "\t");
                                rowcnt++;
                            //} else {
                            //    tString.append("0\t");
                            //}
                        } else {
                            if (j==maxj+1) {
                                tString.append(i + "\t");
                            } else {
                                tString.append("\t");
                            }
                        }
                    }
                    //tString.deleteCharAt(tString.lastIndexOf("\t"));
                    tString.append("\n");
                    //if (rowcnt > 0) {
                        if (j == maxj+2) {
                            app.writeOutputLine("oldchro.txt", tString, false);
                        } else { 
                           app.writeOutputLine("oldchro.txt", tString, true);
                        }
                    //}
                    
                }
                

//start at top right hand corner of matrix and find path down to bottom left corner
                i = maxi+1;
                j = maxj+1;
		i--;
		j--;
		while (i > 2 && j > 2 ) {
			index = matrix[i][j].index;
			temp = 0;
  			if (index == 1) {
				//System.out.println("index = 1");
    				i = i-1;
    				j = j-1;
  			} else if (index == 2) {
				//System.out.println("index = 2");
    				i = i-2;
				j = j-1;
				//i = i-1;
  			} else if (index == 3) {
				//System.out.println("index = 3");
				i = i-1;
				j = j-2;
				//j = j-1;
			} else if (index == 4) {
				//System.out.println("index = 4");
				temp =(double)((double)maxj/(double)j);
				temp = (double)maxi/temp;
				temp = i - temp;
				if(temp <= -BANDCONSTRAINT + 10) {
					j = j-1;
				} else if (temp >= BANDCONSTRAINT - 10) {
					i = i-1;
				} else {
					System.out.println("> BANDCONSTRAINT: temp=" + temp);
					System.exit(0);
				}
  			} else {    
    				System.out.println("error finding path!");
				System.exit(0);
  			}
  			pathArray[0][cnt] = i;
  			pathArray[1][cnt] = j;
			cnt++;
		}	
	}

	public void genCostMatrix (SpectrumReader refms1, SpectrumReader tarms1) {
		Iterator<Peak> peaks;
		PeakList        list;
		Peak            bpeak;
		double		rt;
		int 		n;
		int 		m;
		int 		i;
		int 		j;
		boolean		useBasePeak = true;
		String[]	content = null;
		BasePeakFinder	bpf;

		try { 
			Iterator<PeakList> refList = refms1.getSpectra();
                	Iterator<PeakList> tarList = tarms1.getSpectra();

			//put reference data into reference array
			int cnt = 0;
			while (refList.hasNext()) {
				list = refList.next();
				List<String> rtList = list.getIlines();
				content = rtList.get(0).split("\t");
				rt = new Double(content[2]).doubleValue(); 
				peaks = list.getPeaks();
				if(useBasePeak) {
					if (cnt<MAX_TIME_ELEMENTS) {
						//try to make work on base peak chromatogram first
						bpeak = basePeak(peaks);
						reference[0][cnt] = rt;
						reference[1][cnt] = bpeak.getIntensity();
					}
				}
				cnt++;
			}
			maxi = cnt;
			
			cnt = 0;
			 //put target data into target array
			while (tarList.hasNext()) {
				list = tarList.next();
				List<String> rtList = list.getIlines();
				content = rtList.get(0).split("\t");
				rt = new Double(content[2]).doubleValue();
				peaks = list.getPeaks();
				if(useBasePeak) {
					if (cnt<MAX_TIME_ELEMENTS) {
						//try to make work on base peak chromatogram first
						bpeak = basePeak(peaks);
						target[0][cnt] = rt;
						target[1][cnt] = bpeak.getIntensity();
					}
				}
				cnt++;
			}
			maxj = cnt;
		/*
			//smooth chromatograms
			System.out.println("Smoothing chromatograms ...");
			int[]	temp = new int[maxi];
			for(i=0;i<maxi;i++) {
				temp[i] = (int)reference[1][i];
			} 
			bpf = new BasePeakFinder();
			temp = bpf.smoothCurve(temp);
			for(i=0;i<maxi;i++) {
                                reference[1][i] = temp[i];
                        }
			temp = new int[maxj];
			for(i=0;i<maxj;i++) {
                                temp[i] = (int)target[1][i];
                        }
                        bpf = new BasePeakFinder();
			temp = bpf.smoothCurve(temp);
                        for(i=0;i<maxj;i++) {
                                target[1][i] = temp[i];
                        }*/

			System.out.println("Creating elements ...");
			//create Elements objects and put into matrix
			for (i=0;i<maxi+2;i++) {
				for (j=0;j<maxj+2;j++) {
					matrix[i][j] = new Elements(); //this part is very slow should change somehow
				}
			}
			
			System.out.println("Calculating distances ...");
			//calc euclidian distance and put into matrix
			for(i=2;i<maxi+2;i++) {
				for(j=2;j<maxj+2;j++) {
					matrix[i][j].element = euclidianDis(reference[1][i-1], target[1][j-1]);
				}
			}
			
		} catch (IOException e) {
			 System.out.println("Error while parsing MS1 files");
        	         System.out.println(e.toString());
                }
	}

	public void test_genCostMatrix (SpectrumReader refms1, SpectrumReader tarms1) {
                Iterator<Peak> peaks;
                PeakList        list;
                Peak            bpeak;
		Peak            tpeak;
                double          rt;
                int             n;
                int             m;
                int             i;
                int             j;
                boolean         useBasePeak = true;
		boolean         useDotProduct = false;
                String[]        content = null;
                BasePeakFinder  bpf;
                                                                                                                                                             
                try {
                        Iterator<PeakList> refList = refms1.getSpectra();
                        Iterator<PeakList> tarList = tarms1.getSpectra();
                                                                                                                                                             
                        //put reference data into reference array
                        int cnt = 0;
                        while (refList.hasNext()) {
                                list = refList.next();
                                List<String> rtList = list.getIlines();
                                content = rtList.get(0).split("\t");
                                rt = new Double(content[2]).doubleValue();
                                peaks = list.getPeaks();
                                //if(useBasePeak) {
                                        if (cnt<MAX_TIME_ELEMENTS) {
                                                //try to make work on base peak chromatogram first
                                                bpeak = basePeak(peaks);
                                                reference[0][cnt] = rt;
                                                reference[1][cnt] = bpeak.getIntensity();
                                        }
                                if (useDotProduct) {
					if (cnt<MAX_TIME_ELEMENTS) {
                                                tempreference[cnt] = list;
                                        }
				}
                                cnt++;
                        }
                        maxi = cnt;
                                                                                                                                                             
                        cnt = 0;
                         //put target data into target array
                        while (tarList.hasNext()) {
                                list = tarList.next();
                                List<String> rtList = list.getIlines();
                                content = rtList.get(0).split("\t");
                                rt = new Double(content[2]).doubleValue();
                                peaks = list.getPeaks();
                                //if(useBasePeak) {
                                        if (cnt<MAX_TIME_ELEMENTS) {
					 //try to make work on base peak chromatogram first
                                                bpeak = basePeak(peaks);
                                                target[0][cnt] = rt;
                                                target[1][cnt] = bpeak.getIntensity();
                                        }
                                if (useDotProduct) {
                                        if (cnt<MAX_TIME_ELEMENTS) {
                                                temptarget[cnt] = list;
                                        }
                                }
                                cnt++;
                        }
                        maxj = cnt;
                /*
                        //smooth chromatograms
                        System.out.println("Smoothing chromatograms ...");
                        int[]   temp = new int[maxi];
                        for(i=0;i<maxi;i++) {
                                temp[i] = (int)reference[1][i];
                        }
                        bpf = new BasePeakFinder();
                        temp = bpf.smoothCurve(temp);
                        for(i=0;i<maxi;i++) {
                                reference[1][i] = temp[i];
                        }
                        temp = new int[maxj];
                        for(i=0;i<maxj;i++) {
                                temp[i] = (int)target[1][i];
                        }
                        bpf = new BasePeakFinder();
                        temp = bpf.smoothCurve(temp);
                        for(i=0;i<maxj;i++) {
                                target[1][i] = temp[i];
                        }*/
                                                                                                                                                             
                        System.out.println("Creating elements ...");
                        //create Elements objects and put into matrix
                        for (i=0;i<maxi+2;i++) {
                                for (j=0;j<maxj+2;j++) {
                                        matrix[i][j] = new Elements(); //this part is very slow should change somehow
                                }
                        }
                                                                                                                                                             
                        System.out.println("Calculating distances ...");
                        //calc euclidian distance and put into matrix
                        for(i=2;i<maxi+2;i++) {
                                for(j=2;j<maxj+2;j++) {
					if (useBasePeak) {
                                        	matrix[i][j].element = euclidianDis(reference[1][i-1], target[1][j-1]);
					} else if (useDotProduct) {
						matrix[i][j].element = dotProduct(tempreference[i-2], temptarget[j-2]);
					}
				}
                        }
                                                                                                                                                             
                } catch (IOException e) {
                         System.out.println("Error while parsing MS1 files");
                         System.out.println(e.toString());
                }
        }

	public void printMatrix() {
		int i;
		int j;
		
		for(j=0;j<matrix[1].length;j++) {
			StringBuffer sb = new StringBuffer(DEFAULTSPECTRUMSIZE);
			for(i=0;i<matrix[0].length;i++) {
                                sb.append(matrix[i][j].element + "\t");
                        }
			System.out.println(sb);
                }
	}

	public void printPath() {
                int j;

                for(j=0;j<pathArray[1].length;j++) {
			if(pathArray[0][j] >= 0) {
                        	StringBuffer sb = new StringBuffer(DEFAULTSPECTRUMSIZE);
                        	sb.append(pathArray[0][j] + "\t" + pathArray[1][j]);
                        	System.out.println(sb);
			}
                }
        }

	public void writeOutputFile() {
                int 	j;
		int	i;
		int 	k;
		int	tickLength = 500;
		String  TString = "0.###";
                DecimalFormat    formatter = new DecimalFormat(TString);

		System.out.println("Writing output...");
		StringBuffer	xmlData = new StringBuffer();
                xmlData.append("<?xml version=\"1.0\" standalone=\"no\"?>\n");
		xmlData.append("<plot>\n");
                xmlData.append("<title>Chromatogram</title>\n");
                xmlData.append("<xLabel>Retention Time</xLabel>\n");
                xmlData.append("<yLabel>Intensity</yLabel>\n");
                xmlData.append("<noGrid/>\n");
                xmlData.append("<size width=\"1000\" height=\"300\"/>\n");
		writeOutputLine("chro_out.xml",xmlData,false);
                
		//x axis tick labels
		StringBuffer tickSb = new StringBuffer();
                tickSb.append("<xTicks>\n");                
		
		StringBuffer sb = new StringBuffer(DEFAULTSPECTRUMSIZE);
		System.out.println("Writing reference...");
		sb.append("<dataset name=\"reference\" marks=\"none\" connected=\"yes\" stems=\"no\">\n");
		k=0;
		for(j=0;j<reference[1].length;j++) {
                        if(reference[1][j] > 0) {
                                sb.append("<p x=\"" + reference[0][j] + "\" y=\"" + formatter.format(reference[1][j]) + "\"/>\n");
				if (k == tickLength) {
                                	tickSb.append("<tick label=\"" + reference[0][j] +"\" position=\"" + reference[0][j] + "\" />\n");
					k = 0;
                        	}
			}
			k++;
                }
                
                tickSb.append("</xTicks>\n");
		sb.append("</dataset>\n");
                tickSb.append(sb.toString());
		System.out.println("Writing target...");
		tickSb.append("<dataset name=\"target\" marks=\"none\" connected=\"yes\" stems=\"no\">\n");	
		for(j=0;j<target[1].length;j++) {
                        if(target[1][j] > 0) {
                                tickSb.append("<p x=\"" + target[0][j] + "\" y=\"" + formatter.format(target[1][j]) + "\"/>\n");
                        }
                }
                tickSb.append("</dataset>\n");
		tickSb.append("</plot>\n");
                writeOutputLine("chro_out.xml",tickSb,true);

		//Path Data
		System.out.println("Writing path...");
		xmlData = new StringBuffer();
                xmlData.append("<?xml version=\"1.0\" standalone=\"no\"?>\n");
		xmlData.append("<plot>");
                xmlData.append("<title>Path</title>\n");
                xmlData.append("<xLabel>Reference Chromatogram</xLabel>\n");
                xmlData.append("<yLabel>Target Chromatogram</yLabel>\n");
                xmlData.append("<noGrid/>\n");
                xmlData.append("<size width=\"750\" height=\"750\"/>\n");
		writeOutputLine("path_out.xml",xmlData,false);
		
		//yaxis tick marks
		StringBuffer ytickSb = new StringBuffer();
                ytickSb.append("<yTicks>\n");
		//xaxis tick marks
		tickSb = new StringBuffer();
                tickSb.append("<xTicks>\n");
		
		k=0;
                sb = new StringBuffer(DEFAULTSPECTRUMSIZE);
		sb.append("<dataset name=\"path\" marks=\"none\" connected=\"yes\" stems=\"no\">\n");
		for(j=0;j<pathArray[1].length;j++) {
                        if(pathArray[0][j] > 0) {
                                sb.append("<p x=\"" + pathArray[0][j] + "\" y=\"" + pathArray[1][j] + "\"/>\n");
				if (k == tickLength) {
					tickSb.append("<tick label=\"" + pathArray[0][j] +"\" position=\"" + pathArray[0][j] + "\" />\n");
					ytickSb.append("<tick label=\"" + pathArray[1][j] +"\" position=\"" + pathArray[1][j] + "\" />\n");
					k=0;
				}
                        }
			k++;
                }
		tickSb.append("</xTicks>\n");
		ytickSb.append("</yTicks>\n");
                sb.append("</dataset>\n");
		StringBuffer sb2 = new StringBuffer(DEFAULTSPECTRUMSIZE);
		sb2.append(tickSb.toString());
		sb2.append(ytickSb.toString());
		sb2.append(sb.toString());
		sb2.append("</plot>");
		writeOutputLine("path_out.xml",sb2,true);

		//write aligned chromatograms
		System.out.println("Writing aligned chromatograms...");
                xmlData = new StringBuffer();
                xmlData.append("<?xml version=\"1.0\" standalone=\"no\"?>\n");
                xmlData.append("<plot>");
                xmlData.append("<title>Aligned Chromatograms</title>\n");
                xmlData.append("<xLabel>Reference Chromatogram</xLabel>\n");
                xmlData.append("<yLabel>Target Chromatogram</yLabel>\n");
                xmlData.append("<noGrid/>\n");
                xmlData.append("<size width=\"1000\" height=\"300\"/>\n");
                writeOutputLine("aligned_out.xml",xmlData,false);

		StringBuffer	ref = new StringBuffer(DEFAULTSPECTRUMSIZE);
		ref.append("<dataset name=\"reference\" marks=\"none\" connected=\"yes\" stems=\"no\">\n");
		StringBuffer	tar = new StringBuffer(DEFAULTSPECTRUMSIZE);
		tar.append("<dataset name=\"target\" marks=\"none\" connected=\"yes\" stems=\"no\">\n");
		sb = new StringBuffer(DEFAULTSPECTRUMSIZE);
		tickSb = new StringBuffer(DEFAULTSPECTRUMSIZE);
		tickSb.append("<xTicks>");

		k = 0;
		for(j=0;j<pathArray[1].length;j++) {
			if(reference[0][pathArray[0][j]] > 0) {
				ref.append("<p x=\"" + reference[0][pathArray[0][j]] + "\" y=\"" + reference[1][pathArray[0][j]] + "\"/>\n");
                		tar.append("<p x=\"" + reference[0][pathArray[0][j]] + "\" y=\"" + target[1][pathArray[1][j]] + "\"/>\n");
				if (k == tickLength) {
                               		tickSb.append("<tick label=\"" + reference[0][pathArray[0][j]] +"\" position=\"" + reference[0][pathArray[0][j]] + "\" />\n");
                        		k = 0;
                        	}
			}
			k++;
                }
		tickSb.append("</xTicks>\n");
		ref.append("</dataset>\n");
		tar.append("</dataset>\n</plot>");
		sb.append(tickSb.toString());
		sb.append(ref.toString());
		sb.append(tar.toString());
		writeOutputLine("aligned_out.xml",sb,true);
        }

        private static Element createXmlHeader()
    {
            
        Element root = new Element("plot");
        
        Element title = new Element("title");
        title.setText("Chromatogram");
        root.addContent(title);

        Element xLabel = new Element("xLabel");
        xLabel.setText("Retention Time");
        root.addContent(xLabel);

        Element yLabel = new Element("yLabel");
        yLabel.setText("Intensity");
        root.addContent(yLabel);

        Element grid = new Element("noGrid");
        root.addContent(grid);

        Element size = new Element("size");
        size.setAttribute("width", "1000");
        size.setAttribute("height", "300");
        root.addContent(size);

        return root;
    }
        //first file in array is master
        public Element createChrodata(Element root, double[][][] files, String[] datasetnames) {
            int             j;
            int             i;
	    int             k;
	    int             tickLength = 500;
            String          TString = "0.##";
            DecimalFormat   formatter = new DecimalFormat(TString);
            int             numfiles;
            double[][]      arr;
            int             index = 0;
            
            numfiles = files[0].length;
            //master file is first
            arr = files[0];
            Element xTicks = new Element("xTicks");
            root.addContent(xTicks);
            k=0;
            for(j=0;j<arr[1].length;j++) {
                if(arr[1][j] > 0) {
                    if (k == tickLength) {
                        Element tick = new Element("tick");
                        tick.setAttribute("label", formatter.format(arr[0][j]));
                        tick.setAttribute("position",formatter.format(arr[0][j]));
                        root.addContent(tick);
			k = 0;
                    }
                }
                k++;
            }
            while(index < numfiles) {
                Element dataset = new Element("dataset");
                dataset.setAttribute("name", datasetnames[index]);
                dataset.setAttribute("marks", "none");
                dataset.setAttribute("connected", "yes");
                dataset.setAttribute("stems", "no");
                root.addContent(dataset);

                k=0;
                for(j=0;j<arr[1].length;j++) {
                    if(arr[1][j] > 0) {
                        Element point = new Element("p");
                        point.setAttribute("x", formatter.format(arr[0][j]));
                        point.setAttribute("y", formatter.format(arr[1][j]));
                        root.addContent(point);
                    }
                    k++;
                }
                index++;
                arr = files[index];
            }
            return root;
        }
        
        public void test_writeOutputFile(Element root, String filename) {
                
            
                
            //output xml file
            try {
                Document doc = new Document(root);
                OutputStream os = new FileOutputStream(filename);
                XMLOutputter outputter = new XMLOutputter();
                outputter.setFormat(Format.getPrettyFormat());
                outputter.output(doc, os);
                os.close();
            } catch (IOException e)
            {
                System.out.println("IO Error while generating " + filename + " file : " + e);
                e.printStackTrace();
            }
        }
        
	public void writeOutputLine(String Filename, StringBuffer Data, boolean OverWrite) {
                try {
                        File             OutputFile = new File(Filename);
                        FileWriter       OutputFileWriter = new FileWriter(OutputFile, OverWrite);
                        BufferedWriter   Outgoing = new BufferedWriter(OutputFileWriter);
                        Outgoing.write(Data.toString());
                        Outgoing.close();
                } catch (IOException failure) {
                        System.out.println("IO Error while writing " + Filename);
                        System.exit(0);
                }
        }	

	public void printBPChro(double[][] array) {
                int i;
                int j;

                for(j=0;j<array[1].length;j++) {
			if(array[1][j] > 0) {
                        	StringBuffer sb = new StringBuffer(DEFAULTSPECTRUMSIZE);
                        	sb.append(array[0][j] + "\t" + array[1][j]);
                        	System.out.println(sb);
			}
                }
        }


	public Peak basePeak(Iterator<Peak> peaks) {
		Peak	tpeak;
		Peak	bpeak = new Peak(0,0);
		double	maxint = 0.0;

		while (peaks.hasNext()) {
			tpeak = peaks.next();
			if (tpeak.getIntensity() > maxint) {
				maxint = tpeak.getIntensity();
				bpeak  = tpeak;
			}
		}
		return bpeak;
	}

	//need to make sure this function actually works!
	public double dotProduct(PeakList refSpectrum, PeakList tarSpectrum) {
		double	tolerance = 50;//ppm tolerance
		double	delta;
		int	i=0;                
                int	cnt=0;
		double	sumint=0;
		Peak	refPeak;
		Peak    tarPeak;
		Iterator<Peak>	peaks;
		double[][]	refarray = new double[2][refSpectrum.numPeaks()];
		double[][]      tararray = new double[2][tarSpectrum.numPeaks()];
                                                                                                                             
                //while (i<refSpectrum.numPeaks()) {
		//List<String> rtList = list.getIlines();
                //content = rtList.get(0).split("\t");
                //rt = new Double(content[2]).doubleValue();
               	//peaks = list.getPeaks();

		//put peaks into arrays so can move around easier
		peaks = refSpectrum.getPeaks();
		while(peaks.hasNext()) {
			refPeak = peaks.next();
			refarray[0][cnt] = refPeak.getM2z();
			refarray[1][cnt] = refPeak.getIntensity();
			cnt++;	
		}
		peaks = tarSpectrum.getPeaks();
		cnt = 0;
                while(peaks.hasNext()) {
                        tarPeak = peaks.next();
                        tararray[0][cnt] = tarPeak.getM2z();
                        tararray[1][cnt] = tarPeak.getIntensity();
			cnt++;
                }
		cnt = 0;
		while (i < refarray[1].length) {
			delta = refarray[0][i]/1000000*tolerance;
			while (tararray[0][cnt] < refarray[0][i] - delta && cnt < tararray.length) {
                        	cnt++;
			}
			while (tararray[0][cnt] >= refarray[0][i] - delta && tararray[0][cnt] < refarray[0][i] + delta && cnt < tararray.length) {
				sumint += tararray[1][cnt]*refarray[1][i];
				cnt++;		
			}
			i++;
                }
                return sumint;
        }

	public double euclidianDis(double q, double c) {
		double d;
		d = (q - c);
		d = d*d;
		return d;
	}

	public double correlation (double[] abun1, double[] abun2, int number, int shift) {
            	double r = 0;
            	int index;
            	double Sumx, Sumy, Sumxy, Sumx2, Sumy2, x, y;

            	Sumx = 0; Sumy = 0; Sumx2 = 0; Sumy2 = 0; Sumxy = 0;
            	for (index = 0; index < number; index++) {
			if (index + shift > 0 && index + shift < number) {
                		x = abun1[index + shift];
			} else {
				x = abun1[index];
			}
                	y = abun2[index];
                	Sumx += x;
                	Sumy += y;
                	Sumx2 += x*x;
                	Sumy2 += y*y;
                	Sumxy += x*y;
            	}
            	r = (Sumxy - Sumx*Sumy/number)/((double) Math.sqrt((Sumx2 - Sumx*Sumx/number) * (Sumy2 - Sumy*Sumy/number)));
		return r;
        }
	
	/*private void makeMassList() {
		double tempmass = (double)startmass;
                int j = 0;
		double	increment = 0.001;
		
		while (tempmass <= endmass) {
			masslist[j] = tempmass;
			tempmass += increment;
			j++;
		}
		arraysize = j;
	}*/
        
	public void usage() {
		System.out.println("\nUSAGE: chroalign [target MS1File] [reference MS1File]");
	}
}
