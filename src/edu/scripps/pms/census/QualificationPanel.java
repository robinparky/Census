/*
 * QualificationPanel.java
 *
 * Created on July 18, 2006, 3:18 PM
 */

package edu.scripps.pms.census;

import javax.swing.table.DefaultTableModel;
import edu.scripps.pms.census.model.*;
import edu.scripps.pms.census.util.*;

import ptolemy.plot.plotml.PlotBoxMLParser;

import edu.scripps.pms.census.plot.*;
import ptolemy.plot.plotml.PlotMLParser;
import ptolemy.plot.*;

import javax.swing.*;
import edu.scripps.pms.census.hash.*;

import java.util.*;
import java.awt.*;

import java.io.*;

/**
 *
 * @author  rpark
 */
public class QualificationPanel extends javax.swing.JPanel {
        
    
    private ChroProtein chroProtein;
    private ChroPeptide currentPeptide;
    private JFrame mFrame;
    private String currentDirectory;
    private Hashtable<String, IndexedFile> ht;
    
    public QualificationPanel() {
        initComponents();
        
    }
    
    /** Creates new form QualificationPanel */
    public QualificationPanel(JFrame parent, String currentDirectory, Hashtable ht) {
        
        this();
        
        this.setMFrame(parent);  
        this.setCurrentDirectory(currentDirectory);
        this.setHt(ht);
        
    }
        
    private DefaultTableModel peptideTableModel = 
        new DefaultTableModel( CensusConstants.PEPTIDE_COLUMNS, 0 ) 
    {
        public boolean isCellEditable(int row, int column)
        {
          return false;
        }        
    };

    public void setCurrentProtein(ChroProtein chroProtein)
    {
        this.setChroProtein(chroProtein);            
        this.setCurrentPeptide((ChroPeptide)chroProtein.getPeptideList().get(0));

        //Remove all existing rows
        int rowCount = peptideTableModel.getRowCount(); 
        for(int i=0;i<rowCount;i++)
            peptideTableModel.removeRow(0); //note zero here
            
        ChroPeptide pep;

        for(Iterator<ChroPeptide> itr= chroProtein.getPeptideList().iterator(); itr.hasNext(); ) 
        {
            pep = itr.next();   
            peptideTableModel.addRow( pep.getPeptideData() );                                
                        
        }   
        
        drawIris(this.currentPeptide);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        peptideScroll = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        irisPlot = new edu.scripps.pms.census.plot.IrisPlot();

        jTable1.setModel(peptideTableModel);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                peptideListMouseClicked(evt);
            }
        });

        peptideScroll.setViewportView(jTable1);

        org.jdesktop.layout.GroupLayout irisPlotLayout = new org.jdesktop.layout.GroupLayout(irisPlot);
        irisPlot.setLayout(irisPlotLayout);
        irisPlotLayout.setHorizontalGroup(
            irisPlotLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 778, Short.MAX_VALUE)
        );
        irisPlotLayout.setVerticalGroup(
            irisPlotLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 441, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, irisPlot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, peptideScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(peptideScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 312, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(irisPlot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void peptideListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_peptideListMouseClicked
// TODO add your handling code here:
        
        JTable table = (JTable)evt.getSource();

        ChroPeptide peptide = (ChroPeptide)chroProtein.getPeptideList().get( table.getSelectedRow() );
        
        drawIris(peptide);
    }
        
    private void drawIris(ChroPeptide peptide)
    {
        this.currentPeptide = peptide;

//        final JDialog progress = new JDialog(this);
        final String tempFolder = this.getCurrentDirectory() + File.separator;
        final ChroPeptide tempPeptide = this.getCurrentPeptide();

        try 
	{
            final JDialog progress = new JDialog(getMFrame());
	    JProgressBar aJProgressBar = new JProgressBar(0, 100);
	    aJProgressBar.setIndeterminate(true);
	    Container cp = progress.getContentPane();
	    JLabel jb = new JLabel("Initializing index files...",
		    SwingConstants.CENTER);
	    cp.add(jb, BorderLayout.SOUTH);
	    cp.add(aJProgressBar, BorderLayout.NORTH);
	    progress.setSize(350, 100);
	    progress.setLocationRelativeTo(this);
	    progress.pack();

	    progress.setResizable(false);
	    progress.setVisible(true);

	    Thread t = new Thread() {
		public void run() {
		    //parent.dispose();
		    //MainFrame frame = (MainFrame) parent.getOwner();

		    try {
                        
                        StringBuffer xmlData = new StringBuffer();
                        xmlData.append("<?xml version=\"1.0\" standalone=\"no\"?>");   
                        xmlData.append("<plot>");
                        xmlData.append("<title>Iris - Fragment Ions</title>");
                        xmlData.append("<xLabel>m/z</xLabel>");
                        xmlData.append("<yLabel>Intensity</yLabel>");

                        xmlData.append("<grid/>");    
                        xmlData.append("<dataset name=\"peak_list\" marks=\"none\" connected=\"no\" stems=\"yes\">");

                        //<tick label="90-100" position="90" />                     
                        //xmlData.append("<p x=\"213\" y=\"43\" />");
                        //xmlData.append("<p x=\"2131\" y=\"423\" />");
                        //xmlData.append("<p x=\"2123\" y=\"443\" />");

                        //String ms2FileName = peptide.getFileName().substring(0, peptide.getFileName().indexOf("."));

                        String ms2FileName=tempPeptide.getFileName();
                        for(int i=0;i<3;i++)
                            ms2FileName = ms2FileName.substring(0, ms2FileName.lastIndexOf("."));

                        ms2FileName += ".ms2";

                        IndexedFile iFile = ht.get( ms2FileName );

                        if(null == iFile)
                        {
                            throw new Exception("Error : cannot find the file " + ms2FileName);
                        }

                        int[] keys = iFile.getKeys();
                        int keyIndex = Arrays.binarySearch(keys, tempPeptide.getScanNum());


                        if(keyIndex<0) //Cannot find index
                            keyIndex=-(++keyIndex); //Math.abs(++keyIndex);

                        IrisDataModel dataModel = CalcUtil.readSpectrumPeaks(iFile, keyIndex, keys);

                        double[] massArr = dataModel.getMass();
                        double[] intArr = dataModel.getIntensity();

                        for(int i=0;i<massArr.length;i++)
                        {
                            xmlData.append("<p x=\"").append(massArr[i]).append("\" y=\"").append(intArr[i]).append("\" />");
                        }            

                        xmlData.append("</dataset>");
                        xmlData.append("</plot>");                        

                        //Plot plot = new IrisPlot();

                        PlotMLParser parser = new PlotMLParser( (Plot)irisPlot );
                        irisPlot.clear(true);            
                        //irisPlot.repaint();        
                        parser.parse(null, xmlData.toString());

                        irisPlot.invalidate();
                        irisPlot.validate();
                        irisPlot.repaint();                        

		    } catch (Exception e)
		    {
			System.out.println("error " + e);
                        JOptionPane.showMessageDialog(mFrame, "Error:\n\n" + e.getMessage());
		    }

		    SwingUtilities.invokeLater(new Runnable() {
			    public void run() {
			    progress.setVisible(false);
                    }
                });

		}
	    };

	    t.start();

	} catch (Exception de) {
	    JOptionPane.showMessageDialog(this, "Failed to read index files:\n\n" + de.getMessage());
	}
    }//GEN-LAST:event_peptideListMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private edu.scripps.pms.census.plot.IrisPlot irisPlot;
    private javax.swing.JTable jTable1;
    private javax.swing.JScrollPane peptideScroll;
    // End of variables declaration//GEN-END:variables



    public ChroProtein getChroProtein() {
        return chroProtein;
    }

    public void setChroProtein(ChroProtein chroProtein) {
        this.chroProtein = chroProtein;
    }

    public ChroPeptide getCurrentPeptide() {
        return currentPeptide;
    }

    public void setCurrentPeptide(ChroPeptide currentPeptide) {
        this.currentPeptide = currentPeptide;
    }

    public JFrame getMFrame() {
        return mFrame;
    }

    public void setMFrame(JFrame mFrame) {
        this.mFrame = mFrame;
    }

    public String getCurrentDirectory() {
        return currentDirectory;
    }

    public void setCurrentDirectory(String currentDirectory) {
        this.currentDirectory = currentDirectory;
    }

    public Hashtable getHt() {
        return ht;
    }

    public void setHt(Hashtable ht) {
        this.ht = ht;
    }
}
